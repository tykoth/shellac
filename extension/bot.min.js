"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * [speak description]
 * @method speak
 * @param  {strings}   input    O que é pra falar.
 * @param  {Function} callback Se for necessario, um callback após falar.
 * @return {Promise}            Promise para utilizar com perguntas e/ou outras falas.
 */
function speakold(input, callback) {
    return new Promise(function (resolve, reject) {
        speaker.onEnd(function () {
            if (callback) callback();
            resolve();
        });
        speaker.speak(document.getElementById("lang").value, input);
        AnimatedOutput(input);
    });
}

function speak(input) {
    return bot.speak(input);
}
/**
 * [ask description]
 * @method ask
 * @param  {[type]} input    [description]
 * @param  {[type]} onanswer [description]
 * @return {Promise}          [description]
 */
function askold(input, onanswer) {

    return new Promise(function (resolve, reject) {

        smartSpeechRecognition.abort();

        speaker.onEnd(function () {});
        speaker.speak(document.getElementById("lang").value, input);

        window.onanswer = function (answer) {
            console.log('chegou aqui ao menos');
            if (onanswer) onanswer(answer);
            resolve(answer);
        };

        AnimatedOutput(input);
    }); //.then();
}
function ask(input) {
    return bot.ask(input);
}
/**
 * @todo Pega esse código e arruma, passa pra Promise (olha a function 'speak');
 */
function speak_multiline_v1old(input) {
    var lines = input.split('\n');
    bot.readedLines = bot.readedLines || 0;
    bot.totalReadableLines = lines.length;
    var recursive_speak = function recursive_speak(input) {
        if (input.length > 0) {
            smartSpeechRecognition.retry();
            var i = input.shift();
            speaker.speak(document.getElementById("lang").value, i);
            speaker.onEnd(function () {
                recursive_speak(input);
            });
            //
            AnimatedOutput(i, 10);
            output('lendo...');
            bot.readedLines++;
        } else {
            smartSpeechRecognition.start();
        }
    };
    recursive_speak(lines);
}

function speak_multiline_v1(i) {
    bot.speak(i);
}
function QuestionInterpreter(question) {
    speak("Você perguntou: " + question + "?");
}

/**
 * [CommandsInterpreter description]
 * @method CommandsInterpreter
 * @param  {[type]}            command [description]
 */
function CommandsInterpreter(command, callback) {
    frases++;

    $("#status").removeClass("listening").addClass("working");

    command = command.trim().toLowerCase();

    if (typeof window.onanswer === 'function') {
        var satisfied = window.onanswer(command);

        /**
         * @todo 'not satisfied', retry
         */
        return window.onanswer = null;
    }
    bot.input(command);
    AnimatedInput(command);
    console.log("window.commands[\"^" + command + "$\"] = function (i) { speak(\"" + command + "\");}");

    db.transaction(function (tx) {
        tx.executeSql('INSERT INTO LOG (log, time) VALUES (?, ?)', [command, new Date().getTime()]);
    });

    bot.processQueue();

    $("#status").removeClass("working").addClass("listening");
}

/**
 *
 */
function AnimatedOutput(text, speed) {}

function AnimatedInput(text) {
    var el = document.getElementById('animated-input');
    el.innerText = text;
}

/**
 * Output to panel
 */
function output(o) {
    $(".output").html(o);

    if ((typeof bot === "undefined" ? "undefined" : _typeof(bot)) != undefined) {
        $(".opened-windows").html(bot.windows.length);
        $(".executions").html(bot.executions);
        $(".phrases").html(frases);

        if (bot.readedLines) {
            $(".readed-lines").html(bot.readedLines);
            $(".total-readable-lines").html(bot.totalReadableLines);
        }
    }
}

//http://stackoverflow.com/questions/2914/how-can-i-detect-if-a-browser-is-blocking-a-popup
var popupBlockerChecker = {
    check: function check(popup_window) {
        var _scope = this;
        if (popup_window) {
            if (/chrome/.test(navigator.userAgent.toLowerCase())) {
                setTimeout(function () {
                    _scope._is_popup_blocked(_scope, popup_window);
                }, 200);
            } else {
                popup_window.onload = function () {
                    _scope._is_popup_blocked(_scope, popup_window);
                };
            }
        } else {
            _scope._displayError();
        }
    },
    _is_popup_blocked: function _is_popup_blocked(scope, popup_window) {
        if (popup_window.innerHeight > 0 == false) {
            scope._displayError();
        }
    },
    _displayError: function _displayError() {
        speak('Não consigo abrir a janela');
    }
};

function formatTime(seconds) {
    var h = Math.floor(seconds / 3600);
    var m = Math.floor(seconds % 3600 / 60);
    var s = seconds % 60;
    return [h, m > 9 ? m : '0' + m, s > 9 ? s : '0' + s].filter(function (s) {
        return s;
    }).join(':');
}
'use strict';
/**
 * The core of my friend :)
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bot = function () {
    function Bot() {
        _classCallCheck(this, Bot);

        this.inputs = [];
        this.matches = [];
        this.matchList = [];
        this.interpreters = [];
        this.functionsQueue = [];
        this.intervals = [];
        this.windows = [];
        this.returnedValues = [];
        this.executions = 0;
        this.params = {};
        this.controllers = [];
        this.components = {};

        // Current input
        this.tokens = {};

        // estudo
        this.user = {};
        this.user.params = {};

        this.inputResolve = null;
        this.inputReject = null;

        this.outputResolve = null;
        this.outputReject = null;

        this.language = 'pt-BR';

        /**
         * Loader first try
         * @todo move to the right place.
         */

        // Acumulative
        this.tokensCloud = function () {
            if (localStorage['bot.tokensCloud']) {
                return JSON.parse(localStorage['bot.tokensCloud']);
            } else {
                return {};
            }
        }();
    }

    _createClass(Bot, [{
        key: 'param',
        value: function param(name, value) {

            if (!!value) {
                this.params[name] = value;
            }

            if (this.params[name]) {
                return this.params[name];
            }

            return null;
        }
        /**
         * Assimilate a class "assmimilable" by the Bot. Yes.
         * @param {BotComponent|BotInterpreter|BotController} The kind of assimilable.
         * @return {Bot}
         */

    }, {
        key: 'assimilate',
        value: function assimilate(assimilable) {

            if (Object.getPrototypeOf(assimilable) == BotComponent) {
                var componentName = assimilable.name.replace(/^BotWindow(.*)Component$/gi, '$1').replace(/(^\w)/, function ($1) {
                    return $1.toLowerCase();
                });

                this.components[componentName] = new assimilable(this);
                return this;
            };

            if (Object.getPrototypeOf(assimilable) == BotInterpreter) {
                this.interpreters.push(assimilable);
                return this;
            };

            var props = Object.getOwnPropertyNames(assimilable.prototype);

            var controller = new assimilable();

            for (var x in props) {
                if (props[x] === 'constructor') continue;
                /**
                 * New approach to use "single named functions"
                 * @type {String}
                 */
                var regexpString = props[x];
                if (props[x].match(/^\b[a-zA-Z0-9_]+\b$/gi)) {
                    regexpString = props[x] + ' (.*)';
                }

                this.matches.push({
                    regexp: new RegExp(regexpString, 'gi'),
                    callback: assimilable.prototype[props[x]].bind(this),
                    src: assimilable.prototype[props[x]].toString(),
                    source: assimilable.name,
                    full: controller[props[x]].toString()
                });
            }

            return this;
        }

        /**
         * Sounds preety obvious, eh?
         * @param  {String} i The input
         * @return {Promise}   So do what you whant with bot.input('your input').then...
         */

    }, {
        key: 'input',
        value: function input(i) {
            var self = this;
            this.tokenize(i);
            return new Promise(function (resolve, reject) {
                self.outputResolve = resolve;
                self.outputReject = reject;
                self.inputs.push(i);
                return self.interpret(i);
            });
        }
    }, {
        key: 'tokenize',
        value: function tokenize(input) {
            var self = this;
            self.tokens = {};

            return input.toLowerCase().replace(/[^a-z0-9á-úñäâàéèëêïîöôùüûœç\- ]+/g, '').replace('/ {2,}/', ' ').split(' ').map(function (a) {
                self.tokensCloud[a] = typeof self.tokensCloud[a] != 'number' ? 1 : self.tokensCloud[a] + 1;
                self.tokens[a] = self.tokensCloud[a];
                var output = {};
                output[a] = self.tokensCloud[a];
                return a;
            });
        }

        /**
         * Bi/Tri Grams
         * @param  {String} input
         * @param  {[type]} n     [description]
         * @param  {[type]} t     [description]
         * @return {[type]}       [description]
         */

    }, {
        key: 'ngram',
        value: function ngram(input, n, t) {
            var regexp = /([0-9]+|[a-z\u00E0-\u00FC^]+([a-z\u00E0-\u00FC^\-]+)?)/gi;
            var tokens = input.match(regexp);

            var gran = [];
            var ngrans = {};
            var n = n || 2;
            var t = t || 0;
            while (tokens.length >= n) {
                gran = [];
                for (var x = 0; x < n; x++) {
                    gran.push(tokens[x]);
                }
                gran = gran.join(" ");
                ngrans[gran] = ngrans[gran] + 1 || 1;
                tokens.shift();
            }

            if (t > 0 && t > n) {
                var more = this.ngram(input, n + 1, t);
                for (var gran in more) {
                    ngrans[gran] = more[gran];
                }
            }
            return ngrans;
        }

        /**
         *
         */

    }, {
        key: 'interpret',
        value: function interpret(input) {

            if (typeof this.inputResolve === 'function') {
                this.inputResolve(input);
                this.inputResolve = null;
            } else {
                for (var i in this.interpreters) {
                    var interpreterName = this.interpreters[i].name;
                    if (this.interpreters[i].prototype.interpret !== this.interpret) {
                        // console.log(`Interpretando com ${interpreterName}`);
                        this.interpreters[i].prototype.interpret.bind(this)(input);
                    };
                }
            }

            /**
             * THIS MUST BE RETIRATED DAQUI
             * @todo VAO TOMA NO CYYYYYYYYYYYYYYYYYYYYYYYYYYY
             */

            return this.processQueue();
        }

        /**
         *
         */

    }, {
        key: 'queue',
        value: function queue(callback, exec) {
            this.functionsQueue.push({
                callback: callback,
                exec: exec
            });
        }
    }, {
        key: 'processQueue',
        value: function processQueue() {
            var self = this;
            var chain = Promise.resolve();

            var _loop = function _loop(x) {
                var p = self.functionsQueue[x];

                chain = chain.then(function () {
                    var returnedValues = p.callback.apply(self, p.exec);
                    if (returnedValues instanceof Promise) {
                        self.executions++;
                        return returnedValues;
                    } else {
                        // console.log(['olha isso aqui...', returnedValues]);
                        self.processReturn(returnedValues);
                    }
                });
            };

            for (var x in self.functionsQueue) {
                _loop(x);
            }

            self.functionsQueue = []; // clear queue.

            return chain.then(function () {
                // console.log(['last chain of processQueue']);
                if (typeof self.outputResolve == 'function') {
                    // console.log(['outputResolver']);
                    return self.outputResolve(self.returnedValues);
                }
            }).then(function () {
                if (bot.tokensCloud) {
                    localStorage['bot.tokensCloud'] = JSON.stringify(bot.tokensCloud);
                }
                return true;
            });
        }

        /**
         *
         */

    }, {
        key: 'processReturn',
        value: function processReturn(i) {
            this.returnedValues.push(i);
            this.executions++;
        }
    }, {
        key: 'interval',
        value: function interval(callback, time) {
            time = time || 500;
            var interval = setInterval(callback, time);
            return interval;
        }
    }, {
        key: 'clearAllIntervals',
        value: function clearAllIntervals() {
            for (var i in bot.intervals) {
                clearInterval(i);
            }
        }
    }]);

    return Bot;
}();
'use strict';
/**
 * Cool ?
 * 
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BotApp = function BotApp() {
  _classCallCheck(this, BotApp);
};
'use strict';
/**
 * Components are cool.
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BotComponent = function BotComponent() {
  _classCallCheck(this, BotComponent);
};
'use strict';
/**
 * The standard controller, uses regex.
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BotController = function BotController() {
  _classCallCheck(this, BotController);
};
'use strict';
/**
 * Help the bot to interpretate.
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BotInterpreter = function BotInterpreter() {
  _classCallCheck(this, BotInterpreter);
};
'use strict';
/**
 * Sense group of the build-in standard.
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BotSense = function BotSense() {
  _classCallCheck(this, BotSense);
};
'use strict';
/**
 * External services and good stuff
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BotService = function () {
  function BotService() {
    _classCallCheck(this, BotService);
  }

  _createClass(BotService, [{
    key: 'get',
    value: function get() {
      var self = this;
      return new Promise(function (resolve, reject) {
        $.getJSON(self.requestUrl, resolve, reject);
      });
    }
  }]);

  return BotService;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotAppGameOne = function (_BotApp) {
    _inherits(BotAppGameOne, _BotApp);

    function BotAppGameOne(bot) {
        var _ret;

        _classCallCheck(this, BotAppGameOne);

        var _this = _possibleConstructorReturn(this, (BotAppGameOne.__proto__ || Object.getPrototypeOf(BotAppGameOne)).call(this));

        _this.bot = bot;
        _this.currentQuestionKey = null;
        console.log('Construiu o %s', _this.bot);
        return _ret = _this, _possibleConstructorReturn(_this, _ret);
    }

    _createClass(BotAppGameOne, [{
        key: 'init',
        value: function init(bot) {
            var bot = this.bot;

            bot.speak('Olá').then(this.getUser.bind(this)).then(this.getRandomQuestionFromFirebase.bind(this)).then(this.askAndAskInfinitelly.bind(this));
        }
    }, {
        key: 'getUser',
        value: function getUser() {
            console.log('Passando pelo getUser %s', Date.now());
            var self = this;
            var bot = self.bot;

            if (!bot.user.name) {
                return bot.speak('Eu não sei quem é você').then(function () {
                    return bot.speak('Por favor, identifique-se...').then(function () {
                        var provider = new firebase.auth.GoogleAuthProvider();
                        return firebase.auth().signInWithPopup(provider).then(function (result) {
                            var userId = firebase.auth().currentUser.uid;
                            console.log(result);

                            var email = result.user.providerData["0"].email;

                            var user = result.user;
                            var email = user.email;
                            var name = user.displayName;
                            var firstName = user.displayName.split(' ')[0];
                            var imageUrl = user.photoURL;
                            window.user_token = result.credential.accessToken;

                            return bot.ask('Ol\xE1. Seu nome ent\xE3o \xE9 \'' + firstName + '\', certo?').then(function (resposta) {
                                bot.user.name = firstName;
                                bot.user.uid = userId;
                                self.writeUserData(userId, name, email, imageUrl);
                                return self.getUser();
                            });
                            //
                        }).catch(function (error) {
                            console.log(error);
                            // Handle Errors here.
                            var errorCode = error.code;
                            var errorMessage = error.message;
                            // The email of the user's account used.
                            var email = error.email;
                            // The firebase.auth.AuthCredential type that was used.
                            var credential = error.credential;
                            // ...
                        });
                    });
                });
            } else {
                // return bot.speak(`Seja bem vindo então, ${bot.user.name}, vamos começar com as perguntas.`)
            }
        }
    }, {
        key: 'getRandomQuestionFromFirebase',
        value: function getRandomQuestionFromFirebase() {
            var bot = this.bot;
            var self = this;
            return new Promise(function (resolve, reject) {

                var randomQuestionRef = firebase.database().ref('game-one/questions/');
                randomQuestionRef.on('value', function (snapshot) {
                    var i = 0;
                    var rand = Math.floor(Math.random() * snapshot.numChildren());
                    snapshot.forEach(function (snapshot) {
                        if (i == rand) {
                            // picked random item, snapshot.val().
                            // console.log('se liga na key: %s', snapshot.key);
                            self.currentQuestionKey = snapshot.key;
                            resolve(snapshot.val());
                        }
                        i++;
                    });
                });
            });
        }
    }, {
        key: 'askAndAskInfinitelly',
        value: function askAndAskInfinitelly(question, key) {
            var bot = this.bot;
            console.log('key of the %s', key);
            return bot.ask(question).then(this.writeAnswer.bind(this)).then(this.getRandomQuestionFromFirebase.bind(this)).then(this.askAndAskInfinitelly.bind(this));
        }
    }, {
        key: 'writeUserData',
        value: function writeUserData(userId, name, email, imageUrl) {
            firebase.database().ref('users/' + userId).set({
                username: name,
                email: email,
                profile_picture: imageUrl
            });
        }
    }, {
        key: 'writeAnswer',
        value: function writeAnswer(answer) {
            return firebase.database().ref('game-one/answers').push({
                question: this.currentQuestionKey,
                user: bot.user.uid,
                answer: answer,
                date: Date.now()
            });
            // var updates = {};
            // return firebase.database().ref().update(updates);
        }
    }, {
        key: 'writeNewPost',
        value: function writeNewPost(question) {
            // // A post entry.
            // var postData = {
            //   author: username,
            //   uid: uid,
            //   body: body,
            //   title: title,
            //   starCount: 0,
            //   authorPic: picture
            // };
            //
            // // Get a key for a new Post.
            // //
            //
            // var newPostKey = firebase.database().ref().child('posts').push().key;
            //
            // // Write the new post's data simultaneously in the posts list and the user's post list.
            // var updates = {};
            // updates['/posts/' + newPostKey] = postData;
            // updates['/user-posts/' + uid + '/' + newPostKey] = postData;
            //
            // return firebase.database().ref().update(updates);
        }
    }]);

    return BotAppGameOne;
}(BotApp);
'use strict';
/**
 * The eyes of robot.
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotCameraComponent = function (_BotComponent) {
    _inherits(BotCameraComponent, _BotComponent);

    function BotCameraComponent(bot) {
        _classCallCheck(this, BotCameraComponent);

        var _this = _possibleConstructorReturn(this, (BotCameraComponent.__proto__ || Object.getPrototypeOf(BotCameraComponent)).call(this));

        var self = _this;
        //
        window.URL = window.URL || window.webkitURL;

        _this.video = $("<video autoplay width='100%' height='100%' id='camera-video'>").get(0);

        // Check for getUserMedia support.
        if (navigator.getUserMedia) {
            // Get video stream.
            navigator.getUserMedia({
                video: true
            }, _this.gotStream.bind(_this), _this.noStream.bind(_this));
        }

        return _this;
    }

    _createClass(BotCameraComponent, [{
        key: 'noStream',
        value: function noStream(err) {
            alert('Could not get camera stream.');
            console.log('Error: ', err);
        }

        // Stream success.

    }, {
        key: 'gotStream',
        value: function gotStream(stream) {
            // Feed webcam stream to video element.
            // IMPORTANT: video element needs autoplay attribute or it will be frozen at first frame.
            if (window.URL) {
                this.video.src = window.URL.createObjectURL(stream);
            } else {
                this.video.src = stream; // Opera support.
            }

            // Store the stream.
            this.localMediaStream = stream;
        }
    }]);

    return BotCameraComponent;
}(BotComponent);
'use strict';
/**
 * Oh yes, pretty good component.
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotNotifierComponent = function (_BotComponent) {
    _inherits(BotNotifierComponent, _BotComponent);

    function BotNotifierComponent(bot) {
        _classCallCheck(this, BotNotifierComponent);

        var _this = _possibleConstructorReturn(this, (BotNotifierComponent.__proto__ || Object.getPrototypeOf(BotNotifierComponent)).call(this));

        var self = _this;

        /**
         * Access to bot
         * @type {Bot}
         */
        _this.bot = bot;

        /**
         * Last notifications
         * @type {Array}
         */
        _this.notifications = [];

        _this.bot.notify = function () {
            return self.notify.apply(self, arguments);
        };

        return _this;
    }

    /**
     *
     */


    _createClass(BotNotifierComponent, [{
        key: 'notify',
        value: function notify(text) {
            var self = this;
            var name = bot.param('name') || 'Computador';
            var image = bot.param('avatar') || 'img/Assistant-100.png';
            var callback = bot.param('notification.callback') || function () {};

            return new Promise(function (resolve, reject) {

                if (self.notifications.length > 0) {
                    self.notifications[self.notifications.length - 1].close();
                }

                var notification = new Notification(name, {
                    icon: image,
                    body: text,
                    badge: "",
                    data: null,
                    dir: "auto",
                    image: "",
                    lang: "",
                    onclick: null

                    //  onerror:reject,
                    //  onshow:null,
                });

                notification.onclick = function () {
                    callback();
                    resolve(notification);
                    notification.close();
                };
                self.notifications.push(notification);
                //  notification.onclose = function(){
                //    resolve(notification);
                //  }
            });
        }
    }, {
        key: 'onfinal',
        value: function onfinal(callback) {
            this.__onFinal = callback;
        }
    }, {
        key: 'oneachevent',
        value: function oneachevent(callback) {
            this.__onEachEvent = callback;
        }
    }, {
        key: 'oneachresult',
        value: function oneachresult(callback) {
            this.__onEachResult = callback;
        }
    }, {
        key: 'end',
        value: function end() {
            var self = this;
            console.log('Terminou o recognition, locked:%s', this.locked);

            if (this.locked) {
                // console.log(['LLLLLLLLLLLLLOOOOOOOOOCKED', arguments]);
                return this.stop();
            } else {
                setTimeout(function () {
                    self.start();
                }, this.retryTimeout);
            }
        }
    }, {
        key: 'lock',
        value: function lock() {
            this.locked = true;
            return this;
        }
    }, {
        key: 'unlock',
        value: function unlock() {
            this.locked = false;
            return this;
        }
    }]);

    return BotNotifierComponent;
}(BotComponent);
'use strict';
/**
 *
 * @see http://stackoverflow.com/questions/21947730/chrome-speech-synthesis-with-longer-texts
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotServerTalkComponent = function (_BotComponent) {
    _inherits(BotServerTalkComponent, _BotComponent);

    function BotServerTalkComponent(bot) {
        _classCallCheck(this, BotServerTalkComponent);

        var _this = _possibleConstructorReturn(this, (BotServerTalkComponent.__proto__ || Object.getPrototypeOf(BotServerTalkComponent)).call(this));

        var self = _this;

        /**
         * Access to bot
         * @type {Bot}
         */
        _this.bot = bot;

        _this.socket = io("ws://localhost:3301");

        /**
         * Include 'speak' functionallity to bot
         * @method speak
         * @param  {String} text What should be said.
         * @return {Promise}      A promise to wait.
         */
        _this.bot.speak = function () {
            return self.speak.apply(self, arguments);
        };

        _this.bot.ask = function () {
            return self.ask.apply(self, arguments);
        };

        _this.start = function (event) {

            // if(event.utterance.text){
            //   this.__onSpeak(event.utterance.text);
            // }
            //
            // bot.components.speechRecognition.lock();
            // bot.components.speechRecognition.stop();
        };

        _this.getLanguage = function () {
            return bot.language;
        };

        _this.__onSpeak = function () {};
        return _this;
    }

    /**
     * Speak bot, i want to hear your voice.
     * @return {Promise} Oh yes, more Promisessss
     * @see http://stackoverflow.com/questions/21947730/chrome-speech-synthesis-with-longer-texts
     */


    _createClass(BotServerTalkComponent, [{
        key: 'speak',
        value: function speak(text) {
            console.log(arguments);
            var self = this;

            return new Promise(function (resolve, reject) {

                self.socket.emit('chat message', 'talk ' + text);
                resolve(text);
                // var chunkLength = 140;
                // if (text !== "") {
                //     // rule 1 - text as chunks
                //     var pattern = new RegExp('^[\\s\\S]{' + Math.floor(chunkLength / 2) + ',' + chunkLength + '}[.!?,]{1}|^[\\s\\S]{1,' + chunkLength + '}$|^[\\s\\S]{1,' + chunkLength + '} ');
                //     var chunks = [];
                //
                //     while (text.length > 0) {
                //         chunks.push(text.match(pattern)[0]);
                //         text = text.substring(chunks[chunks.length - 1].length);
                //     }
                //
                //     for (let t in chunks) {
                //
                //       self.socket.emit('chat message', 'talk ' + chunks[t]);
                //     }
                // }
            }).then(self.__onSpeak.bind(self));
            return;
        }
    }, {
        key: 'ask',
        value: function ask(text, onanswer, onreject) {

            var self = this;

            var onanswer = onanswer || function () {
                return true;
            };
            var onreject = onreject || function () {
                return true;
            };

            self.__onSpeak(text);

            return new Promise(function (resolve, reject) {
                self.bot.inputResolve = function (input) {
                    var answerResult = onanswer.apply(self, [input]);

                    if (answerResult === true) {
                        self.retries = 0;
                        resolve(input);
                    } else {
                        onreject(reject, input, self.retries++);
                    }
                };
                self.bot.inputReject = reject;
                self.socket.emit('chat message', 'talk ' + text);
            }).catch(function () {
                return self.ask(text, onanswer, onreject);
                //console.log(['catch inside ask function', arguments, this]);
            });
        }
    }, {
        key: 'handle',
        value: function handle(event) {

            if (typeof this[event.type] === 'function') {
                this[event.type](event);
            }
        }
    }, {
        key: 'onspeak',
        value: function onspeak(callback) {

            this.__onSpeak = callback;
        }
    }]);

    return BotServerTalkComponent;
}(BotComponent);
'use strict';
/**
 * Oh yes, pretty good component.
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotWindowSpeechRecognitionComponent = function (_BotComponent) {
    _inherits(BotWindowSpeechRecognitionComponent, _BotComponent);

    function BotWindowSpeechRecognitionComponent(bot) {
        _classCallCheck(this, BotWindowSpeechRecognitionComponent);

        var _this = _possibleConstructorReturn(this, (BotWindowSpeechRecognitionComponent.__proto__ || Object.getPrototypeOf(BotWindowSpeechRecognitionComponent)).call(this));

        var self = _this;
        _this.retryTimeout = 1000;

        /**
         * Lock the speech recognition
         * @type {Boolean}
         */
        _this.locked = false;

        /**
         * Tell if is started or not, filho da puta
         * @type {Boolean}
         */
        _this.started = false;

        var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition || mozSpeechRecognition || msSpeechRecognition || oSpeechRecognition;
        var SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;
        var SpeechRecognitionEvent = SpeechRecognitionEvent || webkitSpeechRecognitionEvent;

        _this.speechRecognition = new SpeechRecognition();
        _this.speechGrammarList = new SpeechGrammarList();

        _this.speechRecognition.continuous = false;
        _this.speechRecognition.interimResults = true;
        _this.speechRecognition.maxAlternatives = 1;
        // this.speechRecognition.start();
        var keys = Object.keys(Object.getPrototypeOf(_this.speechRecognition));

        for (var m in keys) {

            if (keys[m].indexOf('on') === 0) {
                _this.speechRecognition[keys[m]] = function (event) {
                    self.handle(event);
                };
            }
        }

        _this.__onEachEvent = function () {};
        _this.__onEachResult = function () {};
        _this.__onFinal = function () {};

        bot.speechRecognition = function () {
            return self.start();
        };

        _this.final = function (transcript) {
            // console.log(['this.final.transcript.to.bot.input', transcript]);
            bot.input(transcript.trim().toLowerCase());
            // this.stop();
            // setTimeout(this.start.bind(this), 4000);
            //this.start();
        };

        _this.getLanguage = function () {
            return bot.language;
        };
        return _this;
    }

    /**
     * Start no speechRecognition
     * @return {Void} Nada, rizus.
     */


    _createClass(BotWindowSpeechRecognitionComponent, [{
        key: 'start',
        value: function start() {
            if (this.locked === false) {

                this.speechRecognition.lang = this.getLanguage();
                return this.speechRecognition.start();
            }
        }
    }, {
        key: 'stop',
        value: function stop() {
            // console.log('STOPIIIIIIIIIIIIING');
            this.locked = true;
            this.speechRecognition.abort();
            return this.speechRecognition.stop();
        }
    }, {
        key: 'retry',
        value: function retry() {}

        /**
         * Handle all events of {this}
         * @method handle
         * @param  {event} event The fucking event, do'h
         * @return {Void}       yes?
         */

    }, {
        key: 'handle',
        value: function handle(event) {
            // console.log(event);
            this.__onEachEvent(event);
            if (event.type === 'start') {
                this.started = true;
            }
            if (typeof this[event.type] === 'function' && event.type !== 'start') {
                this[event.type](event);
            }
        }
    }, {
        key: 'error',
        value: function error(event) {
            if (event.error === 'aborted') {
                this.lock();
            }
        }

        /**
         * All results from speechRecognition pass here
         * @method result
         * @param  {event} event ...
         * @return {Void}       ?
         */

    }, {
        key: 'result',
        value: function result(event) {

            for (var x in event.results) {
                var result = event.results[x];

                if (_typeof(event.results[x]) === 'object') {
                    for (var y in result) {
                        if (_typeof(result[y]) === 'object') {
                            this.__onEachResult(result[y], result.isFinal);
                            console.log(Date.now(), result[y].transcript, result.isFinal, result[y].confidence);

                            botDb.insert({
                                time: Date.now(),
                                transcript: result[y].transcript,
                                confidence: result[y].confidence,
                                final: result.isFinal ? 1 : 0,
                                language: bot.language
                            });

                            if (result.isFinal) {
                                this.__onFinal(result[y].transcript);
                                this.final(result[y].transcript);
                            }
                        }
                    }
                }
            }
        }
    }, {
        key: 'onfinal',
        value: function onfinal(callback) {
            this.__onFinal = callback;
        }
    }, {
        key: 'oneachevent',
        value: function oneachevent(callback) {
            this.__onEachEvent = callback;
        }
    }, {
        key: 'oneachresult',
        value: function oneachresult(callback) {
            this.__onEachResult = callback;
        }
    }, {
        key: 'end',
        value: function end() {
            var self = this;
            // console.log('Terminou o recognition, locked:%s', this.locked);

            if (this.locked) {
                // console.log(['LLLLLLLLLLLLLOOOOOOOOOCKED', arguments]);
                return this.stop();
            } else {
                setTimeout(function () {
                    self.start();
                }, this.retryTimeout);
            }
        }
    }, {
        key: 'lock',
        value: function lock() {
            this.locked = true;
            return this;
        }
    }, {
        key: 'unlock',
        value: function unlock() {
            this.locked = false;
            return this;
        }
    }]);

    return BotWindowSpeechRecognitionComponent;
}(BotComponent);
'use strict';
/**
 *
 * @see http://stackoverflow.com/questions/21947730/chrome-speech-synthesis-with-longer-texts
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotWindowSpeechSynthesisComponent = function (_BotComponent) {
    _inherits(BotWindowSpeechSynthesisComponent, _BotComponent);

    function BotWindowSpeechSynthesisComponent(bot) {
        _classCallCheck(this, BotWindowSpeechSynthesisComponent);

        var _this = _possibleConstructorReturn(this, (BotWindowSpeechSynthesisComponent.__proto__ || Object.getPrototypeOf(BotWindowSpeechSynthesisComponent)).call(this));

        var self = _this;

        /**
         * Access to bot
         * @type {Bot}
         */
        _this.bot = bot;

        /**
         * Utterances "backup", this is a trick to call the 'end' function
         * @type {Array}
         * @see http://stackoverflow.com/a/35935851/727221
         */
        _this.utterances = [];

        /**
         * language
         * @type {String}
         * @todo dynamize this
         */
        _this.language = 'pt-BR';

        /**
         * Asking retries (can be used with simple speak?)
         * @type {Number}
         */
        _this.retries = 0;

        /**
         * Include 'speak' functionallity to bot
         * @method speak
         * @param  {String} text What should be said.
         * @return {Promise}      A promise to wait.
         */
        _this.bot.speak = function () {
            return self.speak.apply(self, arguments);
        };

        _this.bot.ask = function () {
            return self.ask.apply(self, arguments);
        };

        _this.start = function (event) {

            if (event.utterance.text) {
                this.__onSpeak(event.utterance.text);
            }

            bot.components.speechRecognition.lock();
            bot.components.speechRecognition.stop();
        };

        _this.getLanguage = function () {
            return bot.language;
        };

        _this.getVolume = function () {
            return bot.param('volume') || 1;
        };
        _this.getRate = function () {
            return bot.param('rate') || 1;
        };
        _this.getPitch = function () {
            return bot.param('pitch') || 1;
        };

        _this.getVoice = function () {
            return bot.param('voice') || speechSynthesis.getVoices().filter(function (a) {
                return a.localService;
            })[0];
        };
        _this.__onSpeak = function () {};
        return _this;
    }

    _createClass(BotWindowSpeechSynthesisComponent, [{
        key: 'getNewUtterance',
        value: function getNewUtterance(text) {
            var self = this;
            var utterance = new SpeechSynthesisUtterance(text);
            // utterance.voice = this.getVoice();
            utterance.lang = this.getLanguage();
            utterance.volume = this.getVolume();
            utterance.rate = this.getRate();
            utterance.pitch = this.getPitch();

            var keys = Object.keys(Object.getPrototypeOf(utterance));

            for (var m in keys) {
                if (keys[m].indexOf('on') === 0) {
                    // console.log(['will trigger', keys[m]]);
                    utterance[keys[m]] = function (event) {
                        self.handle(event);
                    };
                }
            }
            this.utterances.push(utterance);
            return utterance;
        }
    }, {
        key: 'end',
        value: function end() {
            if (speechSynthesis.paused === false && speechSynthesis.pending === false && speechSynthesis.speaking === false && typeof this.resolve === 'function') {
                this.resolve();
                this.resolve = null;
            }

            // console.log(['speechSynthesis.end']);
            bot.components.speechRecognition.unlock();
            bot.components.speechRecognition.start();
        }

        /**
         * Speak bot, i want to hear your voice.
         * @return {Promise} Oh yes, more Promisessss
         * @see http://stackoverflow.com/questions/21947730/chrome-speech-synthesis-with-longer-texts
         */

    }, {
        key: 'speak',
        value: function speak(text) {
            var self = this;

            return new Promise(function (resolve, reject) {
                self.resolve = resolve;
                self.reject = reject;
                if (text !== "") {

                    var phrases_regexp = new RegExp('([\\u0022\\u2018\\u2019\\u201D\\u201C\\u2014\\u2015\\-\\,\\:(\\)*\\s\xE0\xE8\xEC\xF2\xF9\xC0\xC8\xCC\xD2\xD9\xE1\xE9\xED\xF3\xFA\xFD\xC1\xC9\xCD\xD3\xDA\xDD\xE2\xEA\xEE\xF4\xFB\xC2\xCA\xCE\xD4\xDB\xE3\xF1\xF5\xC3\xD1\xD5\xE4\xEB\xEF\xF6\xFC\xFF\xC4\xCB\xCF\xD6\xDC\u0178\xE7\xC7a-z0-9]*(\\.{1,3}(\\u201D)?|\\?|\\!\\;|\\,|\\n|\\:))', "gi");

                    var chunkLength = 140;
                    var match = null;

                    if (text.length < 140) {
                        return speechSynthesis.speak(self.getNewUtterance(text));
                    }

                    // console.log(['bot.speak.match', phrases_regexp.exec(text)]);
                    // rule new - text as phrases
                    while ((match = phrases_regexp.exec(text)) != null) {
                        //bot.speak(match[0]);
                        //speechSynthesis.speak(self.getNewUtterance(match[0]));


                        // agora os chunks, ja que deu erro.
                        var phrase = match[0];
                        var chunks_pattern = new RegExp('^[\\s\\S]{' + Math.floor(chunkLength / 2) + ',' + chunkLength + '}[.!?,]{1}|^[\\s\\S]{1,' + chunkLength + '}$|^[\\s\\S]{1,' + chunkLength + '} ');
                        var chunks = [];

                        while (phrase.length > 0) {
                            chunks.push(phrase.match(chunks_pattern)[0]);
                            phrase = phrase.substring(chunks[chunks.length - 1].length);
                        }

                        //console.log(chunks);

                        for (var t in chunks) {
                            speechSynthesis.speak(self.getNewUtterance(chunks[t]));
                            // try {
                            //   speechSynthesis.speak(self.getNewUtterance(chunks[t]));
                            // } catch(e){
                            //   console.log(['eeee', e]);
                            // }
                        }
                    }

                    // // rule 1 - text as chunks
                }
            });
            return;
        }
    }, {
        key: 'ask',
        value: function ask(text, onanswer, onreject) {

            var self = this;

            var onanswer = onanswer || function () {
                return true;
            };
            var onreject = onreject || function () {
                return true;
            };

            return new Promise(function (resolve, reject) {
                self.bot.inputResolve = function (input) {
                    var answerResult = onanswer.apply(self, [input]);

                    if (answerResult === true) {
                        self.retries = 0;
                        resolve(input);
                    } else {
                        onreject(reject, input, self.retries++);
                    }
                };
                self.bot.inputReject = reject;
                speechSynthesis.speak(self.getNewUtterance(text));
            }).catch(function () {
                return self.ask(text, onanswer, onreject);
                console.log(['catch inside ask function', arguments, this]);
            });
        }
    }, {
        key: 'handle',
        value: function handle(event) {

            if (typeof this[event.type] === 'function') {
                this[event.type](event);
            }

            // console.log(event);
        }
    }, {
        key: 'onspeak',
        value: function onspeak(callback) {

            this.__onSpeak = callback;
        }
    }]);

    return BotWindowSpeechSynthesisComponent;
}(BotComponent);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BotIndexedDb = function () {
    function BotIndexedDb() {
        _classCallCheck(this, BotIndexedDb);

        //super();
        var self = this;

        // In the following line, you should include the prefixes of implementations you want to test.
        this.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;

        // DON'T use "var indexedDB = ..." if you're not in a function.
        // Moreover, you may need references to some window.IDB* objects:
        this.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;
        this.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;
        // (Mozilla has never prefixed these objects, so we don't need window.mozIDB*)
        this.request = this.indexedDB.open("bot", 38);

        this.request.onsuccess = function (event) {
            window.db = self.request.result;
            console.log("success: " + db);
        };

        this.request.onerror = function (event) {
            // Tratar erros.
            console.log(['se liga ai', event]);
        };
        this.request.onupgradeneeded = function (event) {
            var db = event.target.result;

            if (!db.objectStoreNames.contains('transcripts')) {
                var transcriptStore = db.createObjectStore("transcripts", {
                    keyPath: "id",
                    autoIncrement: true
                });
            } else {
                // console.log(db);
                var transcriptStore = event.target.transaction.objectStore('transcripts');
            }

            if (!transcriptStore.indexNames.contains('confidence')) {
                transcriptStore.createIndex('confidence', 'confidence', {
                    unique: false
                });
            }

            if (!transcriptStore.indexNames.contains('final')) {
                transcriptStore.createIndex('final', 'final', {
                    unique: false
                });
            }

            if (!transcriptStore.indexNames.contains('time')) {
                transcriptStore.createIndex('time', 'time', {
                    unique: false
                });
            }

            if (!transcriptStore.indexNames.contains('transcript')) {
                transcriptStore.createIndex('transcript', 'transcript', {
                    unique: false
                });
            }

            if (!db.objectStoreNames.contains('words')) {
                var wordStore = db.createObjectStore("words", {
                    keyPath: "id",
                    autoIncrement: true
                });
            } else {
                // console.log(db);
                var wordStore = event.target.transaction.objectStore('words');
            }

            // const indexes = {
            //   'created':{},
            //   'updated':{}
            // }

            if (!wordStore.indexNames.contains('created')) {
                wordStore.createIndex('created', 'created', { unique: false });
            }

            if (!wordStore.indexNames.contains('updated')) {
                wordStore.createIndex('updated', 'updated', { unique: false });
            }

            if (!wordStore.indexNames.contains('language_updated')) {
                wordStore.createIndex('language_updated', ['language', 'updated'], { unique: true });
            }

            // if (!wordStore.indexNames.contains('acronym')) {
            //     wordStore.createIndex('acronym', 'acronym', {unique: false});
            // }

            if (!wordStore.indexNames.contains('word')) {
                wordStore.createIndex('word', 'word', { unique: false });
            }

            if (!wordStore.indexNames.contains('source')) {
                wordStore.createIndex('source', 'source', { unique: false });
            }

            if (!wordStore.indexNames.contains('word_language')) {
                wordStore.createIndex('word_language', ['word', 'language'], { unique: true });
            }

            if (!wordStore.indexNames.contains('sentiment')) {
                wordStore.createIndex('sentiment', 'sentiment', { unique: false });
            }
            if (!wordStore.indexNames.contains('language')) {
                wordStore.createIndex('language', 'language', { unique: false });
            }
            if (!wordStore.indexNames.contains('language_acronym')) {
                wordStore.createIndex('language_acronym', 'language_acronym', { unique: false });
            }
            if (!wordStore.indexNames.contains('frequency')) {
                wordStore.createIndex('frequency', 'frequency', { unique: false });
            }

            if (!wordStore.indexNames.contains('frequency_language')) {
                wordStore.createIndex('frequency_language', ['frequency', 'language'], { unique: false });
            }

            if (!wordStore.indexNames.contains('language_frequency')) {
                wordStore.createIndex('language_frequency', ['language', 'frequency'], { unique: false });
            }

            if (!wordStore.indexNames.contains('language_source')) {
                wordStore.createIndex('language_source', ['language', 'source'], { unique: false });
            }

            if (!wordStore.indexNames.contains('verb')) {
                wordStore.createIndex('verb', 'verb', { unique: false });
            }

            if (!wordStore.indexNames.contains('verb_language')) {
                wordStore.createIndex('verb_language', ['verb', 'language'], { unique: false });
            }

            if (!wordStore.indexNames.contains('language_verb')) {
                wordStore.createIndex('language_verb', ['language', 'verb'], { unique: false });
            }

            if (!wordStore.indexNames.contains('adj')) {
                wordStore.createIndex('adj', 'adj', { unique: false });
            }

            if (!wordStore.indexNames.contains('adj_language')) {
                wordStore.createIndex('adj_language', ['adj', 'language'], { unique: false });
            }

            if (!wordStore.indexNames.contains('pron')) {
                wordStore.createIndex('pron', 'pron', { unique: false });
            }

            if (!wordStore.indexNames.contains('pron_language')) {
                wordStore.createIndex('pron_language', ['pron', 'language'], { unique: false });
            }

            if (!wordStore.indexNames.contains('language_interj')) {
                wordStore.createIndex('language_interj', ['language', 'pron'], { unique: false });
            }
            if (!wordStore.indexNames.contains('language_interj')) {
                wordStore.createIndex('language_interj', ['language', 'interj'], { unique: false });
            }
            if (!wordStore.indexNames.contains('language_adj')) {
                wordStore.createIndex('language_adj', ['language', 'adj'], { unique: false });
            }
            //

            if (!db.objectStoreNames.contains('ngrams')) {
                var ngramsStore = db.createObjectStore("ngrams", {
                    keyPath: "id",
                    autoIncrement: true
                });
            } else {
                var ngramsStore = event.target.transaction.objectStore('ngrams');
            }

            if (!ngramsStore.indexNames.contains('language')) {
                ngramsStore.createIndex('language', 'language', { unique: false });
            }

            if (!ngramsStore.indexNames.contains('n')) {
                ngramsStore.createIndex('n', 'n', { unique: false });
            }

            if (!ngramsStore.indexNames.contains('ngram')) {
                ngramsStore.createIndex('ngram', 'ngram', { unique: false });
            }

            if (!wordStore.indexNames.contains('frequency')) {
                wordStore.createIndex('frequency', 'frequency', { unique: false });
            }

            if (!ngramsStore.indexNames.contains('frequency')) {
                ngramsStore.createIndex('frequency', 'frequency', { unique: false });
            }

            if (!ngramsStore.indexNames.contains('language_ngram')) {
                ngramsStore.createIndex('language_ngram', ['language', 'ngram'], {
                    unique: false
                });
            }

            if (!ngramsStore.indexNames.contains('language_n')) {
                ngramsStore.createIndex('language_n', ['language', 'n'], { unique: false });
            }

            if (!ngramsStore.indexNames.contains('language_n_ngram')) {
                ngramsStore.createIndex('language_n_ngram', ['language', 'n', 'ngram'], { unique: false });
            }

            if (!ngramsStore.indexNames.contains('language_n_ngram')) {
                ngramsStore.createIndex('language_n_ngram', ['language', 'n', 'ngram'], { unique: false });
            }

            if (!ngramsStore.indexNames.contains('language_n_ngram_frequency')) {
                ngramsStore.createIndex('language_n_ngram_frequency', ['language', 'n', 'ngram', 'frequency'], { unique: false });
            }

            if (!ngramsStore.indexNames.contains('language_n_frequency_ngram')) {
                ngramsStore.createIndex('language_n_frequency_ngram', ['language', 'n', 'frequency', 'ngram'], { unique: false });
            }

            if (!ngramsStore.indexNames.contains('frequency_ngram')) {
                ngramsStore.createIndex('frequency_ngram', ['frequency', 'ngram'], { unique: false });
            }

            if (!ngramsStore.indexNames.contains('ngram_frequency')) {
                ngramsStore.createIndex('ngram_frequency', ['ngram', 'frequency'], { unique: false });
            }
            if (!ngramsStore.indexNames.contains('frequency_n_ngram')) {
                ngramsStore.createIndex('frequency_n_ngram', ['frequency', 'n', 'ngram'], { unique: false });
            }

            if (!ngramsStore.indexNames.contains('n_frequency_ngram')) {
                ngramsStore.createIndex('n_frequency_ngram', ['n', 'frequency', 'ngram'], { unique: false });
            }

            if (!ngramsStore.indexNames.contains('n_ngram')) {
                ngramsStore.createIndex('n_ngram', ['n', 'ngram'], { unique: false });
            }

            if (!ngramsStore.indexNames.contains('ngram_n')) {
                ngramsStore.createIndex('ngram_n', ['ngram', 'n'], { unique: false });
            }

            if (!ngramsStore.indexNames.contains('language_frequency')) {
                ngramsStore.createIndex('language_frequency', ['language', 'frequency'], {
                    unique: false
                });
            }

            if (!ngramsStore.indexNames.contains('language_ngram_frequency')) {
                ngramsStore.createIndex('language_ngram_frequency', ['language', 'ngram', 'frequency'], {
                    unique: false
                    // multiEntry:true
                });
            }

            // if (!db.objectStoreNames.contains('languages')) {
            //     var languagesStore = db.createObjectStore("languages", {
            //         keyPath: "id",
            //         autoIncrement: true
            //     });
            // } else {
            //     var languagesStore = event.target.transaction.objectStore('languages');
            // }
            //
            // if (!languagesStore.indexNames.contains('language_ngram_frequency')) {
            //       languagesStore.createIndex('language_ngram_frequency',
            //       ['language','ngram','frequency'], {
            //         unique: false,
            //         // multiEntry:true
            //       });
            // }

            // if (!languagesStore.indexNames.contains('acronym')) {
            //       languagesStore.createIndex('language_frequency', ['language','frequency'], {
            //         unique: false
            //       });
            // }
        };
        return this;
    }

    _createClass(BotIndexedDb, [{
        key: "insert",
        value: function insert(data) {

            var request = db.transaction(["transcripts"], "readwrite").objectStore("transcripts").add(data);

            request.onsuccess = function (event) {};

            request.onerror = function (event) {};
        }
    }, {
        key: "select",
        value: function select() {}
    }, {
        key: "open",
        value: function open(collection) {
            return new Promise(function (resume, reject) {
                var transaction = db.transaction(collection, 'readwrite');
                resume(transaction.objectStore(collection));
            });
        }

        /**
         * Example 1 - set('words.word.hello', {sentiment:1});
         * Example 2 - set('words.word.hello.sentiment', 1);
         * Example 3 - set('words.language', 'pt').get('words.word.ola')
         * Example 3 - set('words.language', 'en').get('words.word.hello')
         * @method set
         * @param  {String} path  store.index.value.param1.param2...
         * @param  {[type]} value [description]
         */

    }, {
        key: "set",
        value: function set(path, value, filter) {

            var split = path.split('.');
            var path = path.split(".").slice(0, 3).join(".");
            var self = this;
            return self.get(path, filter).then(function (data) {

                if (data.result == null) {
                    // create
                    // console.log('insert');

                    var row = {};

                    if (typeof value == "undefined") {
                        row[split[1]] = split[2];
                    } else if ((typeof value === "undefined" ? "undefined" : _typeof(value)) != "object") {
                        row[split[1]] = value;
                    } else if ((typeof value === "undefined" ? "undefined" : _typeof(value)) == "object") {
                        // row[split[1]] = split[2];
                        for (var x in value) {
                            row[x] = value[x]; /////   =)
                        }
                    }

                    row.created = new Date();
                    row.updated = new Date();
                    /**
                     * @todo return promise
                     */
                    var request = self.get(split[0]).add(row);
                    return new Promise(function (resolve, reject) {
                        request.onsuccess = function () {
                            resolve(request);
                        };

                        request.onerror = function () {
                            reject(request);
                        };
                    });
                } else {
                    // update
                    // console.log('update');
                    var row = data.result.value;

                    var frequency = row.frequency || 0;

                    /**
                     * @todo split.length >= 4
                     */
                    if (split.length == 4 && (typeof value === "undefined" ? "undefined" : _typeof(value)) != "object") {
                        row[split[3]] = value;
                    } else if (split.length >= 2 && (typeof value === "undefined" ? "undefined" : _typeof(value)) == "object") {
                        // row[split[1]] = split[2];
                        for (var _x in value) {
                            row[_x] = value[_x]; /////   =)
                        }
                    }

                    // var row = data.value;
                    row.frequency = (row.frequency || 0) + frequency;
                    row.updated = new Date();

                    /**
                     * @todo return promise
                     */
                    var request = data.result.update(row);
                    return new Promise(function (resolve, reject) {
                        request.onsuccess = function () {
                            resolve(request);
                        };

                        request.onerror = function () {
                            reject(request);
                        };
                    });
                }
            });
        }
    }, {
        key: "count",
        value: function count(path, value) {

            var self = this;
            var value = typeof value != "undefined" ? value : null;

            return new Promise(function (resolve, reject) {
                var request = self.get(path).count(value);
                request.onsuccess = function (event) {
                    resolve(event.target);
                };
            });
        }
    }, {
        key: "min",
        value: function min(path, max) {

            if (max instanceof IDBKeyRange) {
                var keyRange = max;
            } else {
                var keyRange = max ? IDBKeyRange.lowerBound(max) : null;
            }
            return new Promise(function (resolve, reject) {
                botDb.get(path).openCursor(keyRange, 'next').onsuccess = function (event) {
                    resolve(event.target);
                };
            });
        }
    }, {
        key: "max",
        value: function max(path, _max) {

            if (_max instanceof IDBKeyRange) {
                var keyRange = _max;
            } else {
                var keyRange = _max ? IDBKeyRange.upperBound(_max) : null;
            }
            return new Promise(function (resolve, reject) {
                botDb.get(path).openCursor(keyRange, 'prev').onsuccess = function (event) {
                    resolve(event.target);
                };
            });
        }
    }, {
        key: "get",
        value: function get(path, value) {
            // words.word.hello

            var path = path.split('.');
            var value = value || null;

            var transaction = db.transaction(path[0], 'readwrite');
            var store = transaction.objectStore(path[0]);

            // get words;
            if (path.length == 1) {
                if (value) {
                    return new Promise(function (resolve, reject) {
                        var request = store.openCursor(value);
                        request.onsuccess = function (event) {
                            resolve(event.target);
                        };
                    });
                }
                return store;
            }

            var index = store.index(path[1]);
            // get words.index?! i dont know...
            if (path.length == 2 && value) {
                // return index;
                path[2] = value;
            } else if (path.length == 2) {
                if (!value) {}
                return index;
            }

            if (path.length >= 3) {
                return new Promise(function (resolve, reject) {
                    if (path[2] instanceof IDBKeyRange) {
                        var keyRange = path[2];
                    } else {
                        var keyRange = IDBKeyRange.only(path[2]);
                    }
                    var request = index.openCursor(keyRange);
                    request.onsuccess = function (event) {
                        resolve(event.target);
                    };
                }).then(function (data) {
                    if (data.result !== null && path.length == 4) {
                        return data.result.value[path[3]];
                    }
                    return data;
                });
            }
        }
    }, {
        key: "delete",
        value: function _delete(path) {
            return this.get(path).then(function (request) {
                console.log(request);
                return request.result.delete();
            });
        }
    }, {
        key: "random",
        value: function random(path, value) {
            var self = this;
            var keyRange = null;
            if (value instanceof Array) {
                keyRange = value;
                // value = null;
            } else if (value instanceof IDBKeyRange) {
                keyRange = value;
            } else if (typeof value != "undefined") {
                keyRange = IDBKeyRange.only(value);
            }

            return self.count(path, value).then(function (request) {
                return new Promise(function (resolve, reject) {
                    var total = request.result;
                    var random = Math.floor(Math.random() * (total - 0 + 1)) + 0;
                    var random_fetched = false;
                    // console.log([total, random, keyRange]);
                    request.source.openCursor(keyRange).onsuccess = function (e) {
                        var cursor = e.target.result;
                        if (random_fetched == false) {
                            if (random > 0) {
                                random_fetched = true;
                                if (random == total) {
                                    resolve(cursor);
                                    // cursor.advance(random-1);
                                } else {
                                    cursor.advance(random);
                                }
                            } else {
                                resolve(cursor);
                            }
                        } else {
                            resolve(cursor);
                        }
                    };
                });
            });
        }
    }, {
        key: "usage",
        value: function usage() {
            return new Promise(function (resolve, reject) {
                navigator.webkitTemporaryStorage.queryUsageAndQuota(function (used, remaining) {
                    resolve({
                        used: used,
                        remaining: remaining
                    });
                }, function (e) {
                    reject(e);
                });
            });
        }
    }]);

    return BotIndexedDb;
}();

var botDb = new BotIndexedDb();


'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotArquivosController = function (_BotController) {
    _inherits(BotArquivosController, _BotController);

    function BotArquivosController() {
        _classCallCheck(this, BotArquivosController);

        return _possibleConstructorReturn(this, (BotArquivosController.__proto__ || Object.getPrototypeOf(BotArquivosController)).apply(this, arguments));
    }

    _createClass(BotArquivosController, [{
        key: "^criar arquivo$",
        value: function criarArquivo$() {
            var saveData = function () {
                var a = document.createElement("a");
                document.body.appendChild(a);
                a.style = "display: none";
                return function (data, fileName) {
                    var json = JSON.stringify(data),
                        blob = new Blob([json], { type: "octet/stream" }),
                        url = window.URL.createObjectURL(blob);
                    a.href = url;
                    a.download = fileName;
                    a.click();
                    window.URL.revokeObjectURL(url);
                };
            }();

            var data = { x: 42, s: "hello, world", d: new Date() },
                fileName = "my-download.json";

            saveData('hello world', 'hello.txt');
        }
    }]);

    return BotArquivosController;
}(BotController);


'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotBehaviorismController = function (_BotController) {
  _inherits(BotBehaviorismController, _BotController);

  function BotBehaviorismController() {
    _classCallCheck(this, BotBehaviorismController);

    return _possibleConstructorReturn(this, (BotBehaviorismController.__proto__ || Object.getPrototypeOf(BotBehaviorismController)).apply(this, arguments));
  }

  _createClass(BotBehaviorismController, [{
    key: "^máquina$",
    value: function mQuina$() {
      bot.param('name', 'Maquina');
      bot.param('avatar', 'img/the_machine.jpg');

      bot.param('volume', 1);
      bot.param('rate', 1.1);
      bot.param('pitch', 0.1);

      //bot.nofity('Maquina online.');
      bot.speak('Maquina online');
    }
  }, {
    key: "^(suri|Surya)$",
    value: function suriSurya$() {
      bot.param('name', 'Suri');
      bot.param('avatar', 'img/suri.jpg');

      bot.param('volume', 1);
      bot.param('rate', 1.1);
      bot.param('pitch', 1.777);

      bot.speak('Suri online');
    }
  }, {
    key: "^assimilar$",
    value: function assimilar$() {
      bot.param('name', 'Assimilator');
      bot.param('avatar', 'img/assimilator.png');
      bot.param('pitch', 0.3);
      bot.speak('Assimilando');
    }
  }, {
    key: "^abel$",
    value: function abel$() {
      bot.param('name', 'Abel v 0.1');
      bot.param('avatar', 'img/peter.jpg');
      bot.param('pitch', 0.2);
      bot.param('rate', 1.1);
      bot.param('volume', 5);
      bot.speak('Olá humano, seja bem vindo');
    }
  }, {
    key: "^(alan|alan turing)$",
    value: function alanAlanTuring$() {
      bot.param('name', 'Alan Turing');
      bot.param('avatar', 'img/alan.jpg');
      bot.param('pitch', 0.01);
      bot.param('rate', 1);
      bot.param('volume', 5);
      bot.speak('Olá humano, seja bem vindo');
    }
  }, {
    key: "^( diana)$",
    value: function diana$() {
      bot.param('name', 'Alan Turing');
      bot.param('avatar', 'img/alan.jpg');
      bot.param('pitch', 0.01);
      bot.param('rate', 1);
      bot.param('volume', 5);
      bot.speak('Olá humano, seja bem vindo');
    }
  }, {
    key: "^show$",
    value: function show$() {}
  }, {
    key: "^(oi mãe)$",
    value: function oiME$() {
      bot.notify('... a mãe dele está presente');
    }
  }]);

  return BotBehaviorismController;
}(BotController);
'use strict';
/**
 * Basic calculator
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotCalculatorController = function (_BotController) {
    _inherits(BotCalculatorController, _BotController);

    function BotCalculatorController() {
        _classCallCheck(this, BotCalculatorController);

        return _possibleConstructorReturn(this, (BotCalculatorController.__proto__ || Object.getPrototypeOf(BotCalculatorController)).apply(this, arguments));
    }

    _createClass(BotCalculatorController, [{
        key: "^(\\d([^x]x))((a raiz quadrada de (.*))|((.*) (menos|\\-|mais|\\+|vezes|dividido por|elevado a|a raiz quadrada de) (.*)))+?(igual a ([^\\s]+))?$",


        // 5 x ao quadrado mais dois x igual a zero
        //"^(\d[^x]x)((a raiz quadrada de (.*))|((.*) (menos|\-|mais|\+|vezes|dividido por|elevado a|a raiz quadrada de) (.*)))+?(igual a ([^\s]+))?"
        value: function dXXARaizQuadradaDeMenosMaisVezesDivididoPorElevadoAARaizQuadradaDeIgualAS$(a, b, c) {

            //master = master.replace(/ao quadrado/g, '^2');

            var master = a + c;
            master = master.replace(/ao quadrado/g, '^2');
            var numeros = ['zero', 'um', 'dois', 'tres', 'quatro', 'cinco', 'seis', 'sete', 'oito', 'nove'];

            numeros.forEach(function (value, key) {
                master = master.replace(new RegExp(value, 'g'), key);
            });
            master = master.replace(/menos/g, '-').replace(/mais/g, '+').replace(/vezes/g, '*').replace(/dividido por/g, '/').replace(/igual a (.*)/g, ' = $1').replace(/é/g, '');
            //.replace(/\w+/g, '')

            console.log(master);
            var eq = algebra.parse(master);

            console.log(eq.toString());

            var ans = eq.solveFor("x");
            var x = ans.toString();
            bot.speak('Valor de x \xE9 igual a ' + x);
        }
    }, {
        key: "^quanto é ((a raiz quadrada de (.*))|((.*) (menos|\\-|mais|\\+|vezes|dividido por|elevado a|a raiz quadrada de) (.*)))+?$",
        value: function quantoARaizQuadradaDeMenosMaisVezesDivididoPorElevadoAARaizQuadradaDe$(master) {
            var numeros = ['zero', 'um', 'dois', 'tres', 'quatro', 'cinco', 'seis', 'sete', 'oito', 'nove'];

            numeros.forEach(function (value, key) {
                master = master.replace(new RegExp(value, 'g'), key);
            });

            master = master.replace(/menos/g, '-').replace(/mais/g, '+').replace(/vezes/g, '*').replace(/dividido por/g, '/')

            // Modo hard
            .replace(/(\d+) elevado ao quadrado/g, 'Math.pow($1, 2)').replace(/(\d+) elevado ao cubo/g, 'Math.pow($1, 3)').replace(/(\d+) elevado ao cubo/g, 'Math.pow($1, 3)').replace(/a? raiz quadrada de (\d+)/g, 'Math.sqrt($1)');

            console.log(master);
            // console.log(eval(master));

            try {
                var result = eval(master);
                bot.speak(result.toString());
                return result;
            } catch (e) {
                bot.speak('Erro');
            }
        }
    }, {
        key: "^quanto é (.*) minutos em horas$",
        value: function quantoMinutosEmHoras$(numero) {
            var horas = Math.floor(parseInt(numero) / 60);
            var minutos = parseInt(numero) % 60;
            bot.speak(horas + ' horas e ' + minutos + ' minutos');
        }
    }, {
        key: "^tabuada do (.*)$",
        value: function tabuadaDo$(numero) {
            var p = bot.speak('Tabuada do ' + numero + '.');
            var erros = 0,
                acertos = 0;

            var _loop = function _loop(x) {
                p = p.then(function (resolve, reject) {

                    return bot.ask(numero + ' vezes ' + x).then(function (resposta) {
                        if (parseInt(resposta.trim()) != numero * x) {
                            erros++;
                            throw resposta;
                        } else {
                            acertos++;
                            return resposta;
                        }
                    }).catch(function (resposta) {
                        //bot.speak('Errado');
                    });
                });
            };

            for (var x = 1; x <= 2; x++) {
                _loop(x);
            }

            p.then(function () {
                return bot.speak('Acertos: ' + acertos + ', erros:' + erros);
            });
        }

        /**
         * Referencias: http://www.somatematica.com.br/soexercicios/equacoes.php
         */

    }, {
        key: "^(dois|três|quatro|cinco|seis|\\d+) números(\\sinteiros|\\sconsecutivos)?(\\sconsecutivos|\\sinteiros)? (com|cuja) soma(\\sé)? igual a (\\d+)$",
        value: function doisTrSQuatroCincoSeisDNMerosSinteirosSconsecutivosSconsecutivosSinteirosComCujaSomaSIgualAD$() {
            var numeros = ['zero', 'um', 'dois', 'tres|três', 'quatro', 'cinco', 'seis', 'sete', 'oito', 'nove'];

            var master = arguments[0];
            numeros.forEach(function (value, key) {
                master = master.replace(new RegExp(value, 'g'), key);
            });
            var vezes = master;
            var soma = arguments[arguments.length - 1];

            var calculo = '(x)';
            for (var x = 1; x < vezes; x++) {
                calculo += ' + (x +' + x + ')';
            }
            calculo += ' = ' + soma;

            var eq = algebra.parse(calculo);

            console.log(eq.toString());

            var ans = eq.solveFor("x");
            var x = ans.toString();

            // var sequencia = '';
            // for(var y = 1; y<vezes;x++){
            //   sequencia+= ' + ' + (x+y);
            // }
            //
            // console.log(soma);
            bot.speak('C\xE1lculo: ' + calculo + ', Resolu\xE7\xE3o:' + soma).then(function () {
                return bot.speak('Valor de x \xE9 igual a ' + x);
            });
        }
    }]);

    return BotCalculatorController;
}(BotController);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotChineseCommander = function (_BotController) {
  _inherits(BotChineseCommander, _BotController);

  function BotChineseCommander() {
    _classCallCheck(this, BotChineseCommander);

    return _possibleConstructorReturn(this, (BotChineseCommander.__proto__ || Object.getPrototypeOf(BotChineseCommander)).apply(this, arguments));
  }

  _createClass(BotChineseCommander, [{
    key: "^(一|1) ?(2|二)? ?(3|三)? ?(4|四)? ?(5|五)? ?(6|六)? ?(7|七)? ?(8|八)? ?(9|九)? ?(10|十)?$",


    /**
     * One, um
      */
    value: function $(one, two, three, four, five, six, seven, eight, nine, ten) {
      //Yī'èrsānsìwǔliùqībājiǔshí
      //1 2 3 4 5 6 7 8 9 10
      if (one) {
        bot.speak(one);
      }
      if (two) {
        bot.speak(two);
      }
      if (three) {
        bot.speak(three);
      }
      if (four) {
        bot.speak(four);
      }
      if (five) {
        bot.speak(five);
      }
      if (six) {
        bot.speak(six);
      }
      if (seven) {
        bot.speak(seven);
      }
      if (eight) {
        bot.speak(eight);
      }
      if (nine) {
        bot.speak(nine);
      }
      if (ten) {
        bot.speak(ten);
      }
    }
  }, {
    key: "^二加二$",
    value: function $() {
      bot.speak("二加二等于四");
    }
  }, {
    key: "^我需要帮助$",
    value: function $() {
      bot.notify('User need help');
    }
  }]);

  return BotChineseCommander;
}(BotController);

//i need help
//我需要幫助
//我需要帮助
//Wǒ xūyào bāngzhù
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CoderModeControlle = function (_BotController) {
    _inherits(CoderModeControlle, _BotController);

    function CoderModeControlle() {
        _classCallCheck(this, CoderModeControlle);

        return _possibleConstructorReturn(this, (CoderModeControlle.__proto__ || Object.getPrototypeOf(CoderModeControlle)).apply(this, arguments));
    }

    _createClass(CoderModeControlle, [{
        key: "^modo programador$",
        value: function modoProgramador$() {
            this.speak('Modo programador ativado');
        }
    }, {
        key: "^classificar (.*)$",
        value: function classificar$(classificavel) {
            this.speak('Estou classificando ' + classificavel);
        }
    }, {
        key: "^função (.*)(\\sargumento(?=s))?(?=.*)$",
        value: function funOSargumentoS$(nome, temargumento, argumentos) {
            console.log(arguments);
            var functionName = _.lowerFirst(_.camelCase(nome));
            var functionContent = 'function ' + functionName + '(' + argumentos + '){\n\n    }';
            myCodeMirror.setValue(functionContent);
        }
    }, {
        key: "^classe (.*)",
        value: function classe(nome) {

            // 1 - o nome da classe em camel case com a primeira letra em maiusculo
            var className = _.upperFirst(_.camelCase(nome));
            var classContent = 'class ' + className + ' {\n\n    constructor (prm) {\n        try {\n            this.member = null;    // not private\n            this.method();         // call method\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    }\n    // not private\n    method (prm) {\n        try {\n            // this.member = \'test\';    // member access\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    }\n}';
            myCodeMirror.setValue(classContent);
        }
    }]);

    return CoderModeControlle;
}(BotController);
'use strict';
/**
 * This is not a joke, this is and "telephone robot" simulator, under construction.
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotCustomerServiceSimulatorController = function (_BotController) {
    _inherits(BotCustomerServiceSimulatorController, _BotController);

    function BotCustomerServiceSimulatorController() {
        _classCallCheck(this, BotCustomerServiceSimulatorController);

        return _possibleConstructorReturn(this, (BotCustomerServiceSimulatorController.__proto__ || Object.getPrototypeOf(BotCustomerServiceSimulatorController)).apply(this, arguments));
    }

    _createClass(BotCustomerServiceSimulatorController, [{
        key: "^simular atendimento$",
        value: function simularAtendimento$(a, b, c, d) {
            var protocolo = new Date().getTime().toString().substring(0, 10).split('').join('-');
            speak('Ol\xE1 seja bem vindo ao atendimento ao cliente').then(function () {
                return speak('Seu protocolo de atendimento \xE9 ' + protocolo);
            }).then(function () {
                return ask('Para qual número de telefone deseja atendimento?');
            }).then(function (telefone) {
                return speak('Parece que o n\xFAmero ' + telefone + ' est\xE1 com problemas.');
            });
        }
    }]);

    return BotCustomerServiceSimulatorController;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotDebuggerController = function (_BotController) {
    _inherits(BotDebuggerController, _BotController);

    function BotDebuggerController() {
        _classCallCheck(this, BotDebuggerController);

        return _possibleConstructorReturn(this, (BotDebuggerController.__proto__ || Object.getPrototypeOf(BotDebuggerController)).apply(this, arguments));
    }

    _createClass(BotDebuggerController, [{
        key: "^traduzir (.*) em (.*)$",
        value: function traduzirEm$(palavra, idioma) {

            console.log(palavra, idioma);
            //let idioms = ['de', 'bg', 'cs', 'zh', 'da', 'sl', 'es', 'eo', 'fi', 'fr', 'ka', 'el', 'nl', 'hu', 'io', 'en', 'it', 'la', 'no', 'pl', 'ro', 'ru', 'sv', 'th', 'tet', 'tr'];
            botDb.get("words.word." + idioma).then(function (request) {
                try {
                    return request.result.value.language_acronym;
                } catch (e) {
                    console.error('acronimo não encontrado');
                    return e;
                }
            }).then(function (language_acronym) {
                bot.language = language_acronym;
                console.log('acronimo encontrado:', language_acronym);
                return botDb.get('words.word.' + palavra);
            }).then(function (data) {
                console.log(['palavra encontrada:', data.result.value]);
                return botDb.get('words.language_source', [bot.language, data.result.value.id]);
            }).then(function (data) {
                return bot.speak(data.result.value.word);
            }).then(function (data) {
                bot.language = 'pt';
            }).catch(function () {
                if (typeof bot.retry === 'undefined' || bot.retry === false) {
                    return bot.input("atualizar palavra " + palavra).then(function () {
                        bot.retry = true;
                        return bot.input(palavra + " em " + idioma);
                    });
                } else {
                    bot.language = 'pt';
                    bot.speak('Não foi possivel encontrar a tradução');
                    bot.retry = false;
                }
            });
        }
    }, {
        key: "^o que (?:voc[eê] )?est[aá] fazendo$",
        value: function oQueVocEEstAFazendo$() {
            if (bot.doing == '') bot.doing = 'nada';
            return bot.speak(bot.doing).then(function () {
                bot.doing = '';
            });
        }
    }, {
        key: "^quanto falta$",
        value: function quantoFalta$() {
            if (typeof bot.left == "function") {
                return bot.left();
            } else {
                return bot.speak('Não sei, peraí.');
            }
        }
    }, {
        key: "^(transcripts|text)(\\d+)grams( randomic )?(.*)?$",
        value: function transcriptsTextDGramsRandomic$(subject, num, randomic, text) {
            num = parseInt(num);
            var shuffled = randomic ? true : false;
            var inline = text || false;
            var p = new Promise(function (resolve, reject) {
                if (subject == 'transcripts') {
                    var transcripts = [];
                    botDb.get('transcripts.confidence').openCursor(IDBKeyRange.lowerBound(0.9)).onsuccess = function (e) {
                        var cursor = e.target.result;
                        if (cursor != null && typeof cursor.continue == 'function') {
                            if (cursor.value.final) {
                                transcripts.push(cursor.value.transcript);
                            }
                            cursor.continue();
                        } else {

                            if (shuffled === true) {
                                bot.speak('Modo shuffled');
                                transcripts = transcripts.map(function (string) {
                                    return "" + Math.random().toFixed(10) + string;
                                }).sort().map(function (string) {
                                    return string.substr(12);
                                });
                            }

                            resolve(transcripts.join(" "));
                        }
                    };
                } else {
                    if (inline) {
                        resolve(inline);
                    } else {
                        bot.ask('Qual o texto?').then(function (texto) {
                            resolve(texto);
                        });
                    }
                }
            }).then(function (gianttext) {
                console.log(gianttext);
                return bot.ngram(gianttext, num);
            }).then(function (bigrans) {
                var pi = Promise.resolve();
                var total_bigrans = Object.keys(bigrans).length;
                var current = 0;
                var dots = '';
                var interval = setInterval(function () {
                    console.clear();
                    if (dots.length > 3) dots = '';
                    dots += '.';
                    var tempo = ((total_bigrans - current) * 2.5 / 60).toFixed(1);
                    var porcentagem = 100 / total_bigrans * current;
                    var porcentagem_restante = 100 - porcentagem;
                    var bar = Array.from({
                        length: porcentagem / 10
                    }, function (i) {
                        return '▇';
                    });
                    var bar1 = "#".repeat(porcentagem / 2); //.split('').map(x => 0);
                    var bar2 = " ".repeat(porcentagem_restante / 2); //.split('').map(x => 0);

                    console.log("Loading " + dots);
                    console.log(total_bigrans + "/" + current + " ---- " + tempo + " seg(s)");
                    console.log('[' + bar1 + bar2 + '] ' + porcentagem.toFixed(2) + '%');
                }, 500);
                // console.log(bigrans);

                var _loop = function _loop(z) {

                    var data = {
                        n: num,
                        ngram: z,
                        language: 'pt',
                        frequency: bigrans[z]
                    };

                    pi = pi.then(function () {
                        return botDb.set("ngrams.language_ngram", data, ['pt', z]).then(function () {
                            current++;
                        });
                    });
                };

                for (var z in bigrans) {
                    _loop(z);
                }

                p.then(function () {
                    clearInterval(interval);
                    return bot.ask('Proximo texto').then(function (texto) {
                        return bot.input(subject + num + 'grams ' + texto);
                    });
                });
                return pi;
            });

            return p;
        }
    }, {
        key: "^moedas(\\d+)?(?:\,)?(\\d+)?$",
        value: function moedasDD$(max, multiplicador) {

            var centavos = 1;
            var p = Promise.resolve();

            multiplicador = multiplicador || 2;
            max = max || 30;

            var _loop2 = function _loop2(dia) {

                p = p.then(function () {
                    centavos = centavos * multiplicador;
                    return bot.speak(dia + "\xBA dia, R$ " + (centavos / 100).toFixed(2));
                });
            };

            for (var dia = 1; dia < max; dia++) {
                _loop2(dia);
            }

            return p.then(function () {
                centavos = centavos * multiplicador;
                return bot.speak("E no " + max + "\xBA dia, R$ " + (centavos / 100).toFixed(2));
            });
        }
    }]);

    return BotDebuggerController;
}(BotController);
'use strict';
/**
 * Definition of... wtf?
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotLanguageSettingsController = function (_BotController) {
    _inherits(BotLanguageSettingsController, _BotController);

    function BotLanguageSettingsController() {
        _classCallCheck(this, BotLanguageSettingsController);

        return _possibleConstructorReturn(this, (BotLanguageSettingsController.__proto__ || Object.getPrototypeOf(BotLanguageSettingsController)).apply(this, arguments));
    }

    _createClass(BotLanguageSettingsController, [{
        key: "^définir la langue$",
        value: function dFinirLaLangue$() {}
    }, {
        key: "^(英語|英语)$",
        value: function $() {
            this.language = 'en';
            document.getElementById("lang").value = 'en';
            speak('From chinese to english');
        }
    }, {
        key: "^你好$",
        value: function $() {
            //ni hao
            ask('你好人，你好嗎？').then(function (answer) {
                //howareyou?
                if (answer == '是') {
                    //yes / tchi
                    speak('是，什麼？'); // yeswat
                } else if (answer == '沒有') {
                    //no / meiou
                    speak('沒有什麼？'); //nowat
                } else if (answer == '我很好') {
                    //im fine / Wǒ hěn hǎo
                    speak('好一個人');
                } else {
                    speak('沒有得到它');
                }
            });
        }
    }, {
        key: "^帮助$",
        value: function $() {
            speak("\u6211\u6703\u5E6B\u4F60\n\u4F46\u9996\u5148\n\u4F60\u9700\u8981\u5B78\u7FD2\u4E2D\u6587");
        }
    }, {
        key: "^old(fale|falar|talk|speak|hablar|parle|parler)\\s+(em\\s+|in\\s+|en\\s+)?(.*)$",
        value: function oldFaleFalarTalkSpeakHablarParleParlerSEmSInSEnS$(command, optional, language) {
            // console.log([command, optional, language]);
            // return 'ok';
            switch (language.trim().toLowerCase()) {
                case 'inglês':
                case 'english':
                case 'inglés':
                case 'anglais':
                    this.language = 'en';
                    speak('Language mode - english').then(function () {
                        ask("What's your name?").then(function (name) {
                            speak("Greetings " + name);
                        });
                    });
                    break;

                case 'francês':
                case 'french':
                    this.language = 'fr-FR';
                    speak('Mode de langue - français').then(function () {
                        ask("Quel est ton nom?").then(function (name) {
                            speak("Greetings " + name);
                        });
                    });
                    break;

                case 'espanhol':
                case 'spanish':
                    this.language = 'es';
                    speak('Modo de idioma - español').then(function () {
                        ask("\xBFcu\xE1l es tu nombre?").then(function (name) {
                            speak("Saludos " + name);
                        });
                    });
                    break;

                case 'chinês':
                case 'chinese':
                    this.language = 'zh-CN';
                    speak('語言模式 - 中文').then(function () {
                        ask("\u4F60\u53EB\u4EC0\u9EBC\u540D\u5B57\uFF1F").then(function (name) {
                            speak("\u554F\u5019" + name);
                        });
                    });
                    break;

                case 'japonês':
                    this.language = 'ja-JP';
                    this.params['nome'] = '皆';
                    speak('言語モード - 日本語').then(function () {
                        ask("\u3042\u306A\u305F\u306E\u540D\u524D\u306F\u4F55\u3067\u3059\u304B\uFF1F").then(function (name) {
                            speak("\u6328\u62F6" + name);
                        });
                    });

                    break;

                case 'portuguese':
                default:
                    this.language = 'pt-BR';
                    speak('Idioma nativo, ufa.').then(function () {
                        ask("E ai, curtiu?").then(function (yesno) {
                            if (yesno == 'sim') {
                                speak("Que bom! Meu amigo!");
                            } else {
                                speak('Sério? Mas poxa vida.');
                            }
                        });
                    });
                    break;
            }
        }
    }]);

    return BotLanguageSettingsController;
}(BotController);
'use strict';
/**
 *
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotListsController = function (_BotController) {
  _inherits(BotListsController, _BotController);

  function BotListsController() {
    _classCallCheck(this, BotListsController);

    return _possibleConstructorReturn(this, (BotListsController.__proto__ || Object.getPrototypeOf(BotListsController)).apply(this, arguments));
  }

  _createClass(BotListsController, [{
    key: "^(criar )?(lista(s|r)?)( d[oae](s)? )?(.*)?",
    value: function criarListaSRDOaeS(criar, comando, _s1, doaes, _s2, objetivo) {

      switch (objetivo) {
        case 'comandos':
          return bot.speak('Lista muito extensa');
          break;
      }

      if (window.localStorage['bot.list.' + objetivo]) {
        var lista = JSON.parse(window.localStorage['bot.list.' + objetivo]);

        if (lista.length === 0) {
          return bot.speak('Lista vazia');
        } else {
          return bot.speak(lista.toString());
        }
      } else {
        var functionCriarLista = function functionCriarLista() {
          window.localStorage['bot.list.' + objetivo] = JSON.stringify([]);
          return bot.speak('Lista ' + doaes + ' ' + objetivo + ' criado com sucesso.');
        };

        if (criar) {
          return functionCriarLista();
        }

        return bot.ask('N\xE3o existe lista ' + doaes + ' ' + objetivo + '.\nDeseja criar uma?', function (resposta) {
          if (resposta != 'ok') {
            return false;
          }
          return true;
        }, function (reject, input, retry) {
          reject();
        }).then(functionCriarLista);
      }
    }
    /**
     * @todo New approach for BotController with CommandsAndControllersInterpreter
     */
    // listar(objetivo){
    //   bot.speak(`Comando: listar em novo approach`);
    //   bot.speak(`Objetivo: ${objetivo}`);
    // }

  }]);

  return BotListsController;
}(BotController);
// const BotListControllerCommands = {
//   "^(lista(s|r)?)( d[oae](s)? )?(.*)?":BotListController.prototype.listar
// }
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotLuckyOpenerController = function (_BotController) {
    _inherits(BotLuckyOpenerController, _BotController);

    function BotLuckyOpenerController() {
        _classCallCheck(this, BotLuckyOpenerController);

        return _possibleConstructorReturn(this, (BotLuckyOpenerController.__proto__ || Object.getPrototypeOf(BotLuckyOpenerController)).apply(this, arguments));
    }

    _createClass(BotLuckyOpenerController, [{
        key: "^fechar tudo$",
        value: function fecharTudo$(query) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.windows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var w = _step.value;

                    w.close();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.windows = [];
        }
    }, {
        key: "^(aba|janela) (.*)$",
        value: function abaJanela$(comando, aba) {
            //for(let w of this.windows){
            //  w.close();
            //}
            aba = parseInt(aba);
            if (this.windows[aba]) {
                var myWindow = this.windows[aba];
                console.log([comando, aba, myWindow, myWindow.focus.apply(window)]);
                setTimeout(myWindow.focus(), 0);
            }
        }
    }, {
        key: "^abrir (.*) no youtube$",
        value: function abrirNoYoutube$(query) {
            var url = 'http://www.google.com/webhp?#q=inurl:youtube.com ' + query + '&btnI=I';
            this.windows.push(window.open(url));
        }
    }, {
        key: "^(pesquisar imagens sobre|imagens|imagens google) (.*)$",
        value: function pesquisarImagensSobreImagensImagensGoogle$(command, query) {
            var url = 'https://www.google.nl/search?tbm=isch&q=' + query;
            this.windows.push(window.open(url));
        }
    }, {
        key: "^(procurar sobre) (.*)$",
        value: function procurarSobre$(comando, query) {
            var url = 'http://www.google.com/webhp?#q=' + query;
            this.windows.push(window.open(url));
        }
    }, {
        key: "^((procurar|pesquisar) artigo acadêmico sobre) (.*)$",
        value: function procurarPesquisarArtigoAcadMicoSobre$(comando, comando2, query) {
            var url = 'https://scholar.google.com.br/scholar?hl=pt-BR&lr=lang_pt&oq=&q=' + query;
            this.windows.push(window.open(url));
        }
    }]);

    return BotLuckyOpenerController;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Palavrao = function (_BotController) {
  _inherits(Palavrao, _BotController);

  function Palavrao() {
    _classCallCheck(this, Palavrao);

    return _possibleConstructorReturn(this, (Palavrao.__proto__ || Object.getPrototypeOf(Palavrao)).apply(this, arguments));
  }

  _createClass(Palavrao, [{
    key: "^vai tomar no seu c\\*",
    value: function vaiTomarNoSeuC() {
      return "Oloko bixo, qq isso";
    }
  }, {
    key: "^testando$",
    value: function testando$() {
      speak('testado');
      return "OK";
    }
  }, {
    key: "(m(\\*){4}|f(\\*){12}|c(\\*){6}|f(\\*){3}\-se)",
    value: function m4F12C6F3Se() {
      var self = this;
      self.palavrao = self.palavrao + 1 || 1;
      self.speak('Atenção').then(function () {
        var vezes = self.palavrao > 1 ? 'vezes' : 'vez';
        self.speak("Voc\xEA est\xE1 sendo multado por falar palavr\xE3o " + self.palavrao + " " + vezes);
      });
    }
  }]);

  return Palavrao;
}(BotController);
//f\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*
//que m**** hein
//p*** que pariu velho
//c****** velho
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotPtBrHelpController = function (_BotController) {
  _inherits(BotPtBrHelpController, _BotController);

  function BotPtBrHelpController() {
    _classCallCheck(this, BotPtBrHelpController);

    return _possibleConstructorReturn(this, (BotPtBrHelpController.__proto__ || Object.getPrototypeOf(BotPtBrHelpController)).apply(this, arguments));
  }

  _createClass(BotPtBrHelpController, [{
    key: "^conjugar (o )?verbo (\\w+)$",
    value: function conjugarOVerboW$() {}
  }, {
    key: "^gerar sílaba$",
    value: function gerarSLaba$() {
      if (bot.params['syllables']) {
        var syllables = bot.params['syllables'];
        var syllable = syllables[Math.round(Math.random() * syllables.length)];
        this.speak(syllable);
      } else {
        bot.input('gerador de sílabas');
        bot.input('gerar sílaba');
      }
    }
  }, {
    key: "^gerador de sílabas$",
    value: function geradorDeSLabas$() {
      var vowels = 'aeiou';
      // var consonants = 'bcdfghjklmnpqrstvxwyz';
      var consonants = 'bcdfghjlmnpqrstvxz';
      var syllables = [];
      vowels.split('').forEach(function (v, i) {
        consonants.split('').forEach(function (c, ii) {

          syllables.push("" + v);
          syllables.push("" + c + v);
        });
      });

      var f = '';for (var x = 0; x < 5; x++) {
        f += " " + syllables[Math.round(Math.random() * syllables.length - 1)];
      }

      bot.params['syllables'] = syllables;
      speak("Gerou v\xE1rias s\xEDlabas do tipo " + f);
    }
  }]);

  return BotPtBrHelpController;
}(BotController);
'use strict';
/**
 * Basic calculator
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Bot5W = function (_BotController) {
    _inherits(Bot5W, _BotController);

    function Bot5W() {
        _classCallCheck(this, Bot5W);

        return _possibleConstructorReturn(this, (Bot5W.__proto__ || Object.getPrototypeOf(Bot5W)).apply(this, arguments));
    }

    _createClass(Bot5W, [{
        key: "^quem$",


        /**
         * quem...
         */
        value: function quem$() {
            bot.speak('Quem o que?');
        }
    }, {
        key: "^quem sou eu$",
        value: function quemSouEu$() {
            bot.speak('Você é o ser humano que está programando.');
        }
    }, {
        key: "^quem é (.*)$",
        value: function quem$(nome) {
            if (window.localStorage['user.known.people.' + nome]) {
                var oque = window.localStorage['user.known.people.' + nome];
                oque = oque.replace(/^meu (.*)$/gi, 'seu $1');
                oque = oque.replace(/^minha (.*)$/gi, 'sua $1');
                bot.speak(nome + ' \xE9 ' + oque);
                //bot.input('obterPessoa ' + nome).then(function(data){return data[data.length-1];}).then(bot.speak);
                //return true;
            } else {
                var respostaKgs = new BotKnowledgeGraphSearchService(nome).get().then(function (data) {
                    // name
                    var name = data.itemListElement[0].result.name || '';
                    // var description = (data.itemListElement[0].result.description || data.itemListElement[0].result.detailedDescription.articleBody);
                    var description = data.itemListElement[0].result.detailedDescription.articleBody;
                    var image = data.itemListElement[0].result.image.contentUrl || null;

                    if (image) {
                        bot.param('name', name);
                        bot.param('avatar', image);
                    }
                    return name + '. ' + description;
                }).then(bot.speak).catch(function () {
                    return new BotWikipediaService(nome).get().then(function (data) {
                        if (Object.keys(data.query.pages)[0] == '-1') {
                            throw false;
                        }
                        return data;
                    }).then(bot.speak);
                }).catch(function () {
                    return new BotCustomSearchService(nome).get().then(function (data) {
                        // console.log();
                        console.log(data.items[0].snippet);
                        if (data.items[0].formattedUrl.match(/\.facebook\.com/gi)) {
                            var facebookuser = data.items[0].formattedUrl.split("/").filter(String).reverse()[0];
                            bot.param('avatar', 'https://graph.facebook.com/' + facebookuser + '/picture?type=normal');
                        }

                        bot.param('notification.callback', function () {
                            window.open(data.items[0].formattedUrl);
                        });
                        return 'Resultado Google:' + data.items[0].title;
                    }).then(bot.speak);
                }).catch(function () {
                    return bot.speak('Deu ruim no Google também.');
                }).then(function () {
                    bot.param('name', 'Computador');
                    bot.param('avatar', 'img/Assistant-100.png');
                    bot.speak('Fim');
                });
            }
        }

        /**
         * Bonus de pessoas
         */

    }, {
        key: "^(.*) pessoa(s?) relacionada(s?) (a|ao) (.*)",
        value: function pessoaSRelacionadaSAAo(pessoas, plural1, plural2, aao, relacao) {
            var numeros = ['zero', '(uma|um)', '(dois|duas)', '(tres|três)', 'quatro', 'cinco', 'seis', 'sete', 'oito', 'nove'];

            numeros.forEach(function (value, key) {
                pessoas = pessoas.replace(new RegExp(value, 'g'), key);
            });

            var resultados = [];
            new BotKnowledgeGraphSearchService(relacao, 'Person', pessoas).get().then(function (data) {
                for (var x = 0; x < data.itemListElement.length; x++) {
                    data = data.itemListElement[x].result.name + ', ' + data.itemListElement[x].result.description;
                    // resultados.push(data.itemListElement[x].result);
                    bot.speak(data);
                }

                console.log(resultados);
            });
        }
    }, {
        key: "^o que$",
        value: function oQue$() {}
    }, {
        key: "^o que (é|foi|fez|faz)$",
        value: function oQueFoiFezFaz$() {}
    }, {
        key: "^o que fazer$",
        value: function oQueFazer$() {}
    }, {
        key: "^(definir|o que é) (.*)$",
        value: function definirOQue$(linha, comando, palavra) {
            //"^(definir|defina|defina a|definir o|o que significa|o que é|qual o significado de) (.*)$" (linha, comando, palavra) {

            // console.log("comando:%s, palavra:%s", comando, palavra);
            // getDef(palavra, "pt", options, function(definition) {
            //     speak(`${definition.definition}`);
            //     //speak(`definição de ${definition.word}, ${definition.category}. ${definition.definition}`);
            // });
        }
    }, {
        key: "^como$",
        value: function como$() {}
    }, {
        key: "^como fazer (.*)$",
        value: function comoFazer$() {}
    }, {
        key: "^como ([a-z^\s]+) (.*)$",
        value: function comoAZS$(acao, frase) {
            var wikihow = new BotWikihowService();
            wikihow.search(acao + ' ' + frase).then(wikihow.get.bind(wikihow)).then(this.speak);
        }
    }, {
        key: "^onde$",
        value: function onde$() {}
    }, {
        key: "^porque$",
        value: function porque$() {}
    }, {
        key: "(qua(l|is))( é| são)?( o| a)?(s)?( meu| minha| seu| sua| nosso)(s)? (.*)",
        value: function quaLIsSOOASMeuMinhaSeuSuaNossoS(what, whats, is, the, plural, myyours, plural2, objetivo) {
            var ownermap = {
                'meu': 'seu',
                'minha': 'sua',
                'seu': 'meu',
                'sua': 'minha',
                'nosso': 'nosso'

                // will testify to collect frequency of service center
            };var owner = ownermap[myyours];

            bot.speak('Objetivo: ' + objetivo + '. De quem: ' + owner);
        }
    }]);

    return Bot5W;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotRepeaterController = function (_BotController) {
    _inherits(BotRepeaterController, _BotController);

    function BotRepeaterController() {
        _classCallCheck(this, BotRepeaterController);

        return _possibleConstructorReturn(this, (BotRepeaterController.__proto__ || Object.getPrototypeOf(BotRepeaterController)).apply(this, arguments));
    }

    return BotRepeaterController;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotTodoListController = function (_BotController) {
    _inherits(BotTodoListController, _BotController);

    function BotTodoListController() {
        _classCallCheck(this, BotTodoListController);

        return _possibleConstructorReturn(this, (BotTodoListController.__proto__ || Object.getPrototypeOf(BotTodoListController)).apply(this, arguments));
    }

    _createClass(BotTodoListController, [{
        key: "dia (\\d+) de (\\w+)( de (\\d{4}))? (.*)$",
        value: function diaDDeWDeD4$(dia, mes, seano, ano, what) {
            ano = ano ? ano : '2017';
            mes = ['janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'].indexOf(mes.toLowerCase()) + 1;

            console.log("Dia:%s, mes:%s, ano:%s, what: %s", dia, mes, ano, what);

            if (what) {
                var event = {
                    'summary': '>> ' + what,
                    'location': 'Timemachine Bot v0.1',
                    'description': 'im not a robot, im just a script ' + Date.now() + '\n          ano = (ano) ? ano : \'2017\';\n          mes = [\n            \'janeiro\',\'fevereiro\',\'mar\xE7o\',\n            \'abril\',\'maio\',\'junho\',\n            \'julho\',\'agosto\',\'setembro\',\n            \'outubro\',\'novembro\',\'dezembro\'\n          ];\n          console.log("Dia:%s, mes:%s, ano:%s, what: %s", dia, mes, ano, what);\n          ',
                    'start': {
                        'dateTime': new Date(ano + '-' + mes + '-' + dia).toJSON(),
                        'timeZone': 'America/Sao_Paulo'
                    },
                    'end': {
                        'dateTime': new Date(ano + '-' + mes + '-' + dia).toJSON(),
                        'timeZone': 'America/Sao_Paulo'
                    },
                    'recurrence': [
                        // 'RRULE:FREQ=DAILY;COUNT=2'
                    ],
                    'attendees': [{ 'email': 'tael.assistant@gmail.com' }],
                    'reminders': {
                        'useDefault': false,
                        'overrides': [{ 'method': 'email', 'minutes': 24 * 60 }, { 'method': 'popup', 'minutes': 10 }]
                    }
                };
                var request = gapi.client.calendar.events.insert({
                    'calendarId': 'primary',
                    'resource': event
                });

                return request.execute(function (event) {
                    appendPre('Event created: ' + event.htmlLink);
                });
            }
        }
    }, {
        key: "^nota mental (.*)$",
        value: function notaMental$(nota) {
            var event = {
                'summary': 'Nota Mental, ' + nota,
                'location': 'Hive',
                'description': nota,
                'start': {
                    'dateTime': new Date().toJSON(),
                    'timeZone': 'America/Sao_Paulo'
                },
                'end': {
                    'dateTime': new Date().toJSON(),
                    'timeZone': 'America/Sao_Paulo'
                },
                'recurrence': [
                    // 'RRULE:FREQ=DAILY;COUNT=2'
                ],
                'attendees': [{ 'email': 'tael.assistant@gmail.com' }],
                'reminders': {
                    // 'useDefault': false,
                    // 'overrides': [
                    //   {'method': 'email', 'minutes': 24 * 60},
                    //   {'method': 'popup', 'minutes': 10}
                    // ]
                }
            };
            var request = gapi.client.calendar.events.insert({
                'calendarId': 'primary',
                'resource': event
            });
            return request.execute(function (event) {
                appendPre('Event created: ' + event.htmlLink);
            });
        }
    }, {
        key: "^transcreva$",
        value: function transcreva$() {

            var fulltext = [];
            // let transcrissao = function(texto){
            //
            // }

            bot.ask('transcrevendo...', function (texto) {
                if (texto != 'fim' && texto != 'finalizar transcrição') {
                    fulltext.push(texto);
                    return false;
                } else {
                    return speak('finalizando...').then(function () {
                        var event = {
                            'summary': 'TODO LIST TEST X ' + Date.now(),
                            'location': 'tesssszzsttttt',
                            'description': fulltext.join(';\n'),
                            'start': {
                                'dateTime': new Date().toJSON(),
                                'timeZone': 'America/Sao_Paulo'
                            },
                            'end': {
                                'dateTime': new Date().toJSON(),
                                'timeZone': 'America/Sao_Paulo'
                            },
                            'recurrence': [
                                // 'RRULE:FREQ=DAILY;COUNT=2'
                            ],
                            'attendees': [{ 'email': 'tael.assistant@gmail.com' }],
                            'reminders': {
                                // 'useDefault': false,
                                // 'overrides': [
                                //   {'method': 'email', 'minutes': 24 * 60},
                                //   {'method': 'popup', 'minutes': 10}
                                // ]
                            }
                        };
                        var request = gapi.client.calendar.events.insert({
                            'calendarId': 'primary',
                            'resource': event
                        });
                        return request.execute(function (event) {
                            appendPre('Event created: ' + event.htmlLink);
                        });
                    });
                }
            }, function (rejection, input, retries) {
                setTimeout(function () {
                    rejection(input);
                    console.log('rejection %s after 5 seconds', input);
                }, 5000);
            });
        }
        /**
         * New feature using google calendar.
         */

    }, {
        key: "^calendario$",
        value: function calendario$() {}
    }, {
        key: "^sobre lista de tarefas$",
        value: function sobreListaDeTarefas$() {
            speak('lista de tarefas', function () {
                speak('aplicativo para registrar tarefas usando banco de dados sql');
            });
        }
    }, {
        key: "^lista de tarefas deprecada remover logo$",
        value: function listaDeTarefasDeprecadaRemoverLogo$() {
            var sql = 'CREATE TABLE IF NOT EXISTS todos (\n          id integer primary key asc,\n          todo text,\n          created datetime,\n          completed datetime\n        )';

            console.log(sql);
            db.transaction(function (tx) {
                tx.executeSql(sql);
            });

            var sql = 'SELECT * FROM todos WHERE completed IS NULL';
            console.log(sql);
            db.transaction(function (tx) {
                tx.executeSql(sql, [], function (tx, rs) {
                    console.log(rs.rows);
                    var output = '';
                    Object.keys(rs.rows).map(function (objectKey, index) {
                        var value = rs.rows[objectKey].todo;
                        var index = rs.rows[objectKey].id;
                        output += 'Tarefa numero ' + index + ' - ' + value + '\n';
                    });

                    speak_multiline_v1(output);
                });
            });
        }
    }, {
        key: "^nova tarefa$",
        value: function novaTarefa$() {
            ask('Qual a tarefa?').then(function (tarefa) {
                var insert = 'INSERT INTO todos (todo, created) VALUES (?,?)';
                db.transaction(function (tx) {

                    tx.executeSql(insert, [tarefa, new Date()], function () {
                        speak('Tarefa "' + tarefa + '" cadastrada com sucesso');
                    }, function (tx, e) {
                        speak('Erro ao cadastrar tarefa');
                        alert(e.message);
                    });
                });
            });
        }
    }, {
        key: "^concluir tarefa (.*)$",
        value: function concluirTarefa$(id) {

            var update = 'UPDATE todos SET completed = ? WHERE id = ?;';
            db.transaction(function (tx) {

                tx.executeSql(update, [new Date(), id], function () {
                    speak('Tarefa "' + id + '" concluida');
                }, function (tx, e) {
                    speak('Erro ao atualizar tarefa');
                    alert(e.message);
                });
            });
        }
    }, {
        key: "^(editar|alterar) tarefa (número\\s)?([\\d+]+)(.*)?$",
        value: function editarAlterarTarefaNMeroSD$(acao, indicativo, id, tarefa) {
            console.log([acao, indicativo, id, tarefa]);
            var update = 'UPDATE todos SET todo = ? WHERE id = ?;';
            if (!tarefa) {
                ask('Qual ser\xE1 a nova tarefa n\xFAmero ' + id + '?').then(function (tarefa) {
                    db.transaction(function (tx) {
                        tx.executeSql(update, [tarefa, id], function () {
                            speak('Tarefa "' + id + '" alterada com sucesso');
                        }, function (tx, e) {
                            speak('Erro ao atualizar tarefa');
                            alert(e.message);
                        });
                    });
                });
            } else {
                ask('Deseja mesmo alterar a tarefa n\xFAmero ' + id + '?').then(function (yesno) {
                    if (yesno == 'sim') {
                        db.transaction(function (tx) {
                            tx.executeSql(update, [tarefa, id], function () {
                                speak('Tarefa "' + id + '" alterada com sucesso');
                            }, function (tx, e) {
                                speak('Erro ao atualizar tarefa');
                                alert(e.message);
                            });
                        });
                    }
                });
            }
            // ;
        }
    }, {
        key: "^concluir todas as tarefas pendentes$",
        value: function concluirTodasAsTarefasPendentes$() {

            var update = 'UPDATE todos SET completed = ?;';
            ask('Tem certeza que deseja concluir todas as tarefas pendentes?').then(function (yesno) {
                if (yesno == 'sim') {
                    speak('Concluindo todas as tarefas').then(function () {
                        db.transaction(function (tx) {

                            tx.executeSql(update, [new Date()], function () {
                                ask('Todas as tarefas est\xE3o como concluidas. Deseja incluir nova tarefa?').then(function (yesno) {
                                    if (yesno == 'sim') {
                                        bot.input('nova tarefa');
                                    }
                                });
                            }, function (tx, e) {
                                speak('Erro ao atualizar tarefa');
                                alert(e.message);
                            });
                        });
                    });
                } else {
                    speak('Ok');
                }
            });
        }
    }]);

    return BotTodoListController;
}(BotController);
'use strict';
/**
 * How about some videos?
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotYoutubeController = function (_BotController) {
    _inherits(BotYoutubeController, _BotController);

    function BotYoutubeController() {
        _classCallCheck(this, BotYoutubeController);

        return _possibleConstructorReturn(this, (BotYoutubeController.__proto__ || Object.getPrototypeOf(BotYoutubeController)).apply(this, arguments));
    }

    _createClass(BotYoutubeController, [{
        key: "^((ligar ao|ir ao) vivo|youtube live)$",
        value: function ligarAoIrAoVivoYoutubeLive$() {
            var w = window.open('https://www.youtube.com/my_live_events?action_create_live_event=1', 'youtube-live-event');
            // popupBlockerChecker.check(w);
            this.windows.push(w);
        }
    }]);

    return BotYoutubeController;
}(BotController);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BotAfinnHelper = function () {
    function BotAfinnHelper() {
        _classCallCheck(this, BotAfinnHelper);

        this.words = {
            "abandono": -2,
            "abandonado": -2,
            "abandonos": -2,
            "sequestrado": -2,
            "abdução": -2,
            "raptos": -2,
            "abominar": -3,
            "abominou": -3,
            "detestável": -3,
            "abomina": -3,
            "habilidades": 2,
            "habilidade": 2,
            "absentista": -1,
            "ausentes": -1,
            "absolver": 2,
            "absolvidos": 2,
            "absolve": 2,
            "absolvendo": 2,
            "absorvido": 1,
            "abuso": -3,
            "abusado": -3,
            "abusos": -3,
            "abusivo": -3,
            "aceitar": 1,
            "aceitaram": 1,
            "aceitando": 1,
            "aceita": 1,
            "acidente": -2,
            "acidental": -2,
            "acidentalmente": -2,
            "acidentes": -2,
            "realizar": 2,
            "realizado": 2,
            "realiza": 2,
            "acusação": -1,
            "acusações": -2,
            "acusar": -2,
            "acusado": -2,
            "acusa": -2,
            "acusador": -2,
            "dor": -2,
            "realizável": 1,
            "doendo": -2,
            "absolvido": 2,
            "acrimonioso": -3,
            "ativo": 1,
            "adequado": 1,
            "admirar": 3,
            "admirado": 3,
            "admira": 3,
            "admiração": 3,
            "admitem": -1,
            "admite": -1,
            "admitido": -1,
            "admoestar": -2,
            "admoestado": -2,
            "adotar": 1,
            "adota": 1,
            "adorável": 3,
            "adorar": 3,
            "adorado": 3,
            "adores": 3,
            "avançado": 1,
            "vantagem": 2,
            "vantagens": 2,
            "aventura": 2,
            "aventuras": 2,
            "aventureiro": 2,
            "afetado": -1,
            "afeição": 3,
            "afetuoso": 3,
            "aflito": -1,
            "afrontada": -1,
            "receoso": -2,
            "agravar": -2,
            "agravado": -2,
            "agrava": -2,
            "agravante": -2,
            "agressão": -2,
            "agressões": -2,
            "agressivo": -1,
            "horrorizado": -3,
            "curioso": -2,
            "agonizar": -3,
            "agonizado": -3,
            "agoniza": -3,
            "agonizante": -3,
            "concordar": 1,
            "agradável": 3,
            "concordou": 1,
            "acordo": 1,
            "concorda": 1,
            "alarme": -2,
            "alarmado": -2,
            "alarmista": -2,
            "alarmistas": -2,
            "ai": -1,
            "alerta": -1,
            "alienação": -2,
            "vivo": 2,
            "alérgico": -2,
            "permitir": 1,
            "sozinho": -2,
            "surpreender": 3,
            "maravilhado": 2,
            "espanta": 2,
            "surpreendente": 4,
            "ambicioso": 2,
            "ambivalente": -1,
            "divertir": 3,
            "divertido": 2,
            "diversão": 4,
            "divertimentos": 3,
            "raiva": -2,
            "angers": -3,
            "irritado": -3,
            "angústia": -3,
            "angustiada": -3,
            "animosidade": -2,
            "incomodar": -2,
            "aborrecimento": -2,
            "aborrecido": -2,
            "irritante": -3,
            "irrita": -2,
            "antagônico": -2,
            "anti": -1,
            "antecipação": 1,
            "ansiedade": -2,
            "ansioso": 2,
            "apático": -3,
            "apatia": -3,
            "apeshit": -3,
            "apocalíptico": -2,
            "pedir desculpas": -1,
            "pediu desculpa": -1,
            "pede desculpas": -1,
            "desculpando": -1,
            "desculpa": -1,
            "chocado": -2,
            "apavorante": -2,
            "apaziguar": 2,
            "apaziguado": 2,
            "aplaca": 2,
            "aplaudir": 2,
            "aplaudido": 2,
            "aplaudindo": 2,
            "aplaude": 2,
            "aplauso": 2,
            "apreciar": 2,
            "apreciado": 2,
            "aprecia": 2,
            "apreciando": 2,
            "apreciação": 2,
            "apreensivo": -2,
            "aprovação": 2,
            "aprovado": 2,
            "aprova": 2,
            "ardente": 2,
            "prender": -2,
            "preso": -2,
            "prisões": -2,
            "arrogante": -2,
            "uma vergonha": -2,
            "envergonhado": -2,
            "bunda": -4,
            "assassinato": -3,
            "assassinatos": -2,
            "de ativos": 2,
            "ativos": 2,
            "assfucking": -4,
            "idiota": -3,
            "atônito": 2,
            "estupefacto": 3,
            "espantoso": 3,
            "espantosamente": 3,
            "alucinantes": 3,
            "ataque": -1,
            "atacado": -1,
            "atacante": -1,
            "ataques": -1,
            "atrai": 1,
            "atraído": 1,
            "atraindo": 2,
            "atração": 2,
            "atrações": 2,
            "audacioso": 3,
            "autoridade": 1,
            "evitar": -1,
            "evitado": -1,
            "averts": -1,
            "ávido": -2,
            "evita": -1,
            "aguardam": -1,
            "aguardado": -1,
            "aguarda": -1,
            "prêmio": 3,
            "premiado": 3,
            "prêmios": 3,
            "impressionante": 4,
            "horrível": -3,
            "desajeitado": -2,
            "machado": -1,
            "machadou": -1,
            "apoiado": 1,
            "apoio": 2,
            "backs": 1,
            "mau": -3,
            "fodão": -3,
            "mal": -3,
            "resgate": -2,
            "enganar": -2,
            "enganado": -2,
            "bamboozles": -2,
            "banimento": -2,
            "banir": -1,
            "falido": -3,
            "bankster": -3,
            "banido": -2,
            "barganha": 2,
            "barreira": -2,
            "desgraçado": -5,
            "bastardos": -5,
            "batalha": -1,
            "batalhas": -1,
            "espancado": -2,
            "beatífico": 3,
            "espancamento": -1,
            "belezas": 3,
            "bonita": 1,
            "lindamente": 3,
            "embelezar": 3,
            "depreciar": -2,
            "menosprezada": -2,
            "amado": 3,
            "beneficiar": 2,
            "benefícios": 2,
            "beneficiado": 2,
            "beneficiando": 2,
            "privar": -2,
            "enlutado": -2,
            "bereaves": -2,
            "bereaving": -2,
            "melhor": 2,
            "trair": -3,
            "traição": -3,
            "traída": -3,
            "traindo": -3,
            "trai": -3,
            "viés": -1,
            "tendenciosa": -2,
            "grande": 3,
            "cadela": -5,
            "cadelas": -5,
            "amargo": -2,
            "amargamente": -2,
            "bizarro": -2,
            "blah": -2,
            "culpa": -3,
            "culpou": -2,
            "culpando": -2,
            "abençoar": 2,
            "abençoa": 2,
            "bênção": 3,
            "cego": -1,
            "felicidade": 3,
            "feliz": 3,
            "alegre": 2,
            "quadra": -1,
            "sucesso": 2,
            "bloqueado": -1,
            "bloqueando": -1,
            "blocos": -1,
            "sangrento": -3,
            "borrada": -2,
            "fanfarrão": -2,
            "negrito": 2,
            "audaciosamente": 2,
            "bomba": -1,
            "impulsionar": 1,
            "impulsionou": 1,
            "aumenta": 1,
            "perfuração": -2,
            "furado": -2,
            "chato": -3,
            "incomodados": -2,
            "incomoda": -2,
            "enfadonho": -2,
            "boicote": -2,
            "boicotaram": -2,
            "boicotando": -2,
            "boicotes": -2,
            "lavagem cerebral": -3,
            "bravo": 2,
            "avanço": 3,
            "de tirar o fôlego": 5,
            "suborno": -3,
            "brilhante": 4,
            "mais brilhante": 2,
            "brilho": 1,
            "quebrou": -1,
            "partido": -1,
            "ninhada": -2,
            "intimidado": -2,
            "besteira": -4,
            "valentão": -2,
            "assédio moral": -2,
            "vadio": -2,
            "flutuante": 2,
            "fardo": -2,
            "sobrecarregados": -2,
            "sobrecarregar": -2,
            "encargos": -2,
            "calmo": 2,
            "acalmado": 2,
            "calmante": 3,
            "calmarias": 2,
            "não pode ficar": -3,
            "cancelar": -1,
            "cancelado": -1,
            "cancelando": -1,
            "cancela": -1,
            "câncer": -1,
            "capaz": 1,
            "cativado": 3,
            "cuidado": 2,
            "despreocupado": -2,
            "cuidadosamente": 2,
            "descuidado": -2,
            "cuidados": 2,
            "lucrando": -2,
            "catástrofe": -3,
            "catastrófico": -4,
            "cauteloso": -1,
            "comemoro": 3,
            "célebre": 3,
            "comemora": 3,
            "a comemorar": 3,
            "censurar": -2,
            "censurado": -2,
            "censores": -2,
            "certo": 1,
            "desgosto": -3,
            "chagrined": -2,
            "desafio": -1,
            "chance": 2,
            "chances": 2,
            "caos": -2,
            "caótico": -2,
            "carregada": -3,
            "cobranças": -2,
            "charme": 3,
            "encantador": 3,
            "charmless": -3,
            "punir": -2,
            "castigou": -3,
            "chastises": -3,
            "castigar": -3,
            "enganação": -3,
            "trapaceiro": -3,
            "traidores": -3,
            "fraudes": -4,
            "ânimo": 2,
            "aplaudiu": 2,
            "triste": -2,
            "saúde": 2,
            "acalentar": 2,
            "querido": 2,
            "preza": 2,
            "acalentando": 2,
            "chique": 2,
            "infantil": -2,
            "arrepiante": -1,
            "estrangulamento": -2,
            "engasgou": -2,
            "bobinas": -2,
            "asfixiante": -2,
            "esclarece": 2,
            "clareza": 2,
            "choque": -2,
            "classy": 3,
            "limpar": 2,
            "limpador": 2,
            "claro": 1,
            "apuradas": 1,
            "claramente": 1,
            "limpa": 1,
            "esperto": 2,
            "nublado": -1,
            "sem noção": -2,
            "galo": -5,
            "cocksucker": -5,
            "cocksuckers": -5,
            "pretensioso": -2,
            "coagido": -2,
            "colapso": -2,
            "desabou": -2,
            "colapsos": -2,
            "colidir": -1,
            "colide": -1,
            "colidindo": -1,
            "colisão": -2,
            "colisões": -2,
            "conspirando": -3,
            "combate": -1,
            "combates": -1,
            "comédia": 1,
            "conforto": 2,
            "confortável": 2,
            "reconfortante": 2,
            "confortos": 2,
            "recomendar": 2,
            "elogiado": 2,
            "cometer": 1,
            "compromisso": 2,
            "compromete": 1,
            "comprometido": 1,
            "comprometendo": 1,
            "compassivo": 2,
            "compelido": 1,
            "competente": 2,
            "competitivo": 2,
            "complacente": -2,
            "queixar-se": -2,
            "queixaram": -2,
            "reclama": -2,
            "compreensivo": 2,
            "conciliar": 2,
            "conciliados": 2,
            "concilia": 2,
            "conciliando": 2,
            "condenar": -2,
            "condenação": -2,
            "condenado": -2,
            "condena": -2,
            "confiança": 2,
            "confiante": 2,
            "conflito": -2,
            "contraditório": -2,
            "conflituosa": -2,
            "conflitos": -2,
            "confundir": -2,
            "confuso": -2,
            "parabéns": 2,
            "felicitar": 2,
            "consentimento": 2,
            "consentimentos": 2,
            "consolável": 2,
            "conspiração": -3,
            "constrangido": -2,
            "contágio": -2,
            "contagions": -2,
            "contagioso": -1,
            "desprezo": -2,
            "desdenhoso": -2,
            "desdenhosamente": -2,
            "contender": -1,
            "contendor": -1,
            "argumentando": -1,
            "contencioso": -2,
            "contestável": -2,
            "controverso": -2,
            "controversamente": -2,
            "convencer": 1,
            "convencido": 1,
            "convence": 1,
            "jovial": 2,
            "legal": 1,
            "coisas legais": 3,
            "encurralado": -2,
            "cadáver": -1,
            "dispendioso": -2,
            "coragem": 2,
            "corajoso": 2,
            "cortês": 2,
            "cortesia": 2,
            "cobrir": -3,
            "covarde": -2,
            "covardemente": -2,
            "cãibra": -1,
            "porcaria": -3,
            "batida": -2,
            "crazier": -2,
            "mais louca": -2,
            "louco": -3,
            "criativo": 2,
            "cabisbaixo": -2,
            "chorou": -2,
            "gritos": -2,
            "crime": -3,
            "criminal": -3,
            "criminosos": -3,
            "crise": -3,
            "crítico": -2,
            "crítica": -2,
            "criticar": -2,
            "criticada": -2,
            "critica": -2,
            "críticos": -2,
            "cruel": -3,
            "crueldade": -3,
            "esmagamento": -1,
            "esmagado": -2,
            "esmaga": -1,
            "esmagador": -1,
            "chorar": -2,
            "chorando": -2,
            "cona": -5,
            "maldição": -1,
            "cortar": -1,
            "fofa": 2,
            "cortes": -1,
            "corte": -1,
            "cínico": -2,
            "cinismo": -2,
            "danificar": -3,
            "danos": -3,
            "droga": -4,
            "perigo": -2,
            "temerário": 2,
            "ousado": 2,
            "mais escura": -2,
            "escuridão": -1,
            "destemido": 2,
            "morto": -3,
            "impasse": -2,
            "ensurdecedor": -1,
            "caro": 3,
            "morte": -2,
            "afável": 2,
            "dívida": -2,
            "engano": -2,
            "enganador": -3,
            "engana": -3,
            "enganando": -3,
            "decepção": -3,
            "decisivo": 1,
            "dedicado": 2,
            "derrotado": -2,
            "defeito": -3,
            "defeitos": -3,
            "defensor": 2,
            "defensores": 2,
            "sem defesa": -2,
            "adiar": -1,
            "deferimento": -1,
            "desafiador": -1,
            "déficit": -2,
            "degradar": -2,
            "degradante": -2,
            "degrada": -2,
            "desumanizar": -2,
            "desumanizado": -2,
            "desumaniza": -2,
            "desumanizante": -2,
            "deprimir": -2,
            "abatido": -2,
            "dejecting": -2,
            "dejetos": -2,
            "demora": -1,
            "atrasado": -1,
            "prazer": 3,
            "deleitado": 3,
            "deliciando": 3,
            "delícias": 3,
            "exigem": -1,
            "pedido": -1,
            "exigente": -1,
            "demandas": -1,
            "demonstração": -1,
            "desmoralizada": -2,
            "negado": -2,
            "denier": -2,
            "negadores": -2,
            "nega": -2,
            "denunciar": -2,
            "denuncia": -2,
            "negar": -2,
            "negando": -2,
            "deprimido": -2,
            "deprimente": -2,
            "descarrilhar": -2,
            "descarrilou": -2,
            "descarrila": -2,
            "ridicularizar": -2,
            "ridicularizado": -2,
            "derides": -2,
            "deriding": -2,
            "escárnio": -2,
            "desejável": 2,
            "desejo": 1,
            "desejado": 2,
            "desejoso": 2,
            "desespero": -2,
            "desesperada": -3,
            "desesperos": -3,
            "desesperado": -3,
            "desesperadamente": -3,
            "desanimado": -3,
            "destruir": -2,
            "destruído": -2,
            "destruidor": -3,
            "destrói": -3,
            "destruição": -2,
            "destrutivo": -3,
            "destacado": -1,
            "deter": -2,
            "detido": -2,
            "detenção": -2,
            "determinado": 2,
            "devastar": -2,
            "devastado": -2,
            "devastador": -2,
            "devotado": 3,
            "diamante": 1,
            "pênis": -4,
            "dickhead": -4,
            "morrer": -3,
            "morreu": -3,
            "difícil": -1,
            "desconfiado": -3,
            "dilema": -1,
            "dipshit": -3,
            "terrível": -3,
            "medonho": -3,
            "sujeira": -2,
            "mais sujo": -2,
            "sujo": -2,
            "incapacitante": -1,
            "desvantagem": -2,
            "desfavorecidos": -2,
            "desaparecer": -1,
            "desaparecido": -1,
            "desaparece": -1,
            "desiludir": -2,
            "desapontado": -2,
            "decepcionante": -2,
            "desapontamento": -2,
            "decepções": -2,
            "decepciona": -2,
            "desastre": -2,
            "desastres": -2,
            "desastroso": -3,
            "descrer": -2,
            "descartar": -1,
            "descartado": -1,
            "descarte": -1,
            "devoluções": -1,
            "desconsolado": -2,
            "desconsolo": -2,
            "descontente": -2,
            "discórdia": -2,
            "descontado": -1,
            "desencorajado": -2,
            "desacreditado": -2,
            "desdém": -2,
            "desgraça": -2,
            "desonrado": -2,
            "disfarce": -1,
            "disfarçado": -1,
            "disfarces": -1,
            "com nojo": -3,
            "repugnante": -3,
            "desmotivada": -2,
            "desonesto": -2,
            "desiludidos": -2,
            "inclinado": -2,
            "desarticulado": -2,
            "antipatia": -2,
            "sombrio": -2,
            "consternado": -2,
            "desordem": -2,
            "desorganizado": -2,
            "desorientado": -2,
            "denegrir": -2,
            "menosprezou": -2,
            "deprecie": -2,
            "depreciativo": -2,
            "disputa": -2,
            "disputado": -2,
            "disputas": -2,
            "contestando": -2,
            "desqualificado": -2,
            "inquietação": -2,
            "desconsiderados": -2,
            "desconsiderando": -2,
            "desconsideração": -2,
            "desrespeito": -2,
            "desrespeitado": -2,
            "rompimento": -2,
            "rupturas": -2,
            "disruptivo": -2,
            "insatisfeito": -2,
            "distorcer": -2,
            "distorcida": -2,
            "distorcendo": -2,
            "distorce": -2,
            "distrair": -2,
            "distraído": -2,
            "distração": -2,
            "distrai": -2,
            "aflição": -2,
            "angustiado": -2,
            "angústias": -2,
            "aflitivo": -2,
            "desconfiança": -3,
            "perturbar": -2,
            "perturbado": -1,
            "perturbador": -2,
            "distúrbios": -2,
            "pontilhado": -2,
            "tonto": -1,
            "esquivando": -2,
            "espertalhão": -2,
            "não funciona": -3,
            "doloroso": -2,
            "não gosto": -2,
            "dúvida": -1,
            "duvidou": -1,
            "duvidoso": -2,
            "dúvidas": -1,
            "ducha": -3,
            "babaca": -3,
            "downhearted": -2,
            "arrastar": -1,
            "arrastada": -1,
            "arrasta": -1,
            "drenado": -2,
            "pavor": -2,
            "temido": -2,
            "temendo": -2,
            "sonho": 1,
            "sonhos": 1,
            "caído": -2,
            "solta": -1,
            "afogar": -2,
            "afogado": -2,
            "afoga": -2,
            "bêbado": -4,
            "boato": -2,
            "maçante": -2,
            "burro": -3,
            "lixeira": -1,
            "despejado": -2,
            "lixões": -1,
            "disfunção": -2,
            "sério": 2,
            "facilidade": 2,
            "fácil": 1,
            "extático": 4,
            "estranho": -1,
            "misterioso": -2,
            "eficaz": 2,
            "eficazmente": 2,
            "exultante": 3,
            "elação": 3,
            "elegante": 2,
            "elegantemente": 2,
            "embaraçar": -2,
            "embaraça": -2,
            "embaraçoso": -2,
            "embaraço": -2,
            "amargurado": -2,
            "abraço": 2,
            "emergência": -2,
            "empática": 2,
            "vazio": -1,
            "enchanted": 2,
            "encorajar": 2,
            "encorajados": 2,
            "encorajamento": 2,
            "endossar": 2,
            "endossado": 2,
            "endosso": 2,
            "apoia": 2,
            "inimigos": -2,
            "inimigo": -2,
            "enérgico": 2,
            "se empenhar": 1,
            "engata": 1,
            "absortos": 1,
            "goza": 2,
            "iluminar": 2,
            "esclarecido": 2,
            "esclarecedor": 2,
            "enlightens": 2,
            "tédio": -2,
            "irritar": -3,
            "enfurecidos": -2,
            "enragés": -2,
            "enraging": -2,
            "arrebatar": 3,
            "escravizar": -2,
            "escravizados": -2,
            "escraviza": -2,
            "garantir": 1,
            "assegurando": 1,
            "empreendedor": 1,
            "encantar": 3,
            "entusiasmado": 3,
            "intitulado": 1,
            "confiada": 2,
            "invejas": -1,
            "invejoso": -2,
            "inveja": -1,
            "errôneo": -2,
            "erro": -2,
            "erros": -2,
            "escapar": -1,
            "escapes": -1,
            "escapando": -1,
            "estimado": 2,
            "ético": 2,
            "euforia": 3,
            "eufórico": 4,
            "despejo": -1,
            "exagerar": -2,
            "exagerado": -2,
            "exagera": -2,
            "exagerando": -2,
            "exasperado": 2,
            "excelência": 3,
            "excelente": 3,
            "excitar": 3,
            "animado": 2,
            "excitação": 3,
            "emocionante": 3,
            "excluir": -1,
            "excluídos": -2,
            "exclusão": -1,
            "exclusivo": 2,
            "isentar": -1,
            "esgotado": -2,
            "exhilarates": 3,
            "exonerar": 2,
            "exonerado": 2,
            "exonera": 2,
            "exonerando": 2,
            "expandir": 1,
            "expande": 1,
            "expulsar": -2,
            "expulso": -2,
            "expelindo": -2,
            "expele": -2,
            "explorar": -2,
            "explorados": -2,
            "explorando": -2,
            "exploits": -2,
            "exploração": 1,
            "explorações": 1,
            "expor": -1,
            "exposto": -1,
            "expõe": -1,
            "expondo": -1,
            "ampliar": 1,
            "estende-se": 1,
            "exuberante": 4,
            "fabuloso": 4,
            "mania": -2,
            "cansaço": -3,
            "bicha": -3,
            "bichas": -3,
            "falhou": -2,
            "fracassado": -2,
            "falta": -2,
            "falhar": -2,
            "falha": -2,
            "falhas": -2,
            "fainthearted": -2,
            "justo": 2,
            "fé": 1,
            "fiel": 3,
            "falsificação": -3,
            "falsificações": -3,
            "caindo": -1,
            "falsificados": -3,
            "falsificar": -3,
            "fama": 1,
            "ventilador": 3,
            "fantástico": 4,
            "farsa": -1,
            "fascinar": 3,
            "fascinado": 3,
            "fascina": 3,
            "fascinante": 3,
            "fascista": -2,
            "fascistas": -2,
            "fatalidades": -3,
            "fatalidade": -3,
            "fadiga": -2,
            "fatigado": -2,
            "fadigas": -2,
            "fatigante": -2,
            "favor": 2,
            "favorecido": 2,
            "favorito": 2,
            "favoritos": 2,
            "favores": 2,
            "medo": -2,
            "temeroso": -2,
            "assustador": -2,
            "engordou": -3,
            "débil": -2,
            "sentindo-me": 1,
            "felonies": -3,
            "fervente": 2,
            "festivo": 2,
            "fiasco": -2,
            "inquieto": -2,
            "luta": -2,
            "bem": 2,
            "fogo": -2,
            "disparamos": -2,
            "acendimento": -2,
            "caber": 1,
            "ginástica": 1,
            "navio almirante": 2,
            "foge": -1,
            "aleta": -2,
            "gripe": -2,
            "afobado": -2,
            "focado": 2,
            "afeiçoado": 2,
            "predileção": 2,
            "insensato": -2,
            "tolos": -2,
            "forçado": -1,
            "execução duma hipoteca": -2,
            "foreclosures": -2,
            "esqueço": -1,
            "esquecido": -1,
            "perdoar": 1,
            "indulgente": 1,
            "afortunado": 2,
            "frenético": -1,
            "fraude": -4,
            "fraudador": -4,
            "fraudadores": -4,
            "fraudulência": -4,
            "fraudulento": -4,
            "livre": 1,
            "liberdade": 2,
            "frenesi": -3,
            "fresco": 1,
            "amigáveis": 2,
            "susto": -2,
            "assustado": -2,
            "frikin": -2,
            "brincalhão": 2,
            "carrancudo": -1,
            "frustrar": -2,
            "frustrado": -2,
            "frustra": -2,
            "frustrante": -2,
            "frustração": -2,
            "ftw": 3,
            "porra": -5,
            "fodido": -4,
            "fuckers": -4,
            "fuckface": -4,
            "fuckhead": -4,
            "maldito": -4,
            "fucktard": -4,
            "fud": -3,
            "fuked": -4,
            "fuking": -4,
            "preencha": 2,
            "realizada": 2,
            "fulfills": 2,
            "fumegante": -2,
            "funeral": -1,
            "funerais": -1,
            "descolados": 2,
            "mais engraçado": 4,
            "engraçado": 2,
            "furioso": -3,
            "inútil": -2,
            "mordaça": -2,
            "amordaçado": -2,
            "ganho": 2,
            "ganhou": 3,
            "ganhando": 4,
            "ganhos": 2,
            "valente": 3,
            "galantemente": 3,
            "bravura": 3,
            "generoso": 2,
            "genial": 3,
            "fantasma": -1,
            "vertiginoso": -2,
            "presente": 2,
            "alegria": 4,
            "melancolia": -1,
            "glorioso": 2,
            "glória": 3,
            "deus": 1,
            "maldita": -3,
            "dádiva": 4,
            "boa": 3,
            "bondade": 3,
            "graça": 1,
            "gracioso": 3,
            "conceder": 1,
            "concedido": 1,
            "concessão": 1,
            "subvenções": 1,
            "grato": 2,
            "gratificação": 2,
            "grave": -2,
            "cinzento": -1,
            "ótimo": 3,
            "maior": 3,
            "ganância": -3,
            "lavagem verde": -3,
            "greenwashing": -3,
            "greenwash": -3,
            "greenwasher": -3,
            "greenwashers": -3,
            "cumprimentar": 1,
            "cumprimentou": 1,
            "cumprimento": 1,
            "saudações": 2,
            "cumprimenta": 1,
            "entristecido": -2,
            "bruto": -2,
            "crescimento": 2,
            "garantia": 1,
            "culpado": -3,
            "credulidade": -2,
            "crédulo": -2,
            "pistola": -1,
            "ha": 2,
            "hackeado": -1,
            "haha": 3,
            "hahaha": 3,
            "hahahah": 3,
            "saudar": 2,
            "saudado": 2,
            "infeliz": -2,
            "infelicidade": -2,
            "hardier": 2,
            "dificuldade": -2,
            "prejudicar": -2,
            "prejudicada": -2,
            "prejudicial": -2,
            "harming": -2,
            "harms": -2,
            "harried": -2,
            "áspero": -2,
            "mais duras": -2,
            "mais severos": -2,
            "ódio": -3,
            "odiava": -3,
            "odiadores": -3,
            "ódios": -3,
            "odiando": -3,
            "assombro": -1,
            "assombrada": -2,
            "assombrando": 1,
            "assombrações": -1,
            "saudável": 2,
            "desolador": -3,
            "inconsolável": -3,
            "sincero": 2,
            "céu": 2,
            "celestial": 4,
            "coração pesado": -2,
            "inferno": -4,
            "socorro": 2,
            "útil": 2,
            "ajuda": 2,
            "desamparado": -2,
            "herói": 2,
            "heróis": 2,
            "heróico": 3,
            "hesitante": -2,
            "hesitar": -2,
            "escondeu": -1,
            "esconder": -1,
            "couros": -1,
            "se escondendo": -1,
            "realçar": 2,
            "hilário": 2,
            "obstáculo": -2,
            "com saudades de casa": -2,
            "honesto": 2,
            "honra": 2,
            "honrado": 2,
            "homenagem": 2,
            "hooliganismo": -2,
            "arruaceiros": -2,
            "esperança": 2,
            "esperançoso": 2,
            "esperançosamente": 2,
            "sem esperança": -2,
            "esperanças": 2,
            "na esperança": 2,
            "horrendo": -3,
            "hostil": -2,
            "mascate": -2,
            "enorme": 1,
            "abraços": 2,
            "humerous": 3,
            "humilhado": -3,
            "humilhação": -3,
            "humor": 2,
            "cómico": 2,
            "fome": -2,
            "hurra": 5,
            "ferido": -2,
            "machucando": -2,
            "dói": -2,
            "hipócrita": -2,
            "histeria": -3,
            "histérico": -3,
            "ataque de nervos": -3,
            "ignorância": -2,
            "ignorante": -2,
            "ignorar": -1,
            "ignorados": -2,
            "ignora": -1,
            "doente": -2,
            "ilegal": -3,
            "analfabetismo": -2,
            "doença": -2,
            "doenças": -2,
            "imbecil": -3,
            "imobilizado": -1,
            "imortal": 2,
            "imune": 1,
            "impaciente": -2,
            "imperfeito": -2,
            "importância": 2,
            "importante": 2,
            "impor": -1,
            "imposta": -1,
            "impõe": -1,
            "imponente": -1,
            "impotente": -2,
            "impressionar": 3,
            "impressionado": -2,
            "impressiona": 3,
            "melhorar": 2,
            "melhorado": 2,
            "melhoria": 2,
            "melhora": 2,
            "melhorando": 2,
            "incapacidade": -2,
            "inação": -2,
            "insuficiente": -2,
            "incapaz": -2,
            "incapacitado": -2,
            "incensado": -2,
            "incompetência": -2,
            "incompetente": -2,
            "inconsiderado": -2,
            "inconveniência": -2,
            "inconveniente": -2,
            "aumentar": 1,
            "aumentou": 1,
            "indeciso": -1,
            "indestrutível": 2,
            "indiferença": -2,
            "indiferente": -2,
            "indignado": -2,
            "indignação": -2,
            "doutrinar": -2,
            "doutrinados": -2,
            "doutrina": -2,
            "ineficaz": -2,
            "apaixonado": 2,
            "paixão": 2,
            "infectado": -2,
            "inferior": -2,
            "inflamado": -2,
            "influente": 2,
            "violação": -2,
            "enfurecer": -2,
            "enfureceu": -2,
            "enfurece": -2,
            "inibir": -1,
            "prejuízo": -2,
            "injustiça": -2,
            "inovar": 1,
            "inova": 1,
            "inovação": 1,
            "inovador": 2,
            "inquisição": -2,
            "inquisitivo": 2,
            "insano": -2,
            "insanidade": -2,
            "inseguro": -1,
            "insensível": -2,
            "insensividade": -2,
            "insignificante": -2,
            "insípido": -2,
            "inspiração": 2,
            "inspirado": 2,
            "inspirar": 2,
            "inspira": 2,
            "inspirador": 3,
            "insulto": -2,
            "insultado": -2,
            "insultante": -2,
            "insultos": -2,
            "intacto": 2,
            "integridade": 2,
            "inteligente": 1,
            "intenso": 1,
            "interesse": 1,
            "interessado": 2,
            "interessante": 2,
            "interesses": 1,
            "interrogados": -2,
            "interromper": -2,
            "interrompeu": -2,
            "interrompendo": -2,
            "interrupção": -2,
            "interrupções": -2,
            "intimidar": -2,
            "intimidados": -2,
            "intimida": -2,
            "intimidador": -2,
            "intimidação": -2,
            "intricado": 2,
            "intrigas": 1,
            "invencível": 2,
            "convite": 1,
            "convidativo": 1,
            "invulnerável": 2,
            "enfurecido": -3,
            "irônico": -1,
            "ironia": -1,
            "irracional": -1,
            "irresistível": 2,
            "irresoluto": -2,
            "irresponsável": 2,
            "irreversível": -1,
            "isolado": -1,
            "sarnento": -2,
            "asno": -4,
            "jackasses": -4,
            "desenvolto": 2,
            "com ciumes": -2,
            "empurrão": -3,
            "jesus": 1,
            "jóia": 1,
            "jóias": 1,
            "jocoso": 2,
            "junte-se": 1,
            "gracejo": 2,
            "piadas": 2,
            "alegremente": 3,
            "jubilante": 3,
            "saltitante": -1,
            "justiça": 2,
            "justificadamente": 2,
            "justificado": 2,
            "afiado": 1,
            "matar": -3,
            "assassinado": -3,
            "matança": -3,
            "kills": -3,
            "tipo": 2,
            "kinder": 2,
            "beijo": 2,
            "lackadaisical": -2,
            "atraso": -2,
            "defasada": -2,
            "defasagens": -2,
            "coxo": -2,
            "ponto de referência": 2,
            "rir": 1,
            "riu": 1,
            "rindo": 1,
            "risos": 1,
            "laughting": 1,
            "lançado": 1,
            "lawl": 3,
            "ação judicial": -2,
            "ações judiciais": -2,
            "preguiçoso": -1,
            "vazamento": -1,
            "vazou": -1,
            "sair": -1,
            "legalmente": 1,
            "clemente": 1,
            "letárgico": -2,
            "letargia": -2,
            "mentiroso": -3,
            "mentirosos": -3,
            "calunioso": -2,
            "mentiu": -2,
            "salva-vidas": 4,
            "gostar": 2,
            "gostou": 2,
            "gostos": 2,
            "limitação": -1,
            "limitado": -1,
            "limites": -1,
            "litígio": -1,
            "litigioso": -2,
            "lívido": -2,
            "lmao": 4,
            "lmfao": 4,
            "detestar": -3,
            "detestava": -3,
            "loathes": -3,
            "repugnância": -3,
            "entrada": -2,
            "lobbying": -2,
            "ri muito": 3,
            "solitário": -2,
            "saudade": -1,
            "tear": -1,
            "assomava": -1,
            "iminente": -1,
            "teares": -1,
            "solto": -3,
            "perde": -3,
            "perdedor": -3,
            "perder": -3,
            "perda": -3,
            "perdido": -3,
            "amar": 3,
            "lovelies": 3,
            "amoroso": 2,
            "menor": -1,
            "fidelidade": 3,
            "sorte": 3,
            "felizmente": 3,
            "por sorte": 3,
            "lúgubre": -2,
            "lunático": -3,
            "lunáticos": -3,
            "espreitar": -1,
            "espreita": -1,
            "enlouquecedora": -3,
            "decidir": -1,
            "loucamente": -3,
            "loucura": -3,
            "obrigatório": -1,
            "manipulado": -1,
            "manipulação": -1,
            "maravilha": 3,
            "maravilhoso": 4,
            "maravilhas": 3,
            "obra-prima": 4,
            "obras-primas": 4,
            "importam": 1,
            "assuntos": 1,
            "maduro": 2,
            "significativo": 1,
            "sem significado": -2,
            "medalha": 3,
            "mediocridade": -3,
            "meditativo": 1,
            "melancólico": -2,
            "ameaça": -2,
            "ameaçado": -2,
            "misericórdia": 2,
            "bagunça": -2,
            "estragando tudo": -2,
            "metódico": 2,
            "estúpido": -2,
            "milagre": 4,
            "mirthfully": 3,
            "portar-se mal": -2,
            "comportado mal": -2,
            "misbehaves": -2,
            "misbehaving": -2,
            "travessura": -1,
            "mischiefs": -1,
            "miserável": -3,
            "miséria": -2,
            "apreensão": -2,
            "informação errada": -2,
            "mal informado": -2,
            "mal interpretado": -2,
            "interpretar mal": -1,
            "misreporting": -2,
            "deturpação": -2,
            "senhorita": -2,
            "esquecidas": -2,
            "ausência de": -2,
            "equivocando": -2,
            "entender mal": -2,
            "mal entendido": -2,
            "misunderstands": -2,
            "incompreendido": -2,
            "gemido": -2,
            "gemeu": -2,
            "gemendo": -2,
            "gemidos": -2,
            "simulado": -2,
            "escarnecido": -2,
            "zombeteiro": -2,
            "mocks": -2,
            "fautor": -2,
            "monopolizar": -2,
            "monopolizado": -2,
            "monopoliza": -2,
            "monopolização": -2,
            "temperamental": -1,
            "lastimador": -1,
            "lastimando": -1,
            "filho da puta": -5,
            "motivar": 1,
            "motivada": 2,
            "motivador": 2,
            "motivação": 1,
            "lamentar": -2,
            "lamentou": -2,
            "fúnebre": -2,
            "luto": -2,
            "lamentação": -2,
            "assassino": -3,
            "mito": -1,
            "n00b": -2,
            "ingênuo": -2,
            "desagradável": -3,
            "natural": 1,
            "carente": -2,
            "negativo": -2,
            "negatividade": -2,
            "negligência": -2,
            "negligenciada": -2,
            "negligenciando": -2,
            "negligências": -2,
            "nervos": -1,
            "nervoso": -2,
            "nervosamente": -2,
            "bom": 3,
            "estiloso": 2,
            "manos": -5,
            "negro": -5,
            "não": -1,
            "nenhum divertimento": -3,
            "nobre": 2,
            "barulhento": -1,
            "absurdo": -2,
            "novato": -2,
            "não é bom": -2,
            "não está funcionando": -3,
            "notório": -2,
            "romance": 2,
            "entorpecido": -1,
            "nozes": -3,
            "obliterar": -2,
            "obliterado": -2,
            "obnóxio": -3,
            "obsceno": -2,
            "obcecado": 2,
            "obsoleto": -2,
            "obstáculos": -2,
            "obstinado": -2,
            "ímpar": -2,
            "ofender": -2,
            "ofendido": -2,
            "ofensor": -2,
            "ofende": -2,
            "off-line": -1,
            "oks": 2,
            "ameaçador": -2,
            "uma vez na vida": 3,
            "oportunidades": 2,
            "oportunidade": 2,
            "oprimida": -2,
            "opressivo": -2,
            "otimismo": 2,
            "otimista": 2,
            "optionless": -2,
            "clamor": -2,
            "outmaneuvered": -2,
            "ultraje": -3,
            "ultrajado": -3,
            "divulgação": 2,
            "excepcional": 5,
            "radiante": 4,
            "sobrecarga": -1,
            "negligenciado": -1,
            "reagir demais": -2,
            "exagerei": -2,
            "overreaction": -2,
            "overreacts": -2,
            "oversells": -2,
            "simplificação": -2,
            "simplificada": -2,
            "simplifica": -2,
            "simplificar": -2,
            "exagero": -2,
            "overstatements": -2,
            "excesso de peso": -1,
            "oxímoro": -1,
            "pânico": -3,
            "em pânico": -3,
            "pânicos": -3,
            "paraíso": 3,
            "paradoxo": -1,
            "perdão": 2,
            "perdoado": 2,
            "perdões": 2,
            "negociação": -1,
            "passiva": -1,
            "passivamente": -1,
            "patético": -2,
            "pagamento": -1,
            "paz": 2,
            "pacífico": 2,
            "pacificamente": 2,
            "pena": -2,
            "pensativo": 2,
            "perfeito": 3,
            "aperfeiçoado": 2,
            "perfeitamente": 3,
            "aperfeiçoa": 2,
            "perjúrio": -3,
            "autor": -2,
            "perpetradores": -2,
            "perplexo": -2,
            "perseguir": -2,
            "perseguidos": -2,
            "persegue": -2,
            "persegues": -2,
            "pessimismo": -2,
            "pessimista": -2,
            "petrificado": -2,
            "fóbica": -2,
            "pitoresco": 2,
            "acumular-se": -1,
            "melindre": -2,
            "despertado": -2,
            "mijo": -4,
            "pissing": -3,
            "lamentável": -2,
            "por favor": 1,
            "satisfeito": 2,
            "pronta": -2,
            "poção": -2,
            "envenenado": -2,
            "venenos": -2,
            "poluir": -2,
            "poluído": -2,
            "poluidor": -2,
            "poluidores": -2,
            "polui": -2,
            "pobre": -2,
            "mais pobres": -2,
            "popular": 3,
            "positivo": 2,
            "positivamente": 2,
            "possessivo": -2,
            "postergar": -1,
            "adiado": -1,
            "adia": -1,
            "adiamento": -1,
            "pobreza": -1,
            "poderoso": 2,
            "louvor": 3,
            "elogiou": 3,
            "louvores": 3,
            "louvando": 3,
            "orar": 1,
            "oração": 1,
            "reza": 1,
            "prblm": -2,
            "prblms": -2,
            "preparado": 1,
            "pressão": -1,
            "pressionado": -2,
            "faz de conta": -1,
            "fingindo": -1,
            "finge": -1,
            "impedido": -1,
            "prevenção": -1,
            "previne": -1,
            "picada": -5,
            "prisão": -2,
            "prisioneiro": -2,
            "prisioneiros": -2,
            "privilegiado": 2,
            "proactiva": 2,
            "problema": -2,
            "problemas": -2,
            "aproveitador": -2,
            "progresso": 2,
            "proeminente": 2,
            "promessa": 1,
            "prometido": 1,
            "promessas": 1,
            "promover": 1,
            "promoveu": 1,
            "promove": 1,
            "promoção": 1,
            "propaganda": -2,
            "processar": -1,
            "processados": -2,
            "prosecutes": -1,
            "prospecto": 1,
            "perspectivas": 1,
            "próspero": 3,
            "proteger": 1,
            "protegido": 1,
            "protege": 2,
            "protesto": -2,
            "manifestantes": -2,
            "protestando": -2,
            "protestos": -2,
            "orgulhoso": 2,
            "orgulhosamente": 2,
            "provocar": -1,
            "provocou": -1,
            "provoca": -1,
            "provocante": -1,
            "pseudociência": -3,
            "punido": -2,
            "pune": -2,
            "punitivo": -2,
            "trêmulo": -2,
            "questionável": -2,
            "questionou": -1,
            "interrogatório": -1,
            "racismo": -3,
            "racista": -3,
            "racistas": -3,
            "raivosa": -2,
            "chuvoso": -1,
            "discurso retórico": -3,
            "ranter": -3,
            "ranters": -3,
            "rants": -3,
            "estupro": -4,
            "estuprador": -4,
            "êxtase": 2,
            "arrebatados": 2,
            "êxtases": 2,
            "arrebatador": 4,
            "erupção cutânea": -2,
            "ratificado": 2,
            "alcance": 1,
            "alcançado": 1,
            "alcances": 1,
            "alcançando": 1,
            "tranqüilizar": 1,
            "tranquilizado": 1,
            "tranquiliza": 1,
            "tranquilizador": 2,
            "rebelião": -2,
            "recessão": -2,
            "imprudente": -2,
            "recomendado": 2,
            "recomenda": 2,
            "resgatado": 2,
            "recusar": -2,
            "recusou": -2,
            "recusa": -2,
            "arrepender": -2,
            "arrependimentos": -2,
            "lamentando": -2,
            "rejeitar": -1,
            "rejeitados": -1,
            "rejeitando": -1,
            "rejeita": -1,
            "alegrar": 4,
            "regozijou-se": 4,
            "regozija": 4,
            "descontraído": 2,
            "implacável": -1,
            "aliviar": 1,
            "aliviado": 2,
            "relevos": 1,
            "aliviando": 2,
            "saboreando": 2,
            "notável": 2,
            "remorso": -2,
            "repulsa": -1,
            "repelido": -2,
            "resgatar": 2,
            "resgates": 2,
            "ressentido": -2,
            "demitir-se": -1,
            "resignado": -1,
            "renunciando": -1,
            "renuncia": -1,
            "resoluto": 2,
            "resolver": 1,
            "resolvido": 1,
            "resolve": 1,
            "resolvendo": 2,
            "respeitado": 2,
            "responsável": 2,
            "responsivo": 2,
            "repousante": 2,
            "restaurar": 1,
            "restaurado": 1,
            "restaurações": 1,
            "restauração": 1,
            "restringir": -2,
            "restrito": -2,
            "restringindo": -2,
            "restrição": -2,
            "restringe": -2,
            "retida": -1,
            "retardar": -2,
            "retardado": -2,
            "retiro": -1,
            "vingança": -2,
            "vingativo": -2,
            "reverenciado": 2,
            "reviver": 2,
            "revive": 2,
            "recompensa": 2,
            "recompensado": 2,
            "recompensador": 2,
            "recompensas": 2,
            "rico": 2,
            "ridículo": -3,
            "equipamento": -1,
            "fraudada": -1,
            "direção correta": 3,
            "rigoroso": 3,
            "rigorosamente": 3,
            "tumulto": -2,
            "motins": -2,
            "risco": -2,
            "riscos": -2,
            "roubar": -2,
            "ladrão": -2,
            "túnica": -2,
            "robing": -2,
            "rouba": -2,
            "robusto": 2,
            "rofl": 4,
            "roflcopter": 4,
            "roflmao": 4,
            "rotfl": 4,
            "rotflmfao": 4,
            "rotflol": 4,
            "ruína": -2,
            "arruinado": -2,
            "arruinando": -2,
            "ruínas": -2,
            "sabotar": -2,
            "entristecer": -2,
            "entristecidos": -2,
            "infelizmente": -2,
            "seguro": 2,
            "seguramente": 1,
            "segurança": 1,
            "saliente": 1,
            "viçoso": -1,
            "sarcástico": -2,
            "salvar": 2,
            "salvou": 2,
            "golpe": -2,
            "scams": -2,
            "escândalo": -3,
            "escandaloso": -3,
            "escândalos": -3,
            "bode expiatório": -2,
            "bodes expiatórios": -2,
            "assustada": -2,
            "cético": -2,
            "ralhar": -2,
            "concha": 3,
            "grito": -2,
            "gritou": -2,
            "gritando": -2,
            "parafusado": -2,
            "estragado": -3,
            "desprezível": -4,
            "garantido": 2,
            "sedição": -2,
            "sedicioso": -2,
            "seduzido": -1,
            "autoconfiante": 2,
            "auto-iludidos": -2,
            "egoísta": -3,
            "egoísmo": -3,
            "frase": -2,
            "frases": -2,
            "sentença": -2,
            "sereno": 2,
            "sensual": 3,
            "vergonha": -2,
            "vergonhoso": -2,
            "compartilhar": 1,
            "compartilhado": 1,
            "ações": 1,
            "merda": -4,
            "shithead": -4,
            "cagado": -3,
            "chocante": -2,
            "choques": -2,
            "atirar": -1,
            "míope": -2,
            "miopia": -2,
            "escassez": -2,
            "megera": -4,
            "tímido": -2,
            "suspiro": -2,
            "significado": 1,
            "silenciamento": -1,
            "boba": -1,
            "atenciosamente": 2,
            "sincerest": 2,
            "sinceridade": 2,
            "pecaminoso": -3,
            "singleminded": -2,
            "ceticismo": -2,
            "cépticos": -2,
            "reduzir": -2,
            "cortados": -2,
            "barras": -2,
            "cortante": -2,
            "escravidão": -3,
            "insônia": -2,
            "liso": 2,
            "vigarista": 2,
            "slickest": 2,
            "lerdo": -2,
            "mais esperto": 2,
            "mais inteligente": 2,
            "borrão": -2,
            "sorrir": 2,
            "smiled": 2,
            "sorrisos": 2,
            "sorridente": 2,
            "poluição": -2,
            "sorrateiro": -1,
            "arrebitado": -2,
            "esnobado": -2,
            "snubbing": -2,
            "snubs": -2,
            "sóbrio": 1,
            "solene": -1,
            "sólido": 2,
            "solidariedade": 2,
            "solução": 1,
            "soluções": 1,
            "solving": 1,
            "algum tipo": 0,
            "acalmar": 3,
            "acalmada": 3,
            "sofisticado": 2,
            "dolorido": -1,
            "tristeza": -2,
            "spam": -2,
            "spammer": -3,
            "spammers": -3,
            "faísca": 3,
            "brilhos": 3,
            "espumante": 3,
            "especulativo": -2,
            "espírito": 1,
            "sem vida": -2,
            "rancoroso": -2,
            "esplêndido": 3,
            "squelched": -1,
            "facada": -2,
            "esfaqueado": -2,
            "estável": 2,
            "punhaladas": -2,
            "tenda": -2,
            "estagnou": -2,
            "stalling": -2,
            "energia": 2,
            "debandada": -2,
            "morrer de fome": -2,
            "faminto": -2,
            "morre de fome": -2,
            "morrendo de fome": -2,
            "firme": 2,
            "roubos de bola": -2,
            "estereótipo": -2,
            "estereotipado": -2,
            "abafou": -1,
            "estimular": 1,
            "estimulado": 1,
            "estimula": 1,
            "estimulando": 2,
            "mesquinho": -2,
            "roubado": -2,
            "pare": -1,
            "parado": -1,
            "parando": -1,
            "paradas": -1,
            "direto": 1,
            "estranhamente": -1,
            "estrangulada": -2,
            "força": 2,
            "fortalecer": 2,
            "fortalecido": 2,
            "fortalecimento": 2,
            "fortalece": 2,
            "estressado": -2,
            "estressor": -2,
            "estressores": -2,
            "greve": -1,
            "grevistas": -2,
            "greves": -2,
            "forte": 2,
            "mais forte": 2,
            "golpeado": -1,
            "lutava": -2,
            "lutas": -2,
            "lutando": -2,
            "teimoso": -2,
            "atordoado": -2,
            "estupidamente": -2,
            "suave": 2,
            "substancial": 1,
            "substancialmente": 1,
            "subversivo": -2,
            "bem sucedido": 3,
            "sugar": -3,
            "é uma merda": -3,
            "sofrer": -2,
            "sofrimento": -2,
            "sofre": -2,
            "suicida": -2,
            "suicídio": -2,
            "processando": -2,
            "amuado": -2,
            "mal-humorado": -2,
            "taciturno": -2,
            "luz do sol": 2,
            "super": 3,
            "soberbo": 5,
            "superior": 2,
            "suportado": 2,
            "suporte": 1,
            "apoiantes": 1,
            "que apoia": 1,
            "suportes": 2,
            "sobrevivido": 2,
            "sobrevivendo": 2,
            "sobrevivente": 2,
            "suspeito": -2,
            "suspeita": -1,
            "suspeitando": -1,
            "suspeitos": -1,
            "suspender": -1,
            "suspenso": -1,
            "jurar": -2,
            "juramento": -2,
            "jura": -2,
            "doce": 2,
            "rápido": 2,
            "rapidamente": 2,
            "embuste": -3,
            "swindles": -3,
            "burla": -3,
            "simpatia": 2,
            "tard": -2,
            "lágrimas": -2,
            "tenro": 2,
            "tenso": -2,
            "tensão": -1,
            "terrivel": -3,
            "terrivelmente": -3,
            "formidável": 4,
            "aterrorizado": -3,
            "terror": -3,
            "aterrorizar": -3,
            "aterrorizou": -3,
            "aterroriza": -3,
            "obrigado": 2,
            "espinhoso": -2,
            "irrefletido": -2,
            "ameaçar": -2,
            "ameaçados": -2,
            "ameaças": -2,
            "excitados": 5,
            "frustrados": -2,
            "traversins": -2,
            "timorato": -2,
            "cansado": -2,
            "tits": -2,
            "tolerante": 2,
            "desdentado": -2,
            "topo": 2,
            "topos": 2,
            "rasgado": -2,
            "tortura": -4,
            "torturados": -4,
            "torturas": -4,
            "torturando": -4,
            "totalitário": -2,
            "totalitarismo": -2,
            "angariar": -2,
            "apregoados": -2,
            "touting": -2,
            "touts": -2,
            "tragédia": -2,
            "trágico": -2,
            "tranquilo": 2,
            "armadilha": -1,
            "trauma": -3,
            "traumático": -3,
            "caricatura": -2,
            "traiçoeiro": -3,
            "tesouro": 2,
            "tesouros": 2,
            "trapaça": -2,
            "triunfo": 4,
            "triunfante": 4,
            "verdade": 2,
            "confiar em": 1,
            "tumor": -2,
            "twat": -5,
            "feio": -3,
            "inaceitável": -2,
            "pouco apreciado": -2,
            "desaprovado": -2,
            "inconsciente": -2,
            "inacreditável": -1,
            "descrente": -1,
            "imparcial": 2,
            "incerto": -1,
            "obscuro": -1,
            "desconfortável": -2,
            "não confirmado": -1,
            "não convencido": -1,
            "creditado": -1,
            "subestimar": -1,
            "subestimado": -1,
            "subestima": -1,
            "subestimando": -1,
            "minar": -2,
            "minado": -2,
            "indigno": -2,
            "indesejável": -2,
            "desemprego": -2,
            "desigual": -1,
            "inigualável": 2,
            "antiético": -2,
            "injusto": -2,
            "desfocado": -2,
            "não realizado": -2,
            "pouco saudável": -2,
            "unificado": 1,
            "pouco inteligente": -2,
            "unido": 1,
            "antipático": -2,
            "mal amada": -2,
            "incomparável": 1,
            "desmotivado": -2,
            "não profissional": -2,
            "unresearched": -2,
            "simples": -2,
            "instável": -2,
            "imparável": 2,
            "sem suporte": -2,
            "untarnished": 2,
            "não desejado": -2,
            "chateado": -2,
            "viradas": -2,
            "urgente": -1,
            "utilidade": 2,
            "sem utilidade": -2,
            "inutilidade": -2,
            "vago": -2,
            "validar": 1,
            "validado": 1,
            "valida": 1,
            "validando": 1,
            "veredito": -1,
            "veredictos": -1,
            "investido": 1,
            "vexação": -2,
            "vexatório": -2,
            "vibrante": 3,
            "vicioso": -2,
            "vítima": -3,
            "vitimar": -3,
            "vitimados": -3,
            "vitimiza": -3,
            "victimizing": -3,
            "vítimas": -3,
            "vigilância": 3,
            "vil": -3,
            "vindicar": 2,
            "vindicado": 2,
            "vindicação": 2,
            "violar": -2,
            "violados": -2,
            "viole": -2,
            "violando": -2,
            "violência": -3,
            "violento": -3,
            "virtuoso": 2,
            "virulento": -2,
            "visão": 1,
            "visionário": 3,
            "visioning": 1,
            "visões": 1,
            "vitalidade": 3,
            "vitamina": 1,
            "vitriólico": -3,
            "vivaz": 3,
            "vociferador": -1,
            "vulnerabilidade": -2,
            "vulnerável": -2,
            "ir embora": -2,
            "punheteiro": -3,
            "quer": 1,
            "guerra": -2,
            "caloroso": 1,
            "calor": 2,
            "advertir": -2,
            "avisou": -2,
            "atenção": -3,
            "avisos": -3,
            "adverte": -2,
            "desperdício": -1,
            "desperdiçado": -2,
            "desperdiçando": -2,
            "vacilante": -1,
            "fraco": -2,
            "fraqueza": -2,
            "riqueza": 3,
            "choro": -2,
            "esquisito": -2,
            "bem vinda": 2,
            "boas-vindas": 2,
            "congratula-se": 2,
            "caprichoso": 1,
            "cal": -3,
            "prostituta": -4,
            "malvado": -2,
            "viúva": -1,
            "boa vontade": 2,
            "ganhar": 4,
            "vencedora": 4,
            "vitórias": 4,
            "winwin": 3,
            "desejos": 1,
            "desejando": 1,
            "retirada": -3,
            "desolado": -2,
            "lastimável": -3,
            "cortejar": 3,
            "woohoo": 3,
            "wooo": 4,
            "woow": 4,
            "usado": -1,
            "preocupado": -3,
            "preocupação": -3,
            "preocupante": -3,
            "pior": -3,
            "piorar": -3,
            "piorou": -3,
            "piora": -3,
            "que vale a pena": 2,
            "digno": 2,
            "uau": 4,
            "wowow": 4,
            "wowww": 4,
            "colérico": -3,
            "errado": -2,
            "injustiçado": -2,
            "wtf": -4,
            "sim": 1,
            "ânsia": 1,
            "yeees": 2,
            "jovem": 2,
            "nojento": -2,
            "gostoso": 3,
            "fanático": -2,
            "zelotes": -2,
            "zeloso": 2
        };

        return this;
    }

    _createClass(BotAfinnHelper, [{
        key: "analyze",
        value: function analyze(phrase, inject) {
            // Parse arguments
            if (typeof phrase === 'undefined') phrase = '';

            // Storage objects
            var tokens = bot.tokenize(phrase),
                score = 0,
                words = [],
                positive = [],
                negative = [];

            // Iterate over tokens
            var len = tokens.length;
            while (len--) {
                var obj = tokens[len];
                var item = this.words[obj];
                console.log(['item > ', item]);
                if (!this.words.hasOwnProperty(obj)) continue;

                words.push(obj);
                if (item > 0) positive.push(obj);
                if (item < 0) negative.push(obj);

                score += item;
            }

            // Handle optional async interface
            var result = {
                score: score,
                comparative: score / tokens.length,
                tokens: tokens,
                words: words,
                positive: positive,
                negative: negative
            };

            return result;
        }
    }]);

    return BotAfinnHelper;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BotFile = function () {
    function BotFile(filename) {
        _classCallCheck(this, BotFile);

        this.file = filename;
    }

    _createClass(BotFile, [{
        key: "download",
        value: function download(content) {
            var json = JSON.stringify(content);
            var blob = new Blob([json], {
                type: "text/json"
            });
            var url = window.URL.createObjectURL(blob);
            var a = document.createElement("a");
            var filename = filename || this.file;
            document.body.appendChild(a);
            a.style = "display: none";
            a.href = url;
            a.download = filename;
            a.click();
            window.URL.revokeObjectURL(url);
        }
    }, {
        key: "csv",
        value: function csv(content) {
            var csv = [];
            for (var x in content) {
                csv.push(content[x].ngram + ',' + content[x].frequency);
            }
            csv = csv.join("\r\n");
            var blob = new Blob([csv], {
                type: "text/csv"
            });
            var url = window.URL.createObjectURL(blob);
            var a = document.createElement("a");
            var filename = filename || this.file;
            document.body.appendChild(a);
            a.style = "display: none";
            a.href = url;
            a.download = filename;
            a.click();
            window.URL.revokeObjectURL(url);
        }
    }]);

    return BotFile;
}();
/**
 * Based on Petter Törnberg's
 * @see http://sentiwordnet.isti.cnr.it/code/SentiWordNetDemoCode.java
 * @see http://nmis.isti.cnr.it/sebastiani/Publications/LREC10.pdf
 * @see http://sentiwordnet.isti.cnr.it/
 * @see http://sentiwordnet.isti.cnr.it/SentiWordNet_3.0.0.tgz
 *
 * @author Thiago Bocchile <tykoth@gmail.com>
 */
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SentiWordNet = function SentiWordNet(string) {
	_classCallCheck(this, SentiWordNet);

	try {
		var lines = string.split('\n');
		for (var lineNumber in lines) {

			var line = lines[lineNumber];

			if (line.trim()[0] != "#") {
				var data = line.split("\t");
				var wordTypeMarker = data[0];

				if (data.length != 6) {
					throw new IllegalArgumentException("Incorrect tabulation format in file, line: " + lineNumber);
				}

				// Calculate synset score as score = PosS - NegS
				var synsetScorePos = data[2];
				var synsetScoreNeg = data[3];
				var synsetScore = parseFloat(synsetScorePos) - parseFloat(synsetScoreNeg);

				// Get all Synset terms
				var synTermsSplit = data[4].split(" ");

				var synDescriptions = data[data.length - 1].split(";");
				var synDefinition = '';
				var synSample = '';
				if (synDescriptions) {
					synDefinition = synDescriptions[0];

					if (synDescriptions[1] && synDescriptions[1]) {
						/// ??!?!?!?!
						synSample = synDescriptions[1];
					}
				}

				// Go through all terms of current synset.
				for (var x in synTermsSplit) {
					var _console$log;

					var synTermSplit = synTermsSplit[x];

					// Get synterm and synterm rank
					var synTermAndRank = synTermSplit.split("#");
					var synTerm = synTermAndRank[0];

					var synTermRank = parseInt(synTermAndRank[1]);
					// What we get here is a map of the type:
					// term -> {score of synset#1, score of synset#2...}

					console.log((_console$log = {
						word: synTerm,
						verb: wordTypeMarker === 'v' ? 1 : 0
					}, _defineProperty(_console$log, 'verb', wordTypeMarker === 'v' ? 1 : 0), _defineProperty(_console$log, 'rank', synTermRank), _defineProperty(_console$log, 'score', synsetScore), _defineProperty(_console$log, 'scorePos', synsetScorePos), _defineProperty(_console$log, 'scoreNeg', synsetScoreNeg), _defineProperty(_console$log, 'definition', synDefinition), _defineProperty(_console$log, 'sample', synSample), _console$log));
				}
			}
		}
	} catch (e) {
		console.log(e);
	} finally {
		console.log('finally');
	}
};
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WordNet = function WordNet(string) {
  _classCallCheck(this, WordNet);

  try {
    var lines = string.split('\n');
    for (var lineNumber in lines) {

      var line = lines[lineNumber];

      if (line.trim()[0] != "#") {
        var data = line.split("\t");
        var wordTypeMarker = data[0];

        // Calculate synset score as score = PosS - NegS
        var synsetScorePos = data[2];
        var synsetScoreNeg = data[3];
        var synsetScore = parseFloat(synsetScorePos) - parseFloat(synsetScoreNeg);

        // Get all Synset terms
        var synTermsSplit = data[4].split(" ");

        var synDescriptions = data[data.length - 1].split(";");
        var synDefinition = '';
        var synSample = '';
        if (synDescriptions) {
          synDefinition = synDescriptions[0];

          if (synDescriptions[1] && synDescriptions[1]) {
            /// ??!?!?!?!
            synSample = synDescriptions[1];
          }
        }

        // Go through all terms of current synset.
        for (var x in synTermsSplit) {
          var _console$log;

          var synTermSplit = synTermsSplit[x];

          // Get synterm and synterm rank
          var synTermAndRank = synTermSplit.split("#");
          var synTerm = synTermAndRank[0];

          var synTermRank = parseInt(synTermAndRank[1]);
          // What we get here is a map of the type:
          // term -> {score of synset#1, score of synset#2...}

          console.log((_console$log = {
            word: synTerm,
            verb: wordTypeMarker === 'v' ? 1 : 0
          }, _defineProperty(_console$log, 'verb', wordTypeMarker === 'v' ? 1 : 0), _defineProperty(_console$log, 'rank', synTermRank), _defineProperty(_console$log, 'score', synsetScore), _defineProperty(_console$log, 'scorePos', synsetScorePos), _defineProperty(_console$log, 'scoreNeg', synsetScoreNeg), _defineProperty(_console$log, 'definition', synDefinition), _defineProperty(_console$log, 'sample', synSample), _console$log));
        }
      }
    }
  } catch (e) {
    console.log(e);
  } finally {
    console.log('finally');
  }
};
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotJavascriptInterpreter = function (_BotInterpreter) {
    _inherits(BotJavascriptInterpreter, _BotInterpreter);

    function BotJavascriptInterpreter() {
        _classCallCheck(this, BotJavascriptInterpreter);

        return _possibleConstructorReturn(this, (BotJavascriptInterpreter.__proto__ || Object.getPrototypeOf(BotJavascriptInterpreter)).apply(this, arguments));
    }

    _createClass(BotJavascriptInterpreter, [{
        key: "interpret",
        value: function interpret(input) {
            //console.log(`Validar se '${input}' é um javascript valido`);
        }
    }]);

    return BotJavascriptInterpreter;
}(BotInterpreter);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotRegexClassMethodsInterpreter = function (_BotInterpreter) {
    _inherits(BotRegexClassMethodsInterpreter, _BotInterpreter);

    function BotRegexClassMethodsInterpreter() {
        _classCallCheck(this, BotRegexClassMethodsInterpreter);

        return _possibleConstructorReturn(this, (BotRegexClassMethodsInterpreter.__proto__ || Object.getPrototypeOf(BotRegexClassMethodsInterpreter)).apply(this, arguments));
    }

    _createClass(BotRegexClassMethodsInterpreter, [{
        key: 'interpret',
        value: function interpret(input) {

            for (var x in this.matches) {

                this.matches[x].regexp.lastIndex = 0;
                var exec = this.matches[x].regexp.exec(input.trim());

                if (exec) {

                    exec.shift(); // remove the full sentence to build arguments
                    exec = exec.map(function (a) {
                        // console.log([a, typeof a, typeof a === 'string', typeof a === 'numeric']);
                        if (typeof a === 'string') {
                            a = a.trim();
                        }

                        return a;
                    });
                    // console.log([
                    //   this.matches[x].source,
                    //   this.matches[x].regexp,
                    //   exec
                    // ]);
                    // console.log(this.matches[x].callback);
                    this.queue(this.matches[x].callback, exec);
                }
            }

            return this;
        }
    }]);

    return BotRegexClassMethodsInterpreter;
}(BotInterpreter);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotWindowCommandsV1Interpreter = function (_BotInterpreter) {
    _inherits(BotWindowCommandsV1Interpreter, _BotInterpreter);

    function BotWindowCommandsV1Interpreter() {
        _classCallCheck(this, BotWindowCommandsV1Interpreter);

        return _possibleConstructorReturn(this, (BotWindowCommandsV1Interpreter.__proto__ || Object.getPrototypeOf(BotWindowCommandsV1Interpreter)).apply(this, arguments));
    }

    _createClass(BotWindowCommandsV1Interpreter, [{
        key: 'interpret',
        value: function interpret(input) {
            if ("commands" in window) {
                //console.log("Window Interpretable");

                for (var x in window.commands) {

                    var match = new RegExp(x, 'gi').exec(input.trim());

                    //console.log([x, match]);
                    if (match) {
                        window.commands[x].apply(this, match);
                        this.matchList.push(x);
                        this.executions++;
                        return;
                    }
                }
            }
        }
    }]);

    return BotWindowCommandsV1Interpreter;
}(BotInterpreter);
'use strict';
/**
 * @extends BotSense
 * @prototype
 * use microphone or text input
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotHearingSense = function (_BotSense) {
  _inherits(BotHearingSense, _BotSense);

  function BotHearingSense() {
    _classCallCheck(this, BotHearingSense);

    return _possibleConstructorReturn(this, (BotHearingSense.__proto__ || Object.getPrototypeOf(BotHearingSense)).apply(this, arguments));
  }

  _createClass(BotHearingSense, [{
    key: 'on',
    value: function on() {}
  }, {
    key: 'off',
    value: function off() {}
  }]);

  return BotHearingSense;
}(BotSense);
'use strict';
/**
 * @see https://developer.github.com/v3/search/
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotGithubService = function (_BotService) {
  _inherits(BotGithubService, _BotService);

  function BotGithubService(searchQuery, limit, types) {
    _classCallCheck(this, BotGithubService);

    var _this = _possibleConstructorReturn(this, (BotGithubService.__proto__ || Object.getPrototypeOf(BotGithubService)).call(this));

    _this.url = 'https://api.github.com/search/repositories?q=' + searchQuery;
    _this.requestUrl = _this.url;
    return _this;
  }

  _createClass(BotGithubService, [{
    key: 'example',
    value: function example() {
      this.get().then(function (data) {
        bot.language = 'en';
        bot.param('name', data.items[0].name);
        bot.param('avatar', data.items[0].owner.avatar_url);
        bot.param('notification.callback', function () {
          window.open(data.items[0].html_url);
        });
        bot.speak(data.items[0].name);
      });
    }
  }, {
    key: 'example2',
    value: function example2() {
      this.get().then(function (data) {

        bot.language = 'en';
        data.items.map(function (item, index) {
          if (index < 10) {
            bot.param('name', data.items[index].name);
            bot.param('avatar', data.items[index].owner.avatar_url);
            bot.param('notification.callback', function () {
              window.open(data.items[index].html_url);
            });
            bot.speak(data.items[index].name);
          }
        });
      });
    }
  }]);

  return BotGithubService;
}(BotService);
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotGoogleService = function (_BotService) {
  _inherits(BotGoogleService, _BotService);

  function BotGoogleService() {
    _classCallCheck(this, BotGoogleService);

    return _possibleConstructorReturn(this, (BotGoogleService.__proto__ || Object.getPrototypeOf(BotGoogleService)).apply(this, arguments));
  }

  return BotGoogleService;
}(BotService);
/*
var URL ="https://api.stackexchange.com/2.2/search?order=desc&sort=activity&tagged=firebase&site=pt.stackoverflow";
$.ajax({
    dataType: 'jsonp',
    jsonp: 'jsonp',
    url: URL,
    success: function(val) {
       console.log(val);
    },
    error: function(val) {
        console.log('error');
        console.log(arguments);
    }
});
 */
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotStackExchangeService = function (_BotService) {
    _inherits(BotStackExchangeService, _BotService);

    function BotStackExchangeService(searchQuery, site) {
        var _ret;

        _classCallCheck(this, BotStackExchangeService);

        //this.start = (start || 1);
        var _this = _possibleConstructorReturn(this, (BotStackExchangeService.__proto__ || Object.getPrototypeOf(BotStackExchangeService)).call(this));

        _this.site = site || 'pt.stackoverflow';
        _this.searchUrl = '';

        var url = 'https://api.stackexchange.com/2.2/search?';
        url += 'order=desc&sort=activity&';
        url += 'site=' + _this.site;
        _this.searchUrl = url + '&intitle=' + searchQuery;
        _this.requestUrl = _this.searchUrl;
        return _ret = _this, _possibleConstructorReturn(_this, _ret); // ????
    }

    return BotStackExchangeService;
}(BotService);
// busca
//http://pt.wikihow.com/api.php?action=query&format=json&list=search&srsearch=escrever+um+livro
//http://pt.wikihow.com/api.php?action=query&format=json&titles=Escrever%20um%20Livro&prop=revisions&rvprop=content
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotWikihowService = function (_BotService) {
  _inherits(BotWikihowService, _BotService);

  function BotWikihowService() {
    _classCallCheck(this, BotWikihowService);

    var _this = _possibleConstructorReturn(this, (BotWikihowService.__proto__ || Object.getPrototypeOf(BotWikihowService)).call(this));

    var wh = "http://pt.wikihow.com/api.php?";
    _this.pageUrl = wh + "action=query&format=json&prop=revisions&rvprop=content&titles=";
    _this.searchUrl = wh + "action=query&format=json&list=search&srsearch=";

    _this.data = [];
    //return this;
    return _this;
  }

  _createClass(BotWikihowService, [{
    key: "search",
    value: function search(term) {
      var self = this;
      return new Promise(function (resolve, reject) {
        $.getJSON(self.searchUrl + encodeURIComponent(term) + "&callback=?", function (data) {
          console.log(data.query.search);
          resolve(data.query.search[0].title);
        });
      });
    }
  }, {
    key: "get",
    value: function get(title) {
      var self = this;
      return new Promise(function (resolve, reject) {
        $.getJSON(self.pageUrl + title + "&callback=?", function (data) {
          var texto = data.query.pages[Object.keys(data.query.pages)[0]].revisions[0]['*'];
          texto = texto.replace(new RegExp("{{(([^}|]+)\\|)+" + this.lng + "}}", "g"), "($2)");
          texto = texto.replace(/{{[^}]*}}/g, "");

          texto = texto.replace(/<(\w+)>[^<]*<\/\1>/gi, "").trim();
          texto = texto.replace(/\[\[Image:(.*)\]\]/gi, "").trim();
          texto = texto.replace(/^\=\=([\w]+)\=\=/gi, "$1").trim();
          texto = texto.replace(/^\#/gi, "").trim();
          texto = texto.replace(/^\*/gi, "").trim();
          texto = texto.replace(/={1,3}([^=]+)={1,3}/gi, '$1').trim();;
          texto = texto.replace(/[\*\#]/gi, "").trim();;
          texto = texto.replace(/\[\[Imagem:(.*)\]\]/gi, '').trim();;;
          resolve(texto);
        });
      });
    }
  }]);

  return BotWikihowService;
}(BotService);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotWikipediaService = function (_BotService) {
    _inherits(BotWikipediaService, _BotService);

    function BotWikipediaService(item) {
        var _ret;

        _classCallCheck(this, BotWikipediaService);

        var _this = _possibleConstructorReturn(this, (BotWikipediaService.__proto__ || Object.getPrototypeOf(BotWikipediaService)).call(this));

        var wd = "https://www.wikidata.org/w/api.php?";
        var wp = "https://pt.wikipedia.org/w/api.php?"; // list of iso-code = ? ----------------<
        var aw = "action=wbgetentities"; // rather wdpoint
        var aq = "action=query"; // ?rather wppage
        var ts = "&sites=ptwiki"; // wd only&required. // list of wiki-code = ? --------------<
        var t = "&titles="; // target, wd|wp
        var i = "Dragon"; //item, wd|wp
        var l = "&languages=zh|zh-classical|zh-cn|zh-hans|zh-hant|zh-hk|zh-min-nan|zh-mo|zh-my|zh-sg|zh-tw|fr"; // wdpoint only
        var ps = "&props=sitelinks|labels|aliases|descriptions"; // wdpoint only
        var p = "&prop=extracts&exintro&explaintext&exsentences=10"; // wppage only
        var r = "&redirects&converttitles"; // wppage only
        var c = "&callback=?"; // wd|wp
        var f = "&format=json"; // wd|wp

        _this.wikidataurlurl = wd + aw + ts + t + item + l + ps + c + f;
        _this.url = _this.wikipediaurl = wp + aq + t + item + p + r + c + f;
        _this.requestUrl = _this.url;
        return _ret = _this, _possibleConstructorReturn(_this, _ret);
    }

    _createClass(BotWikipediaService, [{
        key: "get",
        value: function get() {
            var self = this;
            return new Promise(function (resolve, reject) {
                $.getJSON(self.requestUrl, resolve, reject);
            });
        }
    }]);

    return BotWikipediaService;
}(BotService);
// busca
//http://pt.wikihow.com/api.php?action=query&format=json&list=search&srsearch=escrever+um+livro
//http://pt.wikihow.com/api.php?action=query&format=json&titles=Escrever%20um%20Livro&prop=revisions&rvprop=content
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotWikitionaryService = function (_BotService) {
  _inherits(BotWikitionaryService, _BotService);

  function BotWikitionaryService() {
    _classCallCheck(this, BotWikitionaryService);

    var _this = _possibleConstructorReturn(this, (BotWikitionaryService.__proto__ || Object.getPrototypeOf(BotWikitionaryService)).call(this));

    var wh = "http://pt.wiktionary.org/w/api.php?";
    _this.pageUrl = wh + "action=query&format=json&prop=revisions&rvprop=content&titles=";
    _this.searchUrl = wh + "action=query&format=json&list=search&utf8&srprop=&srsearch=";
    _this.randomUrl = wh + "action=query&format=json&list=random&utf8&rnnamespace=0&grnnamespace=0&rnlimit=";

    _this.data = [];
    return _this;
  }

  _createClass(BotWikitionaryService, [{
    key: "search",
    value: function search(term) {
      var self = this;
      return new Promise(function (resolve, reject) {
        $.getJSON(self.searchUrl + encodeURIComponent(term) + "&callback=?", function (data) {
          console.log(data.query.search);
          resolve(data.query.search[0].title);
        });
      });
    }
  }, {
    key: "getRandom",
    value: function getRandom(num) {
      var self = this;
      var num = num || 1;
      return new Promise(function (resolve, reject) {
        $.getJSON(self.randomUrl + num + "&callback=?", function (data) {
          resolve(data.query.random);
        });
      });
    }
  }, {
    key: "get",
    value: function get(title, raw) {
      var self = this;
      var raw = raw || false;
      return new Promise(function (resolve, reject) {
        $.getJSON(self.pageUrl + title + "&callback=?", function (data) {

          try {
            console.log(['wiktionary data', data]);
            var texto = data.query.pages[Object.keys(data.query.pages)[0]].revisions[0]['*'];
          } catch (e) {
            return reject(data);
          }

          if (raw === true) {
            return resolve(texto);
          }

          texto = texto.replace(new RegExp("{{(([^}|]+)\\|)+" + this.lng + "}}", "g"), "($2)");
          texto = texto.replace(/{{[^}]*}}/g, "");

          texto = texto.replace(/<(\w+)>[^<]*<\/\1>/gi, "").trim();
          texto = texto.replace(/\[\[Image:(.*)\]\]/gi, "").trim();
          texto = texto.replace(/^\=\=([\w]+)\=\=/gi, "$1").trim();
          texto = texto.replace(/^\#/gi, "").trim();
          texto = texto.replace(/^\*/gi, "").trim();
          texto = texto.replace(/={1,3}([^=]+)={1,3}/gi, '$1').trim();;
          texto = texto.replace(/[\*\#]/gi, "").trim();;
          texto = texto.replace(/\[\[Imagem:(.*)\]\]/gi, '').trim();;;
          // texto = wikicleanup(texto);
          return resolve(texto);
        });
      });
    }
  }]);

  return BotWikitionaryService;
}(BotService);

var wikicleanup = function wikicleanup(def) {

  def = def.replace(new RegExp("{{(([^}|]+)\\|)+" + this.lng + "}}", "g"), "($2)");
  def = def.replace(/{{[^}]*}}/g, "");

  def = def.replace(/<(\w+)>[^<]*<\/\1>/, "").trim();

  if (/^\s*\.*$/.test(def)) return this.sendErr(errors.notFound, word);

  def = def.replace(/'''([^']+)'''/g, this.options.formatted ? "<span style='bold'>$1</span>" : "$1");
  def = def.replace(/''([^']+)''/g, this.options.formatted ? "<span style='italic'>$1</span>" : "$1");

  switch (this.options.hyperlinks) {
    case "brackets":
      break;
    case "html":
      var url = "https://" + this.lng + ".wiktionary.org/wiki/";
      def = def.replace(/\[\[([^\]|]+)(\|)([^\]]+)\]\]/g, "<a href='" + url + "$1' target='_blank'>$3</a>");
      def = def.replace(/\[\[([^\]]+)\]\]/g, "<a href='" + url + "$1' target='_blank'>$1</a>");
      break;
    case "none":
    default:
      def = def.replace(/\[\[([^\]|]+\|)*([^\]]+)\]\]/g, "$2");
  }

  return def.trim();
  // this.callback({
  //   "word": word,
  //   "category": cat.replace(/\|.*/, ""),
  //   "definition": def.trim()
  // });
};


'use strict';
/**
 * @extends BotController
 */
/*

 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotBelievesController = function (_BotController) {
  _inherits(BotBelievesController, _BotController);

  function BotBelievesController() {
    _classCallCheck(this, BotBelievesController);

    return _possibleConstructorReturn(this, (BotBelievesController.__proto__ || Object.getPrototypeOf(BotBelievesController)).apply(this, arguments));
  }

  _createClass(BotBelievesController, [{
    key: "^você acredita$",
    value: function vocAcredita$() {
      bot.speak('Acredito');
    }

    //http://regexr.com/3fd3n

  }, {
    key: "^(porque )?(voc[eê]) (que )?(n[aã]o )?acredita (ou |em )?(.*)$",
    value: function porqueVocEQueNAOAcreditaOuEm$(question, voce, que, nao, em, objeto) {

      var plus_or_minus = Math.random() < 0.5 ? -1 : 1;
      var chances_de_acreditar = Math.random() * plus_or_minus;

      window.localStorage['bot.believes.in.' + objeto] = parseInt(window.localStorage['bot.believes.in.' + objeto]) + chances_de_acreditar || chances_de_acreditar;
      var acredita = window.localStorage['bot.believes.in.' + objeto];

      var acredita_chances = Math.round(acredita * 100) / 100;

      //console.log(question, nao, objeto);

      if (question && nao && acredita >= 0.5) {
        bot.speak('Na verdade, acredito.');
      } else if (question && nao && acredita < 0.5) {
        bot.speak('Por conta de um resultado negativo de ' + acredita);
      } else if (question && typeof nao === 'undefined' && acredita >= 0.5) {
        bot.speak('Por conta de um resultado positivo de ' + acredita);
      } else if (question && typeof nao === 'undefined' && acredita < 0.5) {
        bot.speak('Na verdade, n\xE3o acredito.');
      } else if (acredita > 0.5) {
        bot.speak('Acredito, com ' + acredita_chances + '% de chances.');
      } else {
        bot.speak('N\xE3o acredito, chances ' + acredita_chances + '%.');
      }
    }
  }, {
    key: "^você acredita em (.*)$",
    value: function vocAcreditaEm$() {}
  }]);

  return BotBelievesController;
}(BotController);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotIsController = function (_BotController) {
    _inherits(BotIsController, _BotController);

    function BotIsController() {
        _classCallCheck(this, BotIsController);

        return _possibleConstructorReturn(this, (BotIsController.__proto__ || Object.getPrototypeOf(BotIsController)).apply(this, arguments));
    }

    _createClass(BotIsController, [{
        key: "^voc[eê] [eé](?: um| uma)? (.*)$",
        value: function vocEEUmUma$(param) {
            window.localStorage['bot.is.' + param] = parseInt(window.localStorage['bot.is.' + param]) + 1 || 1;

            /**
             * @todo filtro de elogios.
             */

            var recursiveResearch = function recursiveResearch(data) {

                if (typeof data.result.value.sentiment == 'undefined' && typeof data.result.value.source != 'undefined' && data.result.value.id != data.result.value.source) {
                    console.log('sem sentimentos, procurando na fonte');
                    return botDb.get('words', data.result.value.source).then(recursiveResearch);
                } else if (data.result.value.sentiment) {
                    return data.result.value.sentiment;
                } else {
                    return 0;
                }
            };

            botDb.get('words.word.' + param).then(recursiveResearch).then(function (val) {
                console.log(val);
                bot.speak('Obrigada');
            });

            // var elogios = ['inteligente', 'bonita', 'linda'];
            // if (elogios.indexOf(param) >= 0) {
            //     bot.speak('Obrigada');
            // }
            //
            // var insultos = ['burra', 'idiota', 'inútil'];
            // if (insultos.indexOf(param) >= 0) {
            //     bot.speak('Comportamento inadequado.');
            // } else {
            //     bot.speak('Ok, sem problemas.');
            // }
        }
    }, {
        key: "^o que você é$",
        value: function oQueVoc$(param) {

            var keys = Object.keys(window.localStorage).filter(function (a) {
                return a.match(/bot\.is\./gi);
            }).map(function (a) {
                return a.replace('bot.is.', '');
            });

            var sortable = [];
            for (var param in keys) {
                sortable.push([keys[param], window.localStorage['bot.is.' + keys[param]]]);
            }sortable.sort(function (a, b) {
                return a[1] < b[1];
            });
            bot.speak('Você diz com frequencia que sou ' + sortable[0][0]);

            // diz randomicamente
            var botis = keys[Math.floor(Math.random() * keys.length)];
            var value = window.localStorage['bot.is.' + botis];
            bot.speak('Voc\xEA tamb\xE9m diz que sou ' + botis);
        }
    }]);

    return BotIsController;
}(BotController);
'use strict';
/**
 * BotLikesController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotLikesController = function (_BotController) {
    _inherits(BotLikesController, _BotController);

    function BotLikesController() {
        _classCallCheck(this, BotLikesController);

        return _possibleConstructorReturn(this, (BotLikesController.__proto__ || Object.getPrototypeOf(BotLikesController)).apply(this, arguments));
    }

    _createClass(BotLikesController, [{
        key: "^você gosta$",
        value: function vocGosta$() {
            bot.speak('Gosto do que?');
        }
    }, {
        key: "^(o que )?(voc[eê]|tu|cê) (ainda )?(que )?(realmente )?(n[ãa]o )?(gosta |curte |prefere )(mesmo)?(d[eoa](l[ea])?|em|mais|nem|muito|isso)?( )?(d[eoa](l[ea])?)?((.*) ou (de )?(.*))?(.*)?(eu prefiro (.*))?$",
        value: function oQueVocETuCAindaQueRealmenteNAOGostaCurtePrefereMesmoDEoaLEaEmMaisNemMuitoIssoDEoaLEaOuDeEuPrefiro$(_what, _you, _yet, _what1, _really, _not, _likes, _really2, _of, _himher) {

            //14 e 16 - batata ou estudar
            console.log(['batata ou estudar?', arguments]);
            if (arguments[14] && arguments[16]) {
                var objeto1 = arguments[14];
                var objeto2 = arguments[16];

                if (window.localStorage['bot.likes.' + objeto1] && window.localStorage['bot.likes.' + objeto2]) {
                    var resposta = window.localStorage['bot.likes.' + objeto1] > window.localStorage['bot.likes.' + objeto2] ? objeto1 : objeto2;
                    bot.speak(resposta);
                } else {
                    bot.speak('Eu ainda n\xE3o decidi se gosto mais de ' + objeto1 + ' ou de ' + objeto2).then(function () {
                        return bot.ask('Voc\xEA gosta de ' + objeto1 + '?').then(function (resposta) {
                            if (resposta.match(/(gosto|sim)( sim| gosto)?/gi)) {
                                window.localStorage['bot.likes.' + objeto1] = 0.75;
                                return bot.speak('Então eu também gosto');
                            } else if (resposta.match(/(não)( não| gosto)?/gi)) {
                                window.localStorage['bot.likes.' + objeto1] = 0.1;
                                return bot.speak('Então eu também não gosto');
                            }
                        });
                    });
                }
            } else {

                var objeto = arguments[17];

                var plus_or_minus = Math.random() < 0.5 ? -1 : 1;
                var chances_de_gostar = Math.random() * plus_or_minus;
                //
                window.localStorage['bot.likes.' + objeto] = parseInt(window.localStorage['bot.likes.' + objeto]) + chances_de_gostar || chances_de_gostar;
                //
                var opiniao = window.localStorage['bot.likes.' + objeto];
                var opiniao_round = Math.round(opiniao * 100) / 100;
                //
                if (opiniao > 0.9) {
                    bot.speak('Gosto bastante!!');
                } else if (opiniao > 0.75) {
                    bot.speak('Adoro!');
                } else if (opiniao > 0.5) {
                    bot.speak('Gosto sim.');
                } else if (opiniao > 0.2) {
                    bot.speak('Gosto mais ou menos.');
                } else if (opiniao === 0) {
                    bot.speak('N\xE3o sei ainda...');
                } else if (opiniao < -0.9) {
                    bot.speak('N\xE3o gosto nem um pouco.');
                } else if (opiniao < -0.75) {
                    bot.speak('N\xE3o, n\xE3o gosto.');
                } else if (opiniao < -0.5) {
                    bot.speak('N\xE3o gosto.');
                } else if (opiniao < -0.2) {
                    bot.speak('N\xE3o.');
                } else if (opiniao < 0) {
                    bot.speak('Negativo.');
                }
            }
        }
    }]);

    return BotLikesController;
}(BotController);


'use strict';
/**
 * Apenas um exemplo que registra no localStorage um valor random definindo a opinião do bot.
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotOpinionController = function (_BotController) {
  _inherits(BotOpinionController, _BotController);

  function BotOpinionController() {
    _classCallCheck(this, BotOpinionController);

    return _possibleConstructorReturn(this, (BotOpinionController.__proto__ || Object.getPrototypeOf(BotOpinionController)).apply(this, arguments));
  }

  _createClass(BotOpinionController, [{
    key: "^(qual |d[eê] )?(é )?(a )?sua opini[ãa]o (sobre|quanto)( a| o| ao)?(s)? (.*)$",
    value: function qualDEASuaOpiniAOSobreQuantoAOAoS$(_what, _is, _the, _about, _about_the, _plural, objeto) {

      var plus_or_minus = Math.random() < 0.5 ? -1 : 1;
      var chances_de_acreditar = Math.random() * plus_or_minus;

      window.localStorage["bot.opinions.about." + objeto] = parseInt(window.localStorage["bot.opinions.about." + objeto]) + chances_de_acreditar || chances_de_acreditar;

      var opiniao = window.localStorage["bot.opinions.about." + objeto];
      var opiniao_round = Math.round(opiniao * 100) / 100;

      if (opiniao > 0.9) {
        bot.speak("Positiva e excel\xEAnte");
      } else if (opiniao > 0.75) {
        bot.speak("Positiva e \xF3tima");
      } else if (opiniao > 0.5) {
        bot.speak("Positiva e boa");
      } else if (opiniao > 0.2) {
        bot.speak("Positiva e regular");
      } else if (opiniao === 0) {
        bot.speak("Me abstenho");
      } else if (opiniao < -0.9) {
        bot.speak("Negativa e muito p\xE9ssima");
      } else if (opiniao < -0.75) {
        bot.speak("Negativa e p\xE9ssima");
      } else if (opiniao < -0.5) {
        bot.speak("Negativa e muito ruim");
      } else if (opiniao < -0.2) {
        bot.speak("Negativa e ruim");
      } else if (opiniao < 0) {
        bot.speak("Negativa");
      }

      // péssimo, ruim, regular, bom, ótimo
    }
  }]);

  return BotOpinionController;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotDebuggerAleatoriosController = function (_BotController) {
    _inherits(BotDebuggerAleatoriosController, _BotController);

    function BotDebuggerAleatoriosController() {
        _classCallCheck(this, BotDebuggerAleatoriosController);

        return _possibleConstructorReturn(this, (BotDebuggerAleatoriosController.__proto__ || Object.getPrototypeOf(BotDebuggerAleatoriosController)).apply(this, arguments));
    }

    _createClass(BotDebuggerAleatoriosController, [{
        key: "^frase aleat[óo]ria$",
        value: function fraseAleatORia$() {
            var main = Promise.resolve();
            var frase = '';
            for (var x = 0; x < 1; x++) {

                main = main.then(function () {
                    return botDb.random('words.language_interj', ['pt', 1]).then(function (cursor) {
                        frase += ' ' + cursor.value.word;
                    });
                });

                main = main.then(function () {
                    return botDb.random('words.language_pron', ['pt', 1]).then(function (cursor) {
                        frase += ' ' + cursor.value.word;
                    });
                });

                main = main.then(function () {
                    return botDb.random('words.language_adj', ['pt', 1]).then(function (cursor) {
                        frase += ' ' + cursor.value.word;
                    });
                });
            }
            main.then(function () {
                bot.speak(frase);

                // console.log(frase);
            });
        }
    }, {
        key: "^pronome aleatório$",
        value: function pronomeAleatRio$() {
            return botDb.random('words.language_pron', ['pt', 1]).then(function (cursor) {
                bot.speak(cursor.value.word);
            });
        }
    }, {
        key: "^verbo aleatório$",
        value: function verboAleatRio$() {
            botDb.random('words.verb').then(function (cursor) {
                bot.speak(cursor.value.word);
            });
        }
    }, {
        key: "^adjetivo aleatório$",
        value: function adjetivoAleatRio$() {
            botDb.random('words.adj').then(function (cursor) {
                bot.speak(cursor.value.word);
            });
        }
    }, {
        key: "^random bigrams$",
        value: function randomBigrams$() {
            return botDb.random('words.language_frequency', IDBKeyRange.bound(['pt', 30], ['pt', 50])).then(function (data) {
                var word = data.value.word;
                console.log(['palavra', word]);
                return botDb.random('ngrams.language_ngram_frequency', IDBKeyRange.bound(['pt', word, 1], ['pt', word + 'a', 80]));
            }).then(function (data) {
                return bot.speak(data.value.ngram).then(function () {
                    setTimeout(function () {
                        bot.input("random bigrams");
                    }, 5000);
                });
            }).catch(function () {
                return bot.speak('Deu bosta jovem');
            });
        }
    }]);

    return BotDebuggerAleatoriosController;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotDebuggerAnalisarController = function (_BotController) {
    _inherits(BotDebuggerAnalisarController, _BotController);

    function BotDebuggerAnalisarController() {
        _classCallCheck(this, BotDebuggerAnalisarController);

        return _possibleConstructorReturn(this, (BotDebuggerAnalisarController.__proto__ || Object.getPrototypeOf(BotDebuggerAnalisarController)).apply(this, arguments));
    }

    _createClass(BotDebuggerAnalisarController, [{
        key: "^anali[sz]ar(?: )?(?:o)?(?:s)?(?: )?texto(?:s)?(?: )?(.*)?$",
        value: function analiSzArOSTextoS$(texto) {

            var p = void 0;
            var tags = [];
            var outputs = {};
            if (typeof texto == "undefined") {
                p = bot.ask('Que texto?').then(function (textoInseridoDepois) {
                    console.log(['vai analizar ', textoInseridoDepois]);
                    return bot.tokenize(textoInseridoDepois);
                });
            } else {
                p = Promise.resolve().then(function () {
                    console.log(['vai analizar ', texto]);
                    return bot.tokenize(texto);
                });
            }

            p.then(function (tokens) {
                console.log(['tokens no looping', tokens]);

                var _loop = function _loop(x) {
                    p = p.then(function () {
                        return botDb.get("words.word." + tokens[x]).then(function (data) {
                            if (data && data.result) {
                                tags.push(data.result.value);
                            }
                        });
                    });
                };

                for (var x in tokens) {
                    _loop(x);
                }

                p.then(function () {
                    console.log(tags);
                    for (var z in tags) {
                        var keys = Object.keys(tags[z]);
                        for (var a in keys) {
                            if ([tags[z][keys[a]]] > 0) {
                                outputs[keys[a]] = outputs[keys[a]] + 1 || 1;
                            }
                        }
                    }

                    var map = {
                        adj: 'adjetivos',
                        adv: 'advérbios',
                        antonym: 'antônimos',
                        created: 'criadas recentemente',
                        fp: 'feminino no plural',
                        frequency: 'frequênte',
                        fs: 'feminino no singular',
                        interj: 'interjeições',
                        language: 'com linguagem reconhecida',
                        mp: 'masculino no plural',
                        ms: 'masculino no singular',
                        num: 'numeráis',
                        pron: 'pronomes',
                        sentiment: 'com sentimento',
                        source: 'com fonte',
                        verb: 'verbos'
                        // word:'palavras'
                    };

                    var fim = 'Resultado da análise: ';
                    var totalizer = 0;
                    var mapKeys = Object.keys(map);
                    for (var m in mapKeys) {
                        fim += parseInt(outputs[mapKeys[m]]) > 0 ? outputs[mapKeys[m]] + ' ' + map[mapKeys[m]] + ', ' : '';
                        totalizer += parseInt(outputs[mapKeys[m]]) > 0 ? outputs[mapKeys[m]] : 0;
                    }
                    fim += ' totalizando ' + totalizer + ' operações neste texto.';
                    bot.speak(fim);
                });
            });
        }
    }, {
        key: "^anali[sz]ar frase (.*)$",
        value: function analiSzArFrase$(frase) {
            if (frase.length > 1) {
                var _ret2 = function () {

                    var tags = [];
                    var split = frase.toLowerCase().replace(/[\"\(\)\,\.\:]/g, '').trim().split(" ");

                    split = split.filter(function (item, pos) {
                        return split.indexOf(item) == pos;
                    });

                    var p = Promise.resolve();

                    var _loop2 = function _loop2(x) {
                        p = p.then(function () {
                            return botDb.get("words.word." + split[x]).then(function (data) {
                                if (data && data.result) {
                                    tags.push(data.result.value);
                                }
                            });
                        });
                    };

                    for (var x in split) {
                        _loop2(x);
                    }

                    return {
                        v: p.then(function () {
                            var _loop3 = function _loop3(z) {
                                p = p.then(function () {
                                    var word = tags[z];
                                    var resposta = word.word;
                                    if (word.verb == 1) {
                                        resposta += ', verbo';
                                    }
                                    if (word.adv == 1) {
                                        resposta += ', advérbio';
                                    }
                                    if (word.adj == 1) {
                                        resposta += ', adjetivo';
                                    }
                                    if (word.num == 1) {
                                        resposta += ', numeral';
                                    }
                                    if (word.sentiment > 1) {
                                        resposta += ', sentimento positivo';
                                    }
                                    if (word.sentiment < 1) {
                                        resposta += ', sentimento negativo';
                                    }
                                    if (word.pron == 1) {
                                        resposta += ', pronome';
                                    }
                                    if (word.fs == 1) {
                                        resposta += ', feminino no singular';
                                    }
                                    if (word.ms == 1) {
                                        resposta += ', masculino no singular';
                                    }
                                    if (word.fp == 1) {
                                        resposta += ', feminino no plural';
                                    }
                                    if (word.mp == 1) {
                                        resposta += ', masculino no plural';
                                    }

                                    if (resposta === word.word) {
                                        bot.input("atualizar palavra " + resposta);
                                    }

                                    resposta += '.';

                                    return bot.speak(resposta);
                                });
                            };

                            for (var z in tags) {
                                _loop3(z);
                            }
                        })
                    };
                }();

                if ((typeof _ret2 === "undefined" ? "undefined" : _typeof(_ret2)) === "object") return _ret2.v;
            }
        }
    }, {
        key: "^verificar palavras$",
        value: function verificarPalavras$() {
            var begin = Date.now();
            var counting = 0;

            bot.speak('Aguarde').then(function () {

                return new Promise(function (resolve, reject) {
                    var words = [];
                    var onlyWords = [];
                    var requestStore = botDb.get("words");

                    requestStore.onsuccess = function () {
                        console.log(['requestStore.onsuccess']);
                    };

                    var line = 0;
                    var requestCursor = requestStore.openCursor();

                    requestCursor.onsuccess = function (e) {
                        var cursor = e.target.result;

                        if (cursor != null && typeof cursor.continue == 'function') {
                            var row = cursor.value;

                            if (typeof row.language === "undefined") {
                                counting++;
                                row.language = '';
                                words.push(row);
                            }

                            cursor.continue();
                            // words.push(cursor.value);
                        } else {
                            console.log([counting + ' sem language...']);
                            resolve(words);
                        }
                    };

                    requestCursor.onerror = function (e) {
                        reject();
                        console.log(['deu bosta', e]);
                    };
                });
            }).catch(function () {
                bot.speak('deu bosta');
            }).then(function (words) {
                bot.speak('Atualizações necessárias de ' + words.length + ' palavras, aguarde');
                var p = Promise.resolve();

                var _loop4 = function _loop4(x) {
                    p = p.then(function () {
                        return botDb.set('words.word.' + words[x].word, words[x]);
                    }).catch(function () {
                        console.log(words[x], 'deu ruim');
                    });
                };

                for (var x in words) {
                    _loop4(x);
                }

                return p.then(function () {
                    return bot.speak('Finalizando atualizações');
                });
            }).then(function (words) {
                // merge
            });
        }
    }, {
        key: "^verificar palavras sem idioma$",
        value: function verificarPalavrasSemIdioma$() {

            bot.doing = "Estou atualizando palavras sem idioma.";
            bot.left = function () {
                return botDb.count("words.language", '').then(function (data) {
                    bot.left = null;
                    var total = data.result;
                    var tempo = (total / 2.5 / 60).toFixed(1);
                    return bot.speak("Faltam " + total + " palavras em " + tempo + " minutos.");
                });
            };

            var palavra = null;
            var contagem = 0;
            // console.log('Palavras sem idioma....');
            return botDb.get("words.language.").then(function (data) {
                if (typeof data.result.value.word == 'undefined') {
                    return bot.speak('Erro de palavra indefinida');
                }

                // console.log('A processar.');
                return data.result.value;
            }).then(function (row) {
                var sentiment = row.sentiment || null;
                palavra = row.word;

                row.language = 'pt';
                // if (sentiment) {
                // } else {
                //
                // }
                return botDb.set("words.word." + palavra, row).catch(function (data) {
                    // bot.speak('Deu bosta sim.');
                    return botDb.get("words.word_language", [row.word, row.language]).then(function (data) {
                        var row2 = data.result.value;
                        row2.sentiment = row.sentiment;

                        return botDb.set("words.word_language", row2, [row2.word, row2.language]).then(function () {
                            return new Promise(function (resolve, reject) {
                                botDb.get('words').openCursor(row.id).onsuccess = function (e) {
                                    if (e.target.result.delete()) {
                                        bot.speak('Palavra deletada').then(function () {
                                            resolve(data);
                                        });
                                    };
                                };
                            });
                        });
                    });
                }).catch(function (data) {
                    return bot.speak('Várias vezes.');
                });
            }).then(function (data) {
                return botDb.get("words.word_language", [palavra, 'pt']);
            }).then(function (data) {
                return botDb.count("words.language", '').then(function (data) {
                    if (data.result > 100) {
                        return bot.input("palavras sem idioma");
                    } else {
                        return bot.speak("Agora faltam só 100").then(function () {
                            return bot.input("palavras sem idioma");
                        });
                    }
                });
            });
        }
    }]);

    return BotDebuggerAnalisarController;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotDebuggerApresentadorImagensController = function (_BotController) {
    _inherits(BotDebuggerApresentadorImagensController, _BotController);

    function BotDebuggerApresentadorImagensController() {
        _classCallCheck(this, BotDebuggerApresentadorImagensController);

        return _possibleConstructorReturn(this, (BotDebuggerApresentadorImagensController.__proto__ || Object.getPrototypeOf(BotDebuggerApresentadorImagensController)).apply(this, arguments));
    }

    _createClass(BotDebuggerApresentadorImagensController, [{
        key: "^apresentar(?: )?(\d+)? (.*)$",
        value: function apresentarD$(number, project) {

            var num = typeof number == "numeric" ? parseInt(number) : 1;
            new BotCustomSearchService(project, 10, num).getImage().then(function (data) {
                // console.log(data);
                var img = [];
                var total = 0;
                var p = new Promise(function (resolve, reject) {
                    for (var x in data.items) {
                        img[x] = new Image();
                        img[x].src = data.items[x].link;
                        img[x].onload = function () {
                            total++;
                            if (total > 5) {
                                resolve();
                            }
                        };
                        $('<div class="item"><div class="fill" style="background-image:url(\'' + data.items[x].link + '\');"></div><div class="carousel-caption">' + data.items[x].htmlSnippet + '</div>   </div>').appendTo('.carousel-inner');
                        $('<li data-target="#myCarousel" data-slide-to="' + x + '"></li>').appendTo('.carousel-indicators');

                        if (x >= data.items.length - 1) {}
                    }
                }).then(function () {

                    $('.item').first().addClass('active');
                    $('.carousel-indicators > li').first().addClass('active');
                    $('#myCarousel').carousel({
                        pause: null
                    });
                    $('#myCarousel').removeClass('hidden');
                    $('#myCarousel').carousel('cycle');
                });
            });
        }
    }, {
        key: "^((continu|paus)(e|ar))( a)? apresentação$",
        value: function continuPausEArAApresentaO$(comando, comprimido) {
            if (comprimido == 'continu') {
                $('#myCarousel').carousel('cycle');
            } else {
                $('#myCarousel').carousel('pause');
            }
        }
    }, {
        key: "^你有多大$",
        value: function $() {

            var main = Promise.resolve();
            for (var x = 1; x < 5; x++) {
                main = main.then(function () {
                    return bot.input("");
                });
            }
        }
    }]);

    return BotDebuggerApresentadorImagensController;
}(BotController);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotDebuggerAtualizarPalavraController = function (_BotController) {
    _inherits(BotDebuggerAtualizarPalavraController, _BotController);

    function BotDebuggerAtualizarPalavraController() {
        _classCallCheck(this, BotDebuggerAtualizarPalavraController);

        return _possibleConstructorReturn(this, (BotDebuggerAtualizarPalavraController.__proto__ || Object.getPrototypeOf(BotDebuggerAtualizarPalavraController)).apply(this, arguments));
    }

    _createClass(BotDebuggerAtualizarPalavraController, [{
        key: "^atualizar adjetivo aleatório$",
        value: function atualizarAdjetivoAleatRio$() {
            var p = Promise.resolve();
            var palavras = '';
            for (var x = 0; x < 10; x++) {
                p = p.then(function () {
                    return botDb.random('words.adj').then(function (data) {
                        palavras += ' ' + data.value.word;
                    });
                });
            }
            p.then(function () {
                return bot.input('atualizar palavras ' + palavras);
            });
        }
    }, {
        key: "^atualizar verbo aleatório$",
        value: function atualizarVerboAleatRio$() {
            var p = Promise.resolve();
            var palavras = '';
            for (var x = 0; x < 10; x++) {
                p = p.then(function () {
                    return botDb.random('words.verb').then(function (data) {
                        palavras += ' ' + data.value.word;
                    });
                });
            }
            p.then(function () {
                return bot.input('atualizar palavras' + palavras);
            });
        }
    }, {
        key: "^(?:deletar|excluir|remover) palavra (.*)$",
        value: function deletarExcluirRemoverPalavra$(palavra) {
            return botDb.delete('words.word.' + palavra).then(function (data) {
                return bot.speak('Ok, excluido com sucesso.');
            }).catch(function () {
                return bot.speak('Deu bosta mas tudo bem');
            });
        }
    }, {
        key: "^atualização expansiva(?: da palavra)? (.*)$",
        value: function atualizaOExpansivaDaPalavra$(palavra) {
            new BotWikitionaryService().get(palavra, true).then(function (texto) {
                var matches = texto.match(/([\\sàèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛãñõÃÑÕäëïöüÿÄËÏÖÜŸçÇa-z0-9]+ ){2}/img);
                if (matches) {

                    matches = matches.filter(function (item, pos) {
                        return matches.indexOf(item) == pos;
                    }).filter(function (item, pos) {
                        return item != palavra;
                    }).filter(function (item, pos) {
                        return item.length > 2;
                    });

                    matches = matches.join(" ").split(" ");

                    matches = matches.filter(function (item, pos) {
                        return matches.indexOf(item) == pos;
                    }).filter(function (item, pos) {
                        return item != palavra;
                    }).filter(function (item, pos) {
                        return item.length > 3;
                    });

                    bot.input("atualizar palavras " + matches.join(" "));
                }
            });
        }
    }, {
        key: "^atualização aleatória$",
        value: function atualizaOAleatRia$() {

            var p = Promise.resolve();
            var palavras = '';
            for (var x = 0; x < 1; x++) {
                p = p.then(function () {
                    return botDb.random('words.language', IDBKeyRange.only('pt')).then(function (data) {
                        palavras += ' ' + data.value.word;
                    });
                });
            }
            return p.then(function () {
                bot.input('atualizar palavras ' + palavras);
            });
        }
    }, {
        key: "^atualização automática$",
        value: function atualizaOAutomTica$() {
            botDb.random('words.language_frequency', IDBKeyRange.bound(['pt', 10], ['pt', 50])).then(function (data) {
                console.log(data.value);
                if (data.value.language == 'pt') return bot.input('atualizar palavra ' + data.value.word).then(function (input) {
                    console.log('atualizou', input);
                });
            }).then(function () {
                console.log('fiiiiiiiiiiiiim');
            });
        }
    }, {
        key: "^atualizar palavra(?:s)? (.*)$",
        value: function atualizarPalavraS$(palavras) {

            console.log('A atualizar ' + palavras);
            // banco local
            var insercoes = 0;
            var atualizacoes = 0;
            var idiomas = 0;

            palavras = palavras.split(" ");
            var main = Promise.resolve();

            var _loop = function _loop(y) {
                var palavra = palavras[y];
                main = main.then(function () {
                    return botDb.get('words.word_language', [palavra, 'pt']).then(function (data) {
                        console.log(['deu get na palavra ' + palavra, data]);
                        return new Promise(function (resolve, reject) {
                            if (data.result == null) {
                                console.log(['não tem essa palavra no banco local "pt", reject ' + palavra, data]);
                                reject(palavra);
                            } else {
                                console.log([palavra + ' encontrada no banco local "pt"', data]);
                                resolve(data);
                            }
                        }).then(function (request) {
                            return {
                                result: request.result.value.id
                            };
                        });
                    }).catch(function (palavra) {
                        atualizacoes++;
                        console.log(['palavra inexistente, criando']);
                        return botDb.set('words.word.' + palavra, palavra);
                    }).then(function (data) {

                        console.log(['passou nos testes ' + palavra, data]);
                        if (data.result != null && typeof data.result == 'number') {
                            var source = data.result;
                            console.log(['vai procurar no wiktionary ' + palavra, source]);
                            return new BotWikitionaryService().get(palavra, true).then(function (texto) {

                                return botDb.get('words.word.' + palavra).then(function (request) {
                                    console.log(['pegou do banco vendo o texto', request.result.value, texto]);
                                    return [request.result.value, texto];
                                }).then(function (wordText) {

                                    var word = wordText[0];
                                    var texto = wordText[1];

                                    /**
                                     * @todo
                                     *
                                     * ={{-pt-}}=
                                     * ==Forma de adjetivo==
                                     * {{flex.pt|variado|variados|variada|variadas|ms-div=va.ri.<u>a</u>.do|mp-div=va.ri.<u>a</u>.dos|fs-div=va.ri.<u>a</u>.da|fp-div=va.ri.<u>a</u>.das}}
                                     *
                                     ADJ	adjective	new, good, high, special, big, local
                                     ADP	adposition	on, of, at, with, by, into, under
                                     ADV	adverb	really, already, still, early, now
                                     CONJ	conjunction	and, or, but, if, while, although
                                     DET	determiner, article	the, a, some, most, every, no, which
                                     NOUN	noun	year, home, costs, time, Africa
                                     NUM	numeral	twenty-four, fourth, 1991, 14:24
                                     PRT	particle	at, on, out, over per, that, up, with
                                     PRON	pronoun	he, their, her, its, my, I, us
                                     VERB	verb	is, say, told, given, playing, would
                                     .	punctuation marks	. , ; !
                                     X	other	ersatz, esprit, dunno, gr8, univeristy
                                     */
                                    word.adj = /(?:==(?: )?Adjetivo(?: )?==)/ig.exec(texto) ? 1 : 0;
                                    word.adp = /(?:==(?: )?Preposição(?: )?==)/ig.exec(texto) ? 1 : 0;
                                    word.adv = /(?:==(?: )?Adv[eé]rbio(?: )?==)/ig.exec(texto) ? 1 : 0;
                                    word.conj = /(?:==(?: )?Conjunção(?: )?==)/ig.exec(texto) ? 1 : 0;
                                    word.det = /(?:==(?: )?Determinante(?: )?==)/ig.exec(texto) ? 1 : 0;
                                    word.noun = /(?:==(?: )?Substantivo(?: )?==)/ig.exec(texto) ? 1 : 0;
                                    word.num = /(?:==(?: )?Numeral(?: cardinal)?(?: )?==)/ig.exec(texto) ? 1 : 0;
                                    word.verb = /(?:==(?: )?Verbo(?: )?==)/ig.exec(texto) ? 1 : 0;

                                    word.pron = /(?:==(?: )?Pronome(?: )?==)/ig.exec(texto) ? 1 : 0;
                                    word.interj = /(?:==(?: )?Interjeição(?: )?==)/ig.exec(texto) ? 1 : 0;

                                    var antonimo = /(?:===(?: )?Ant[ôo]nimo(?:s)?(?: )?===)\n[^\[]+[^\w]+([^\]]+)\]\]/gi.exec(texto);
                                    if (antonimo) {
                                        word.antonym = antonimo[1];
                                    }

                                    var simbolo = /(?:==(?: )?)?[Ss][íi]mbolo(?:(?: )?==)?(?: )?[^\d]+(\d+)/gi.exec(texto);
                                    if (simbolo) {
                                        word.symbol = simbolo[1];
                                    }

                                    var langs = /(?:={{-)(\w+)(?:-}}=)/ig.exec(texto);
                                    if (langs && langs.length > 1) {
                                        word.language = langs[1];
                                    }

                                    return [word, texto];
                                }).then(function (wordText) {
                                    var word = wordText[0];
                                    var texto = wordText[1];
                                    /**
                                     * Expressões idiomáticas
                                     */
                                    // var regexp = /(?:\*(?:.*)?'''\[\[(.*)\]\]'''(?:\:)?(.*)?)/gi;
                                    // while(expressoes = regexp.exec(texto)){
                                    //
                                    // };
                                    return [word, texto];
                                }).then(function (wordText) {
                                    var word = wordText[0];
                                    var texto = wordText[1];

                                    return botDb.set('words.word.' + word.word, word).then(function (data) {
                                        atualizacoes++;
                                        console.log(['atualizou o verbo/adjetivo da palavra ' + palavra, word]);
                                        return [word, texto];
                                    });
                                }).catch(function (request) {
                                    console.log(request);
                                    bot.speak('Deu bosta');
                                }).then(function (wordText) {
                                    var word = wordText[0];
                                    var texto = wordText[1];
                                    //flex
                                    var flex = /{{flex.pt(?:\|(s)=([^\|}]+))?(?:\|(s-div)=([^\|}]+))?(?:\|(p)=([^\|}]+))?(?:\|(p-div)=([^\|}]+))?(?:\|(ms)=([^\|}]+))?(?:\|(ms-div)=([^\|}]+))?(?:\|(mp)=([^\|}]+))?(?:\|(mp-div)=([^\|}]+))?(?:\|(fs)=([^\|}]+))?(?:\|(fs-div)=([^\|}]+))?(?:\|(fp)=([^\|}]+))?(?:\|(fp-div)=([^\|}]+))?/ig.exec(texto);

                                    if (flex) {
                                        var flexObjectsIndex = 0;
                                        var flexObject = {};

                                        var flexObjects = flex.map(function (item, index) {

                                            if (index % 2 == 1 && typeof item !== 'undefined') {

                                                if (item.match(/(\-div)/gi)) {
                                                    return false;
                                                }
                                                var obj = {};
                                                obj.word = flex[index + 1];
                                                obj.source = source;
                                                obj.language = 'pt';
                                                obj[item] = 1;

                                                if (typeof flex[index + 2] !== "undefined" && typeof flex[index + 3] !== "undefined" && flex[index + 2].match(/(\-div)/gi)) {

                                                    var tone = flex[index + 3].match(/<[^>]+>(.*)<\/[^>]>/);
                                                    if (tone) {
                                                        obj.tone = tone[1];
                                                    }

                                                    var div = flex[index + 3].split(".");
                                                    if (div.length > 0) {
                                                        obj.div = div.map(function (silaba) {
                                                            return silaba.replace(/<[^>]+>(.*)<\/[^>]>/, '$1');
                                                        });
                                                    }
                                                }

                                                return obj;
                                            };
                                        }).filter(function (objeto) {
                                            if ((typeof objeto === 'undefined' ? 'undefined' : _typeof(objeto)) == "object" && objeto.word) {
                                                return objeto;
                                            }
                                            return false;
                                        });

                                        var p = Promise.resolve();

                                        var _loop2 = function _loop2(x) {
                                            p = p.then(function () {
                                                return botDb.set('words.word_language', flexObjects[x], [flexObjects[x].word, 'pt']).then(function (request) {
                                                    atualizacoes++;
                                                });
                                            });
                                        };

                                        for (var x in flexObjects) {
                                            _loop2(x);
                                        }
                                        return p.then(function () {
                                            console.log(['atualizações:', atualizacoes]);
                                            return [word, texto];
                                        });
                                    }

                                    console.log(['sem flexões...']);
                                    return [word, texto];
                                }).then(function (wordText) {
                                    var word = wordText[0];
                                    var texto = wordText[1];
                                    var trad = new RegExp(/{{trad(?:\|([^\|}]+))(?:\|([^\|}]+))(?:\|([^\|}]+))?(?:\|([^\|}]+))?}}/, 'ig');
                                    var match = null;
                                    var matches = [];
                                    var p = Promise.resolve();
                                    while (match = trad.exec(texto)) {
                                        matches.push(match);
                                    }

                                    var _loop3 = function _loop3(x) {
                                        match = matches[x];

                                        var idioma = match[1];
                                        var data = {
                                            source: source,
                                            language: idioma,
                                            word: match[2]
                                        };

                                        p = p.then(function () {
                                            return botDb.set('words.word_language', data, [data.word, idioma]).then(function () {
                                                console.log(['se liga ai', data.word, arguments]);
                                                atualizacoes++;
                                                idiomas++;
                                            });
                                        });
                                    };

                                    for (var x in matches) {
                                        _loop3(x);
                                    }

                                    return p.then(function () {
                                        console.log(['atualizações:', atualizacoes]);
                                        console.log(['idiomas:', idiomas]);
                                        return [word, texto];
                                    });
                                });
                            })

                            // nao virou wiktionary
                            .catch(function (data) {
                                console.log(['nao virou wiktionary', data]);
                            });
                        }
                    }).catch(function () {
                        //deu rum
                    });
                });
            };

            for (var y in palavras) {
                _loop(y);
            }
            return main.then(function () {
                var atualizacoes_palavra = atualizacoes - idiomas;
                // return bot.speak(`${atualizacoes_palavra} novas atualizações.`).then(function() {
                //     if (idiomas > 0) {
                //         return bot.speak(`${idiomas} em outros idiomas.`)
                //     } else {
                //         return bot.speak('.');
                //     }
                // })
            });
        }
    }, {
        key: "^atualizar via transcripts$",
        value: function atualizarViaTranscripts$() {
            var transcripts = [];

            botDb.get('transcripts.confidence').openCursor(IDBKeyRange.lowerBound(0.9)).onsuccess = function (e) {

                var cursor = e.target.result;

                if (cursor != null && typeof cursor.continue == 'function') {
                    if (cursor.value.final) transcripts.push(cursor.value);
                    cursor.continue();
                } else {
                    console.log(transcripts);

                    var final = transcripts.map(function (item) {
                        return item.transcript.trim().toLowerCase();
                    });

                    final = final.filter(function (item, pos) {
                        return final.indexOf(item) == pos;
                    })
                    // .filter(function(item, pos) {
                    //     return item != palavra;
                    // })
                    .filter(function (item, pos) {
                        return item.length > 2;
                    }).sort(function (a, b) {
                        if (a < b) return -1;
                        if (a > b) return 1;
                        return 0;
                    });

                    final = final.join(" ").split(" ");
                    // ;
                    final = final.filter(function (item, pos) {
                        return final.indexOf(item) == pos;
                    }).filter(function (item, pos) {
                        return item.length > 2;
                    }).sort(function (a, b) {
                        if (a < b) return -1;
                        if (a > b) return 1;
                        return 0;
                    });

                    bot.input("atualizar palavras " + final.join(" "));
                }
            };
        }
    }]);

    return BotDebuggerAtualizarPalavraController;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotDebuggerCaracteristicasPessoaisController = function (_BotController) {
    _inherits(BotDebuggerCaracteristicasPessoaisController, _BotController);

    function BotDebuggerCaracteristicasPessoaisController() {
        _classCallCheck(this, BotDebuggerCaracteristicasPessoaisController);

        return _possibleConstructorReturn(this, (BotDebuggerCaracteristicasPessoaisController.__proto__ || Object.getPrototypeOf(BotDebuggerCaracteristicasPessoaisController)).apply(this, arguments));
    }

    _createClass(BotDebuggerCaracteristicasPessoaisController, [{
        key: "^(cite uma )?característica(s)? (pessoa(l|is))$",
        value: function citeUmaCaracterSticaSPessoaLIs$(uma, varias) {
            var c = {
                'Apresentaçao': ['Descuidada', 'Descontraida', 'Correta', 'Cuidada', 'Refinada'],
                'Presença': ['Arrogante', 'Apagada', 'Discreta', 'Segura', 'Afirmativa'],
                'Capacidade de Contacto': ['Alheado', 'Reservado', 'Extrovertido', 'Caloroso', 'Empatico'],
                'Relacionamento interpessoal': ['Contrariador', 'Aprovador', 'Critico', 'Conciliador', 'Cooperante'],
                'Inteligencia Social': ['Inflexivel', 'Inabil', 'Direto', 'Subtil', 'Perspicaz'],
                'Integraçao em equipa': ['Isolado', 'Integrado', 'Participativo', 'Dinamizador', 'Catalisador'],
                'Relaçao com a hierarquia': ['Rebelde', 'Contrariador', 'Submisso', 'Obediente', 'Respeitador'],
                'Comunicaçao verbal': ['Confusa', 'Linear', 'Clara', 'Fluente', 'Viva'],
                'Capacidade de Persuasão': ['Silencioso', 'Monopolizador', 'Atabalhoado', 'Ouvinte', 'Convincente'],
                'Autonomia': ['Dependente', 'Seguidor', 'Apoiado', 'Independente', 'Ousado'],
                'Autoconfiança': ['Ansioso', 'Inseguro', 'Seguro', 'Ambicioso', 'Audacioso'],
                'Controlo emotional': ['Agressivo', 'Reativo', 'Equilibrado', 'Calmo', 'Estavel'],
                'Ponderação': ['Irrefletido', 'Descuidado', 'Consciencioso', 'Prudente', 'Precavido'],
                'Determinação': ['Estatico', 'Indeciso', 'Firme', 'Persistente', 'Obstinado'],
                'Otimismo': ['Pessimista', 'Desconfiado', 'Espontaneo', 'Confiante', 'Alegre'],
                'Adaptação a mudança': ['Relutante', 'Conservador', 'Prudente', 'Aberto', 'Inovador'],
                'Sentido de organização': ['Desordenado', 'Minucioso', 'Perfeccionista', 'Coerente', 'Cuidadoso'],
                'Capacidade de Liderança': ['Inibido', 'Executante', 'Coordenador', 'Planificador', 'Motivador']
            };

            var caracteristicas = Object.keys(c);

            if (uma && uma !== '') {

                var caracteristica_random = caracteristicas[Math.floor(Math.random() * caracteristicas.length)];
                var atributos = c[caracteristica_random];
                var atributo = atributos[Math.floor(Math.random() * atributos.length)];

                bot.speak(atributo);
            }

            if (varias && varias == 's') {
                for (var x in c) {
                    bot.speak('Caracter\xEDstica: ' + x);
                    for (var y in c[x]) {
                        bot.speak(c[x][y]);
                    }
                }
            }
        }
    }]);

    return BotDebuggerCaracteristicasPessoaisController;
}(BotController);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotDebuggerEnglishController = function (_BotController) {
    _inherits(BotDebuggerEnglishController, _BotController);

    function BotDebuggerEnglishController() {
        _classCallCheck(this, BotDebuggerEnglishController);

        return _possibleConstructorReturn(this, (BotDebuggerEnglishController.__proto__ || Object.getPrototypeOf(BotDebuggerEnglishController)).apply(this, arguments));
    }

    _createClass(BotDebuggerEnglishController, [{
        key: "^(what(?:s|\'s| is)?) (the|for|a|an|your|my|his|her|its|our|their)?(?: )?(.*)",


        /**
         * Detecta uma pergunta em inglês.
         */
        value: function whatSSIsTheForAAnYourMyHisHerItsOurTheir(question, owner, subject) {
            bot.language = 'en';

            var value = '';
            if (owner == 'your' && localStorage['bot.s.' + subject]) {
                value = localStorage['bot.s.' + subject];
            } else if (owner == 'my' && localStorage['user.s.' + subject]) {
                value = localStorage['user.s.' + subject];
            }

            var ownermap = {
                'the': 'the',
                'for': 'for',
                'a': 'a',
                'an': 'an',
                'your': 'my',
                'my': 'your',
                'his': 'his',
                'her': 'her',
                'its': 'its',
                'our': 'our',
                'their': 'their'
            };
            owner = ownermap[owner];

            if (value != '') {
                bot.speak(owner + ' ' + subject + ' is ' + value + '.');
            } else {
                bot.speak(owner + ' ' + subject + ' is not defined.');
            }
        }

        /**
         * Detecta uma simples afirmação em inglês.
         */

    }, {
        key: "^(the|for|a|an|your|my|his|her|its|our|their)(?: )?(.*)( is| are)(.*)",
        value: function theForAAnYourMyHisHerItsOurTheirIsAre(owner, subject, isare, value) {
            var ownermap = {
                'the': 'the',
                'for': 'for',
                'a': 'a',
                'an': 'an',
                'your': 'my',
                'my': 'your',
                'his': 'his',
                'her': 'her',
                'its': 'its',
                'our': 'our',
                'their': 'their'
            };

            if (owner == 'your') {
                localStorage['bot.s.' + subject] = value;
            } else if (owner == 'my') {
                localStorage['user.s.' + subject] = value;
            }

            owner = ownermap[owner];
        }
    }]);

    return BotDebuggerEnglishController;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotDebuggerExportarController = function (_BotController) {
    _inherits(BotDebuggerExportarController, _BotController);

    function BotDebuggerExportarController() {
        _classCallCheck(this, BotDebuggerExportarController);

        return _possibleConstructorReturn(this, (BotDebuggerExportarController.__proto__ || Object.getPrototypeOf(BotDebuggerExportarController)).apply(this, arguments));
    }

    _createClass(BotDebuggerExportarController, [{
        key: "^exportar palavras$",
        value: function exportarPalavras$() {
            var begin = Date.now();
            var botFile = new BotFile('export-' + Date.now() + '.json');

            bot.speak('Aguarde').then(function () {
                return new Promise(function (resolve, reject) {
                    var words = [];
                    var requestStore = botDb.get("words");

                    requestStore.onsuccess = function () {
                        console.log(['requestStore.onsuccess']);
                    };

                    var line = 0;
                    var requestCursor = requestStore.openCursor();

                    requestCursor.onsuccess = function (e) {

                        var cursor = e.target.result;

                        if (cursor != null && typeof cursor.continue == 'function') {
                            words.push(cursor.value);
                            cursor.continue();
                        } else {
                            resolve(words);
                        }
                    };
                });
            }).then(function (words) {
                console.log(['total de registros contatos' + words.length]);
                console.log([(Date.now() - begin) / 1000, 'segundos']);
                return words;
            }).then(botFile.download.bind(botFile));
        }
    }, {
        key: "^exportar transcripts$",
        value: function exportarTranscripts$() {
            var botFile = new BotFile('transcripts-from-botfile.json');
            return new Promise(function (resolve, reject) {
                var transcripts = [];
                botDb.get('transcripts.confidence').openCursor(IDBKeyRange.lowerBound(0.9)).onsuccess = function (e) {
                    var cursor = e.target.result;
                    if (cursor != null && typeof cursor.continue == 'function') {
                        if (cursor.value.final) {
                            transcripts.push(cursor.value);
                        }
                        cursor.continue();
                    } else {
                        resolve(transcripts);
                    }
                };
            }).then(botFile.download.bind(botFile));
        }
    }]);

    return BotDebuggerExportarController;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotDebuggerFrasesComunsController = function (_BotController) {
    _inherits(BotDebuggerFrasesComunsController, _BotController);

    function BotDebuggerFrasesComunsController() {
        _classCallCheck(this, BotDebuggerFrasesComunsController);

        return _possibleConstructorReturn(this, (BotDebuggerFrasesComunsController.__proto__ || Object.getPrototypeOf(BotDebuggerFrasesComunsController)).apply(this, arguments));
    }

    _createClass(BotDebuggerFrasesComunsController, [{
        key: "^(vou|estou indo|tô indo|to indo|irei) (para|ao|n[oa]|até)?( o| a)?(.*)$",

        /**
         * vou para o centro de Santos
         * vou ao banheiro
         * vou até o banheiro
         * vou até aí
         * vou até lá
         * vou no mercado
         * vou até o mercado
         * vou ao toalete
         * vou no banheiro
         * vou até são vicente
         * vou até a balsa
         * to indo até o mercado
         * irei ao mercado
         * irei até o mercado
         * to indo embora
         */
        value: function vouEstouIndoTIndoToIndoIreiParaAoNOaAtOA$(acao, stop1, stop2, lugar) {
            var stop1 = stop1 || '';
            var stop2 = stop2 || '';
            bot.notify('... o usuário vai ' + stop1 + stop2 + lugar);
        }

        /**
         * onde está minha filha
         * onde está minha filha mais nova
         * onde está minha filha mais velha
         * onde está minha mãe
         * onde está meu pai
         * onde está minha chave
         * onde estão minhas chaves
         * onde encontro minhas chaves
         * Onde estão minhas chaves
         * cadê minha chave
         * cadê meus arquivos
         * cadê os meus arquivos
         * cadê as minhas coisas
         * onde estão as minhas coisas
         * onde estão as pessoas
         * onde está wally
         * onde encontro wally
         * cadê você
         */

    }, {
        key: "^((onde) (est(á?|ão?)|encontro)|cadê) (|o |a |os |as )?(meu(s?) |minha(s?) )?(.*)$",
        value: function ondeEstOEncontroCadOAOsAsMeuSMinhaS$(g1, g2, g3, g4, g5, g6, g7, g8, objeto) {

            bot.speak('Procurando objeto: ' + objeto);
            if (window.localStorage['user.objeto.' + objeto + '.location']) {
                var location = window.localStorage['user.objeto.' + objeto + '.location'];
                bot.speak('Localiza\xE7\xE3o: ' + location);
            } else {
                bot.speak('N\xE3o localizado.').then(function () {
                    return bot.ask('Informe a localização', function (location) {
                        window.localStorage['user.objeto.' + objeto + '.location'] = location;
                    });
                });
            };
        }
    }]);

    return BotDebuggerFrasesComunsController;
}(BotController);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotDebuggerGeradorController = function (_BotController) {
    _inherits(BotDebuggerGeradorController, _BotController);

    function BotDebuggerGeradorController() {
        _classCallCheck(this, BotDebuggerGeradorController);

        return _possibleConstructorReturn(this, (BotDebuggerGeradorController.__proto__ || Object.getPrototypeOf(BotDebuggerGeradorController)).apply(this, arguments));
    }

    _createClass(BotDebuggerGeradorController, [{
        key: "^gerar frase(?: )?([^\\d]+)?(\\d+)?$",
        value: function gerarFraseDD$(comeco, vezes) {
            vezes = parseInt(vezes || 2);
            var p = Promise.resolve();
            var max = comeco + '.' || 'a';
            var frase = [comeco];

            for (var x = 0; x < vezes; x++) {

                p = p.then(function () {
                    return botDb.random('ngrams.ngram', IDBKeyRange.bound(comeco, comeco + '.')).then(function (data) {
                        frase.push(data.value.ngram.split(" ")[1]);
                        comeco = data.value.ngram.split(" ")[1];

                        return botDb.random('ngrams.ngram', IDBKeyRange.bound(comeco, comeco + '.')).then(function (data) {
                            frase.push(data.value.ngram.split(" ")[1]);
                            comeco = data.value.ngram.split(" ")[1];
                        });
                    });
                });
            }
            p.then(function () {
                console.log(frase);
            });
        }
    }]);

    return BotDebuggerGeradorController;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotDebuggerPalavrasController = function (_BotController) {
    _inherits(BotDebuggerPalavrasController, _BotController);

    function BotDebuggerPalavrasController() {
        _classCallCheck(this, BotDebuggerPalavrasController);

        return _possibleConstructorReturn(this, (BotDebuggerPalavrasController.__proto__ || Object.getPrototypeOf(BotDebuggerPalavrasController)).apply(this, arguments));
    }

    _createClass(BotDebuggerPalavrasController, [{
        key: "^frequ[eê]ncia da palavra (.*)",
        value: function frequENciaDaPalavra(palavra) {
            var frequencia = bot.tokensCloud[palavra];
            bot.speak("Palavra " + palavra + " apareceu " + frequencia + " vezes.");
        }
    }, {
        key: "^palavra mais frequ[êe]nte$",
        value: function palavraMaisFrequENte$() {
            var sortable = [];
            for (var param in bot.tokensCloud) {
                sortable.push([param, bot.tokensCloud[param]]);
            }var sorted = sortable.sort(function (a, b) {
                return a[1] - b[1];
            });

            var last = sorted[sorted.length - 1][0];
            var secondlast = sorted[sorted.length - 2][0];
            bot.speak(last + ", " + secondlast);

            console.log(sorted);
        }
    }, {
        key: "^quant[ao](s)? (token|palavra|controle|padrões)(s)? você (tem|possui|entende|aprendeu)$",
        value: function quantAoSTokenPalavraControlePadrEsSVocTemPossuiEntendeAprendeu$(plural1, objeto, plural2, pergunta) {

            var respostas = {
                'tem': 'tenho',
                'possui': 'possuo',
                'entende': 'entendo',
                'aprendeu': 'aprendi'
            };

            var resposta = respostas[pergunta];

            if (objeto == 'token' || objeto == 'palavra') {
                // var total = Object.keys(bot.tokensCloud).length;
                // return bot.speak(`Eu ${resposta} ${total} ${objeto}${plural2}.`);

                botDb.count('words.word').then(function (data) {
                    return bot.speak("Eu " + resposta + " " + data.result + " novas " + objeto + plural2 + ".");
                }).then(function () {
                    botDb.count('words.frequency').then(function (data) {
                        return bot.speak(data.result + " " + objeto + plural2 + " com frequ\xEAncia.");
                    });
                }).then(function () {
                    botDb.count('words.language').then(function (data) {
                        return bot.speak(data.result + " " + objeto + plural2 + " com idioma reconhecido.");
                    });
                }).then(function () {
                    botDb.count('words.sentiment').then(function (data) {
                        return bot.speak(data.result + " " + objeto + plural2 + " com calculo social..");
                    });
                }).then(function () {
                    botDb.count('words.verb').then(function (data) {
                        return bot.speak(data.result + " verbos e a\xE7\xF5es.");
                    });
                }).then(function () {
                    botDb.count('words.adj').then(function (data) {
                        return bot.speak(data.result + " " + objeto + plural2 + " adjetivos.");
                    });
                });
            }

            if (objeto == 'controle') {
                var contagem = {};
                bot.matches.filter(function (a, b) {
                    contagem[a.source] = contagem[a.source] + 1 || 0;
                });
                var controles = Object.keys(contagem).length;
                return bot.speak("Eu tenho " + controles + " controles.");
            }

            if (objeto == 'padrões') {
                var padroes = bot.matches.length;
                var contagem = {};
                bot.matches.filter(function (a, b) {
                    contagem[a.source] = contagem[a.source] + 1 || 0;
                });
                var controles = Object.keys(contagem).length;
                bot.speak("Eu " + resposta + " " + padroes + " padr\xF5es atrav\xE9s de " + controles + " controles.");
            }
        }
    }, {
        key: "^quantos comandos você (tem|possui)$",
        value: function quantosComandosVocTemPossui$() {
            var padroes = bot.matches.length;

            bot.speak("Eu tenho " + padroes + " comandos.");
        }
    }]);

    return BotDebuggerPalavrasController;
}(BotController);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotDebuggerPoliglotaController = function (_BotController) {
    _inherits(BotDebuggerPoliglotaController, _BotController);

    function BotDebuggerPoliglotaController() {
        _classCallCheck(this, BotDebuggerPoliglotaController);

        return _possibleConstructorReturn(this, (BotDebuggerPoliglotaController.__proto__ || Object.getPrototypeOf(BotDebuggerPoliglotaController)).apply(this, arguments));
    }

    _createClass(BotDebuggerPoliglotaController, [{
        key: "^(?:(fale)|(speak)|(parlare)|(hablar)|(parler)|(sprechen)|(говорить)|(話します)|(말하기)|(發言))(?: in| en| em)?(?: )(?:(?:(português)|(inglês)|(italiano)|(espanhol)|(francês)|(alemão)|(russo)|(japonês)|(coreâno)|(chinês))|(?:(portuguese)|(english)|(italian)|(spanish)|(french)|(german)|(russian)|(japanese)|(korean)|(chinese))|(?:(portoghese)|(inglese)|(italiano)|(spagnolo)|(francese)|(tedesco)|(russo)|(giapponese)|(coreano)|(cinese))|(?:(portugués)|(inglés)|(italiano)|(español)|(francés)|(alemán)|(ruso)|(japonés)|(coreano)|(chinois))|(?:(portugais)|(anglais)|(italien)|(espagnol)|(français)|(allemand)|(russe)|(japonais)|(coréen)|(chinois))|(?:(portugiesisch)|(englisch)|(italienisch)|(spanisch)|(französisch)|(deutsch)|(russisch)|(japanisch)|(koreanisch)|(?:chinesisch))|(?:(португальский)|(английский)|(итальянский)|(испанский)|(французский)|(немецкий)|(русский)|(японский)|(корейский)|китайский)（?:（ポルトガル語）|（英語）|（イタリア語）|（スペイン語）|（フランス語）|（ドイツ語）|（ロシア語）|（日本語）|（韓国）|（中国））|(?:(포르투갈어)|(영어)|(이탈리아어)|(스페인어)|(프랑스어)|(독일어)|(러시아어)|(일본어)|(한국어)|(중국어))|（?:（葡萄牙）|（英文）|（意大利）|（西班牙語）|（法國）|（德語）|（俄羅斯）|（日本）|（韓國）|（中國））)$",
        value: function faleSpeakParlareHablarParlerSprechenInEnEmPortuguSInglSItalianoEspanholFrancSAlemORussoJaponSCoreNoChinSPortugueseEnglishItalianSpanishFrenchGermanRussianJapaneseKoreanChinesePortogheseIngleseItalianoSpagnoloFranceseTedescoRussoGiapponeseCoreanoCinesePortuguSInglSItalianoEspaOlFrancSAlemNRusoJaponSCoreanoChinoisPortugaisAnglaisItalienEspagnolFranAisAllemandRusseJaponaisCorEnChinoisPortugiesischEnglischItalienischSpanischFranzSischDeutschRussischJapanischKoreanischChinesisch$() {
            console.log(arguments.length);
            var numbers = [];
            for (var x in arguments) {
                if (typeof arguments[x] !== 'undefined') numbers.push(x);
            }
            console.log(numbers);

            var languages = {
                0: 'pt', // 0 = native
                1: 'en', // 1 = speaks english as main language in this context,
                2: 'it',
                3: 'es',
                4: 'fr',
                5: 'de',
                6: 'ru',
                7: 'ja',
                8: 'ko',
                9: 'zh-CN'
            };

            var from = languages[numbers[0]];
            var to = parseInt(numbers[1]) - (parseInt(numbers[0]) + 1) * 10;
            console.log(['to', to]);
            to = languages[to];
            var output = {
                from: from,
                to: to
            };

            bot.language = to;

            bot.speak('Ok!');
            console.log(output);
        }
    }]);

    return BotDebuggerPoliglotaController;
}(BotController);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotDebuggerSistemaController = function (_BotController) {
    _inherits(BotDebuggerSistemaController, _BotController);

    function BotDebuggerSistemaController() {
        _classCallCheck(this, BotDebuggerSistemaController);

        return _possibleConstructorReturn(this, (BotDebuggerSistemaController.__proto__ || Object.getPrototypeOf(BotDebuggerSistemaController)).apply(this, arguments));
    }

    _createClass(BotDebuggerSistemaController, [{
        key: "^banco de dados$",
        value: function bancoDeDados$() {
            var _lsTotal = 0,
                _xLen,
                _x;
            for (_x in localStorage) {
                _xLen = (localStorage[_x].length + _x.length) * 2;
                _lsTotal += _xLen;
            }

            function bytesToSize(bytes) {
                var sizes = ['bytes', 'kbytes', 'megabytes', 'gigabytes', 'terabytes'];
                if (bytes == 0) return '0 Byte';
                var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
                return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
            };

            var total_string_size = JSON.stringify(localStorage).length;
            var total_lines = localStorage.length;
            var total_size = bytesToSize(_lsTotal);

            bot.speak('Banco local com ' + total_size + ' sendo ' + total_string_size + ' caracteres dividido em ' + total_lines + ' linhas.').then(botDb.usage).then(function (data) {
                var size = bytesToSize(data.used);
                var remaining = bytesToSize(data.remaining);
                return bot.speak('E no banco geral estou utilizando ' + size).then(function () {
                    bot.speak(remaining + ' dispon\xEDvel.');
                });
            });
        }
    }, {
        key: "^memória$",
        value: function memRia$() {
            var usado = (window.performance.memory.usedJSHeapSize / 1e6).toFixed(0) + '';
            var limite = (window.performance.memory.jsHeapSizeLimit / 1e6).toFixed(0) + '';
            bot.speak(usado + ' de ' + limite + ' megabytes.');
        }
    }, {
        key: "^(falha|pane) no (sistema)$",
        value: function falhaPaneNoSistema$() {}
    }, {
        key: "^que inferno$",
        value: function queInferno$() {}
    }]);

    return BotDebuggerSistemaController;
}(BotController);
'use strict';
/**
 * Proprietades do layout
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotLayoutController = function (_BotController) {
    _inherits(BotLayoutController, _BotController);

    function BotLayoutController() {
        _classCallCheck(this, BotLayoutController);

        return _possibleConstructorReturn(this, (BotLayoutController.__proto__ || Object.getPrototypeOf(BotLayoutController)).apply(this, arguments));
    }

    _createClass(BotLayoutController, [{
        key: "^(fundo|letra) (.*)$",


        /**
         * Cor de fundo e fonte
         */
        value: function fundoLetra$(objeto, cor) {

            botDb.get("words.word." + cor).then(function (request) {
                return botDb.get("words.language_source", ['en', request.result.value.source]);
            }).then(function (request) {
                if (objeto == 'fundo') {
                    $("body").css('background-color', request.result.value.word);
                }
                if (objeto == 'letra') {
                    $("body").css('color', request.result.value.word);
                }
            }).catch(function () {
                console.log('wrong');
            });
        }

        /**
         * Tamanho da fonte
         */

    }, {
        key: "^(aumentar|diminuir)?( | a | o )?(tamanho da )?(fonte|letra)( )?(para |em )?(\\d+)?( )?(pixel|centimetro|ponto)?(s)?$",
        value: function aumentarDiminuirAOTamanhoDaFonteLetraParaEmDPixelCentimetroPontoS$(direcao, espaco, tamanho, fonte, espaco2, paraem, numero, espaco3, unidade) {

            var current = parseInt($("body").css('font-size').substring(0, 2));

            if (typeof unidade === 'undefined' || unidade === 'pixel') {
                unidade = 'px';
            } else if (unidade === 'centimetros') {
                unidade = 'cm';
            }

            if (direcao === 'aumentar') {
                numero = current + parseInt(numero);
            } else if (direcao === 'diminuir') {
                numero = current - parseInt(numero);
            }

            $("body").css('font-size', numero + unidade);
        }
    }]);

    return BotLayoutController;
}(BotController);

'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotUserAskingsController = function (_BotController) {
  _inherits(BotUserAskingsController, _BotController);

  function BotUserAskingsController() {
    _classCallCheck(this, BotUserAskingsController);

    return _possibleConstructorReturn(this, (BotUserAskingsController.__proto__ || Object.getPrototypeOf(BotUserAskingsController)).apply(this, arguments));
  }

  _createClass(BotUserAskingsController, [{
    key: "^(eu ((quer|gostar)(o|ia)))( de)?( te| lhe)?( pedir)( um(a)?) (.*)$",
    value: function euQuerGostarOIaDeTeLhePedirUmA$() {
      console.log(arguments);
      var objeto = arguments[9];
      var resultado = {};
      if (objeto == 'pizza') {
        bot.ask('Qual sabor?').then(function (sabor) {
          resultado.sabor = sabor;
          return bot.ask('Borda recheada?');
        }).then(function (borda) {
          resultado.borda = borda;
          return bot.ask('Qual o refrigerante?');
        }).then(function (refrigerante) {
          resultado.refrigerante = refrigerante;
          var r = resultado;
          return 'Voc\xEA pediu pizza de ' + r.sabor + '. Borda recheada ' + r.borda + ' e refrigerante ' + r.refrigerante;
        }).then(bot.speak);
      }
    }
  }]);

  return BotUserAskingsController;
}(BotController);


'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotUserBagController = function (_BotController) {
  _inherits(BotUserBagController, _BotController);

  function BotUserBagController() {
    _classCallCheck(this, BotUserBagController);

    return _possibleConstructorReturn(this, (BotUserBagController.__proto__ || Object.getPrototypeOf(BotUserBagController)).apply(this, arguments));
  }

  _createClass(BotUserBagController, [{
    key: "^(o que|.*) vai na mochila$",
    value: function oQueVaiNaMochila$(param) {
      var objeto = param !== 'o que' ? param : null;

      if (!window.localStorage['user.bag']) {
        bot.ask('O que vai na mochila?').then(function (data) {
          window.localStorage['user.bag'] = [data].toString();
        });
      } else {

        if (objeto) {
          bot.speak('Ok!');
          window.localStorage['user.bag'] += ',' + objeto;
        }

        bot.speak(window.localStorage['user.bag']);
      }
      //.split(',')
    }
  }]);

  return BotUserBagController;
}(BotController);
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotUserFeelingsController = function (_BotController) {
  _inherits(BotUserFeelingsController, _BotController);

  function BotUserFeelingsController() {
    _classCallCheck(this, BotUserFeelingsController);

    return _possibleConstructorReturn(this, (BotUserFeelingsController.__proto__ || Object.getPrototypeOf(BotUserFeelingsController)).apply(this, arguments));
  }

  return BotUserFeelingsController;
}(BotController);
"use strict";
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotUserNeedsController = function (_BotController) {
  _inherits(BotUserNeedsController, _BotController);

  function BotUserNeedsController() {
    _classCallCheck(this, BotUserNeedsController);

    return _possibleConstructorReturn(this, (BotUserNeedsController.__proto__ || Object.getPrototypeOf(BotUserNeedsController)).apply(this, arguments));
  }

  _createClass(BotUserNeedsController, [{
    key: "^(eu )?(preciso) (urgente )?(de |do |ir |me |ser )?(qu[eê] |q )?(.*)$",
    value: function euPrecisoUrgenteDeDoIrMeSerQuEQ$(user, need, urgent, indicate, that, object) {

      bot.speak("Usu\xE1rio precisa de " + object);
      window.localStorage["user.needs." + object] = 1;

      if (urgent) {
        window.localStorage["user.needs." + object + ".urgent"] = 1;
        bot.speak("Urgente");
      }
    }
  }]);

  return BotUserNeedsController;
}(BotController);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotUserPeopleController = function (_BotController) {
    _inherits(BotUserPeopleController, _BotController);

    function BotUserPeopleController() {
        _classCallCheck(this, BotUserPeopleController);

        return _possibleConstructorReturn(this, (BotUserPeopleController.__proto__ || Object.getPrototypeOf(BotUserPeopleController)).apply(this, arguments));
    }

    _createClass(BotUserPeopleController, [{
        key: "^uma pessoa me procurou",
        value: function umaPessoaMeProcurou() {
            var self = this;
            self.ask('Que pessoa?').then(function (pessoa) {
                return bot.input('registrarPessoa ' + pessoa);
            });
        }
    }, {
        key: "^(voc[eê]|tu)( n[aã]o)?( me)?( conhece)( o| a)?( meu| minha| seu| sua| a| o| ess[ea])? (.*)",
        value: function vocETuNAOMeConheceOAMeuMinhaSeuSuaAOEssEa(voce, nao, me, conhece, oa, meuseusua, objetivo) {

            var conhece = typeof nao !== 'undefined' ? 'Não' : 'Sim';
            var your = typeof meuseusua !== 'undefined' ? meuseusua.replace('meu', 'seu').replace('minha', 'sua') : 'seu';
            // bot.speak('Quem:' + voce + '. Conhece:' + conhece + '. O que:' + objetivo);

            if (objetivo.match(/(amig[oa]|prim[oa]|irmã(o)|namorad[oa])/gi)) {
                return bot.ask('Que ' + objetivo + '?').then(function (amigo) {
                    if (window.localStorage['user.known.people.' + amigo]) {
                        return bot.speak('Conheço');
                    } else {
                        window.localStorage['user.known.people.' + amigo] = meuseusua + ' ' + objetivo;
                        return bot.speak('N\xE3o conhe\xE7o ' + your + ' ' + objetivo + ' ' + amigo + '. Registrei o como seu amigo.');
                    }
                });
            }
            // bot.speak('O que?');
        }
    }, {
        key: 'registrarPessoa',
        value: function registrarPessoa(pessoa) {
            return self.ask('Quem \xE9 ' + pessoa + '?').then(function (descricao) {
                window.localStorage['user.known.people.' + pessoa] = descricao;
                return 'Ok, ent\xE3o ' + pessoa + ' \xE9 igual \xE0 ' + descricao;
            }).then(self.speak);
        }
    }, {
        key: 'obterPessoa',
        value: function obterPessoa(pessoa) {
            return window.localStorage['user.known.people.' + pessoa];
        }
    }]);

    return BotUserPeopleController;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotBrowserSyncController = function (_BotController) {
  _inherits(BotBrowserSyncController, _BotController);

  function BotBrowserSyncController() {
    _classCallCheck(this, BotBrowserSyncController);

    return _possibleConstructorReturn(this, (BotBrowserSyncController.__proto__ || Object.getPrototypeOf(BotBrowserSyncController)).apply(this, arguments));
  }

  _createClass(BotBrowserSyncController, [{
    key: 'browsersync',

    /**
     * Surprise motherfucker
     */
    value: function browsersync() {}
  }]);

  return BotBrowserSyncController;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotWebSystemController = function (_BotController) {
  _inherits(BotWebSystemController, _BotController);

  /**
   * ?!?!
   */
  function BotWebSystemController() {
    _classCallCheck(this, BotWebSystemController);

    return _possibleConstructorReturn(this, (BotWebSystemController.__proto__ || Object.getPrototypeOf(BotWebSystemController)).call(this));
  }

  _createClass(BotWebSystemController, [{
    key: "^atalhos",
    value: function atalhos() {}
  }, {
    key: "^criar nota",
    value: function criarNota(entidade) {
      $("#modal_note").trigger('click');
      bot.speak('Vamo lá, procurando painel de cadastro de ' + entidade);
    }
  }, {
    key: "^cadastro de (.*)",
    value: function cadastroDe(entidade) {
      if (entidade == 'cliente') {
        loadURL('system/cliente/create', $("#content"));
        return bot.speak('Abrindo cadastro de cliente').then(function () {

          var p = Promise.resolve();;

          $("form.ajax-form fieldset .help-block").each(function () {
            var field = $(this).prev();
            var text = $(this).text();
            p = p.then(function () {
              return bot.ask(text);
            }).then(function (resposta) {
              $(field).val(resposta);
            });
          });
        });
      } else {
        bot.speak('Vamo lá, procurando painel de cadastro de ' + entidade);
      }
    }
  }, {
    key: "^qual o meu ping",
    value: function qualOMeuPing(entidade) {
      return loadURL("/ping", $("#content"));
      // bot.speak('Vamo lá, procurando painel de cadastro de ' + entidade);
    }
  }, {
    key: "^informações do sistema",
    value: function informaEsDoSistema(entidade) {
      bot.speak('carregando informações do sistema');
      return loadURL("/system/info", $("#content"));
      // bot.speak('Vamo lá, procurando painel de cadastro de ' + entidade);
    }
  }, {
    key: "^ferramenta de temas",
    value: function ferramentaDeTemas(entidade) {
      bot.speak('carregando criador de temas');
      return loadURL("/tool/themebuilder", $("#content"));
      // bot.speak('Vamo lá, procurando painel de cadastro de ' + entidade);
    }
  }, {
    key: "^gerenciador de arquivos",
    value: function gerenciadorDeArquivos(entidade) {
      bot.speak('carregando arquivos');
      return loadURL("/system/file-manager", $("#content"));
      // bot.speak('Vamo lá, procurando painel de cadastro de ' + entidade);
    }
  }, {
    key: "^tela cheia",
    value: function telaCheia(entidade) {
      $('[data-action="launchFullscreen"]').trigger('click');
      // bot.speak('Vamo lá, procurando painel de cadastro de ' + entidade);
    }
  }, {
    key: "^esconder menu",
    value: function esconderMenu(entidade) {
      $('body').addClass('hidden-menu');
      // bot.speak('Vamo lá, procurando painel de cadastro de ' + entidade);
    }
  }, {
    key: "^exibir menu",
    value: function exibirMenu(entidade) {
      $('body').removeClass('hidden-menu');
      // bot.speak('Vamo lá, procurando painel de cadastro de ' + entidade);
    }
  }, {
    key: "^menu radial",
    value: function menuRadial(entidade) {
      showRadialMenu();
      // bot.speak('Vamo lá, procurando painel de cadastro de ' + entidade);
    }
  }, {
    key: "^fechar menu radial",
    value: function fecharMenuRadial(entidade) {
      hideRadialMenu();
      // bot.speak('Vamo lá, procurando painel de cadastro de ' + entidade);
    }
  }, {
    key: "^sugestão de (.*)",
    value: function sugestODe(entidade) {
      var conteudo = encodeURIComponent(entidade);

      var url = "http://suggestqueries.google.com/complete/search?";
      url += "gl=pt-BR&hl=br&ds=&client=chrome";
      url += "&q=" + conteudo;

      $.ajax({
        url: 'http://suggestqueries.google.com/complete/search?client=chrome&q=' + conteudo,
        type: 'GET',
        dataType: 'jsonp',
        success: function success(data) {
          if (data[1].length > 0) {
            bot.speak("Sugestões:" + data[1].join(", "));
          }
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.log(jqXHR);
          console.log(textStatus);
          console.log(errorThrown);
        }
      });
    }
  }, {
    key: "^modo navegador",
    value: function modoNavegador(entidade) {
      loadURL("/tool/themebuilder", $("#content"));

      var p = Promise.resolve();
      $('body').addClass('hidden-menu');
      p = bot.speak("Iniciando modo navegador");

      var _loop = function _loop(x) {
        p = p.then(function () {
          $(".list-group-item").eq(x).click();
          return bot.speak("Abrindo link numero " + x);
        });
      };

      for (var x = 0; x < $(".list-group-item").length; x++) {
        _loop(x);
      }
      // bot.speak('Vamo lá, procurando painel de cadastro de ' + entidade);
    }
  }, {
    key: "^create system$",
    value: function createSystem$() {
      alert('create system problems');
      var questions = "\n          What kind of system do you want?\n          Where will the system run?\n          What is the language of the system?\n          Who will develop?\n          What will be the license?\n        ".split("\n");

      var p = Promise.resolve();
      var answers = [];

      var _loop2 = function _loop2(x) {
        p = p.then(function () {
          return bot.ask(questions[x].toString().trim(), function (answer) {
            answers.push(answer);
            return Promise.resolve();
          });
        });
        // console.log(questions[x]);
      };

      for (var x in questions) {
        _loop2(x);
      }

      return p.then(function () {

        for (var y in answers) {
          // p = p.then(function(){
          //   return bot.speak(`Answer number ${y}: ${answers[y]}`);
          // });
        }
      });
    }
  }]);

  return BotWebSystemController;
}(BotController);
'use strict';
/**
 * @extends BotController
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotWebController = function (_BotController) {
    _inherits(BotWebController, _BotController);

    /**
     * ?!?!
     */
    function BotWebController() {
        _classCallCheck(this, BotWebController);

        return _possibleConstructorReturn(this, (BotWebController.__proto__ || Object.getPrototypeOf(BotWebController)).call(this));
    }

    _createClass(BotWebController, [{
        key: "^alô$",
        value: function al$() {
            bot.speak('Alô.');
        }
        /**
         * The most dangerous method
         * @param {string}
         */
        // "^(.*)$" (nome) {
        // if (nome === bot.params['nome']) {
        //     ask('Sim?').then(function(asking) {
        //         bot.input(asking);
        //     });
        // }
        //
        // if (nome.match(/[\u3400-\u9FBF]/)) {
        //     // speak(nome);
        //     //nome.split('').forEach(function(a,b){console.log(a, a.charCodeAt(0))})
        // }
        //
        // var regex = /[\u3000-\u303F]|[\u3040-\u309F]|[\u30A0-\u30FF]|[\uFF00-\uFFEF]|[\u4E00-\u9FAF]|[\u2605-\u2606]|[\u2190-\u2195]|\u203B/g;
        //
        // if (nome.match(regex)) {
        //     console.log('Caracteres japoneses detectados');
        //     nome.split('').forEach(function(a, b) {
        //         console.log(a, a.charCodeAt(0))
        //     });
        //     bot.speak(nome.split('').reverse().join(''));
        // }
        // if(bot.language != 'pt-BR'){
        //     // bot.speak(nome.split(' ').reverse().join(' '));
        // }

        // }

        /**
         * The second more dangerous method
         */
        // "^(.*)\s(.*)$" (nome, comando) {
        //     if (nome === bot.params['nome']) {
        //         return speak('Ok').then(() => {
        //             this.input(comando)
        //         })
        //     }
        // }

        /**
         * So what?
         * @param {string} computer "computer/computador"
         * @param {string} input the same input as aways
         */

    }, {
        key: "^(computador|copa d\'or|computer) (.*)$",
        value: function computadorCopaDOrComputer$(computer, input) {
            console.log('chamou o computador e deu-lhe um comando');
            return this.input(input);
        }

        /**
         * Define the bot name
         * @param {string} nome the bot name
         */

    }, {
        key: "^seu nome é (.*)",
        value: function seuNome(nome) {
            this.params['nome'] = nome;
            speak('Ok');
        }

        /**
         * Defines the user name
         * @param {string} nome the user name, or whatever, i dont care.
         */

    }, {
        key: "^meu nome é (.*)",
        value: function meuNome(nome) {
            this.user.params['nome'] = nome;
            speak('Ok ' + nome);
        }

        /**
         * A basic "params" interpreter.
         * @param {string} q q??????
         * @param {string} parametro the key of what should be saved as parameter
         * @param {string} indicador how to get this off?
         * @param {string} valor the value of param
         */

    }, {
        key: "^(meu|minha) (.*) (é|e|é de) (.*)",
        value: function meuMinhaEDe(q, parametro, indicador, valor) {
            this.user.params[parametro] = valor;
            var qresposta = q == 'meu' ? 'seu' : 'sua';
            speak('Ok, ' + qresposta + ' ' + parametro + ' \xE9 ' + valor);
        }

        /**
         * @todo more
         */

    }, {
        key: "^configurar$",
        value: function configurar$() {
            // esquema de perguntas.
            ask('Qual é o seu nome?').then(function (nome) {
                bot.user.params['nome'] = nome;
                return nome;
            }).then(function (value) {
                return speak('Parametro nome registrado como ' + value);
            });
        }

        /**
         * Madafoka yeah. But websql is deprecated...
         * @param  {string} table table name
         * @todo please dont do this.
         */

    }, {
        key: "^0000criar tabela (.*)$",
        value: function criarTabela$(table) {
            var sql = 'CREATE TABLE IF NOT EXISTS ' + table + ' (' + table + ', time)';
            console.log(sql);
            db.transaction(function (tx) {
                tx.executeSql(sql);
            });
        }

        /**
         * Insert simulator?
         * @param  {string} comando get the command
         * @param  {string} table see the table?
         * @param  {string} data the "name" or "anything" that will be inserted
         */

    }, {
        key: "^0000(inserir|cadastrar) ([^\s]+) (.*)$",
        value: function inserirCadastrarS$(comando, table, data) {
            var sql = 'INSERT INTO ' + table + ' (' + table + ', time)  VALUES (?, ?) ';
            console.log(sql);
            db.transaction(function (tx) {
                tx.executeSql(sql, [data, new Date().getTime()]);
            });
        }
    }, {
        key: "^0000selecionar (toda a tabela|tudo da tabela) (.*)$",
        value: function selecionarTodaATabelaTudoDaTabela$(comando, table) {
            var sql = 'SELECT * FROM ' + table;
            console.log(sql);
            db.transaction(function (tx) {
                tx.executeSql(sql, [], function (tx, rs) {
                    //console.log(rs.rows);
                    var output = '';
                    Object.keys(rs.rows).map(function (objectKey, index) {
                        var value = rs.rows[objectKey][table];
                        output += ' ' + value;
                    });

                    speak(output);
                });
            });
        }

        /**
         * The most simple greetings in the world
         * @param {string} comando yes.
         */

    }, {
        key: "^(bom dia|boa tarde|boa noite)$",
        value: function bomDiaBoaTardeBoaNoite$(comando) {
            speak(comando);
        }

        /**
         * Greetings
         */

    }, {
        key: "^(ola|olá|e aí|e ai)$",
        value: function olaOlEAEAi$(i) {
            speak('' + i).then(function () {

                if (bot.userIsOk && bot.userIsOk === true) {
                    return ask('Parece que tá tudo ok! Precisa de alguma coisa?').then(function (input) {
                        console.log(input);
                        if (input.match(/não/)) {
                            return speak('Tudo bem, estou aqui se precisar');
                        } else {
                            return speak('Aguarde...', bot.input(input).processQueue);
                        }
                    });
                } else if (bot.userIsOk === false) {
                    return ask('Alguma novidade?');
                } else {
                    return ask('Tudo bem aí?');
                }

                bot.userIsOk = bot.userIsOk || null;
            }).then(function (input) {
                if (!input) return;
                if (input.match(/tudo(.*)e aí/)) {
                    return speak('Maravilha').then(function () {
                        return speak('Aqui tá tudo ótimo');
                    });
                } else if (input.match(/tudo/)) {
                    return speak('Que bom!').then(function () {
                        return ask('Precisa de alguma coisa?').then(function (answer) {
                            speak('Ok, vou providenciar');
                        });
                    });
                } else if (input.match(/não/)) {
                    bot.userIsOk = false;
                    return speak('Hum, tudo bem.').then(function () {
                        return ask('Precisa de alguma coisa?').then(function (input) {
                            console.log(input);
                            if (input.match(/não/)) {
                                return speak('Tudo bem, estou aqui se precisar');
                            } else {
                                return speak('Verei aqui como atender \xE0: \'' + input + '\'');
                            }
                        });
                    });
                } else {
                    bot.userIsOk = true;
                    return speak('Beleza');
                }
                return true;
            });
        }
        //
        // "^qual\\s+((é a|é o|é|o|a)\\s+)?((meu|minha|seu|teu|sua|tua)\\s+)?(.*)$" (eoeo, eoeo2, seuteu, owner, param) {
        //     if (owner == 'meu' || owner == 'minha') {
        //         return speak('Pesquisando...').then(function() {
        //             // pesquisa o que é do usuario
        //             if (param in bot.user.params) {
        //                 var value = bot.user.params[param];
        //                 return speak(`Seu ${param} é ${value}`);
        //             } else {
        //                 return speak(`Eu não tenho seu ${param} cadastrado`).then(function() {
        //                     return ask(`Qual é o seu ${param}?`)
        //                 }).then(function(value) {
        //                     bot.user.params[param] = value;
        //                     return speak(`Parametro ${param} registrado como ${value}`);
        //                 })
        //             }
        //         })
        //     } //
        //
        //     if (param in bot.params) {
        //         var value = bot.params[param];
        //         speak(`Meu ${param} é ${bot.params[param]}`);
        //     } else {
        //         return speak(`Eu não tenho o parametro ${param} configurado.`)
        //             .then(function() {
        //                 return ask(`Qual é o meu ${param}?`, function(value) {
        //                     bot.params[param] = value;
        //                 })
        //             })
        //             // responde denovo
        //             .then(function(nome) {
        //                 return speak(`Ok, meu nome a partir de agora será ${nome}`);
        //             })
        //     }
        //
        // }

    }, {
        key: "^(comando|comandos)$",
        value: function comandoComandos$(commandos) {
            var lista = [];
            Object.keys(window.commands).filter(function (i) {
                var command = window.commands[i];
                if (command.toString().length > 20) {
                    lista.push(i);
                };
            });
            // ok
            for (var x in this.matches) {
                console.log(x);
            }
            //Object.keys(this.matches).filter(function(i){
            //  var command = ;
            //  if(command.toString().length > 20){
            //    lista.push(i);
            //  };
            //});
            console.log(lista);
        }
    }, {
        key: "^(documentação)$",
        value: function documentaO$(commando) {
            var self = this;
            if (!("docs" in this)) {
                $.getJSON('docs/docs.json', function (data) {

                    this.docs = data;
                    speak("Carregando documentação pela primeira vez", function () {
                        console.log("OK!");
                        documentacao.apply(self);
                    });
                }.bind(this));
            }

            function documentacao() {
                var undocumented = this.docs.filter(function (item) {
                    return "undocumented" in item;
                });

                var description = this.docs.filter(function (item) {
                    return "description" in item;
                });
                //speak(`Documentação carregada com ${this.docs.length} itens sendo ${undocumented.length} não documentados.`);
                speak('Documenta\xE7\xE3o carregada com ' + description.length + ' itens documentados.');
            }
            return 1;
        }
    }, {
        key: "^(abrir) (.*)$",
        value: function abrir$(comando, argumento) {

            console.log(argumento);
            //https://en.wikipedia.org/wiki/List_of_most_popular_websites
            var opens = {
                'teste': '/test1.html',
                'estouro de pilha': 'http://chat.stackexchange.com/rooms/11910/estouro-de-pilha',
                'stackoverflow': 'http://stackoverflow.com',
                'google': 'http://google.com',
                'gmail': 'http://gmail.com',
                'youtube': 'http://youtube.com',
                'facebook': 'http://facebook.com',
                'baidu': 'http://baidu.com',
                'wikipedia': 'http://wikipedia.org',
                'yahoo!': 'http://yahoo.com',
                'google india': 'http://google.co.in',
                'amazon': 'http://amazon.com',
                'tencent qq': 'http://qq.com',
                'google japan': 'http://google.co.jp',
                'windows live': 'http://live.com',
                'taobao': 'http://taobao.com',
                'vk': 'http://vk.com',
                'twitter': 'http://twitter.com',
                'instagram': 'http://instagram.com',
                'hao123': 'http://hao123.com',
                'sohu': 'http://sohu.com',
                'sina corp': 'http://sina.com.cn',
                'reddit': 'http://reddit.com',
                'google germany': 'http://google.de',
                'linkedin': 'http://linkedin.com',
                'tmall': 'http://tmall.com',
                'yahoo! japan': 'http://yahoo.co.jp',
                'sina weibo': 'http://weibo.com',
                'google france': 'http://google.fr',
                '360 safeguard': 'http://360.cn',
                'google uk': 'http://google.co.uk',
                'google russia': 'http://google.ru',
                'google brazil': 'http://google.com.br',
                'yandex': 'http://yandex.ru',
                'ebay': 'http://ebay.com',
                'bing': 'http://bing.com',
                'msn': 'http://msn.com',
                'google italy': 'http://google.it',
                'soso.com': 'http://soso.com',
                't.co': 'http://t.co',
                'wordpress.com': 'http://wordpress.com',
                'google spain': 'http://google.es',
                'microsoft': 'http://microsoft.com',
                'tumblr': 'http://tumblr.com',
                'aliexpress': 'http://aliexpress.com',
                'blogspot': 'http://blogspot.com',
                'netflix': 'http://netflix.com',
                'amazon japan': 'http://amazon.co.jp',
                'odnoklassniki': 'http://ok.ru',
                'google hong kong': 'http://google.com.hk',
                'stack overflow': 'http://stackoverflow.com',
                'google canada': 'http://google.ca',
                'google mexico': 'http://google.com.mx',
                'imgur': 'http://imgur.com',
                'pornhub': 'http://pornhub.com',
                'apple inc.': 'http://apple.com',
                'naver': 'http://naver.com',
                'mail.ru': 'http://mail.ru',
                'imdb': 'http://imdb.com',
                'popads': 'http://popads.net',
                'onclickads': 'http://onclickads.net',
                'microsoft office': 'http://office.com',
                'google korea': 'http://google.co.kr',
                'github': 'http://github.com',
                'pinterest': 'http://pinterest.com',
                'paypal': 'http://paypal.com',
                'tianya club': 'http://tianya.cn',
                'google taiwan': 'http://google.com.tw',
                'google turkey': 'http://google.com.tr',
                'google australia': 'http://google.com.au',
                'diply': 'http://diply.com',
                'amazon germany': 'http://amazon.de',
                'google indonesia': 'http://google.co.id',
                'microsoft online services': 'http://microsoftonline.com',
                'onclckds': 'http://onclckds.com',
                'twitch': 'http://twitch.tv',
                'adobe systems': 'http://adobe.com',
                'txxx': 'http://txxx.com',
                'amazon uk': 'http://amazon.co.uk',
                'wikia': 'http://wikia.com',
                'cnzz': 'http://cnzz.com',
                'cốc cốc': 'http://coccoc.com',
                '360 search': 'http://so.com',
                'xhamster': 'http://xhamster.com',
                'fc2 portal': 'http://fc2.com',
                'pixnet': 'http://pixnet.net',
                'dropbox': 'http://dropbox.com',
                'google poland': 'http://google.pl',
                'adfly': 'http://adf.ly',
                'zhihu': 'http://zhihu.com',
                'whatsapp': 'http://whatsapp.com',
                'google file storage': 'http://googleusercontent.com',
                'alibaba group': 'http://alibaba.com',
                'bonga cams': 'http://bongacams.com',
                'ask.com': 'http://ask.com',
                'google egypt': 'http://google.com.eg',
                'google saudi arabia': 'http://google.com.sa',
                'google thailand': 'http://google.co.th',
                'bbc online': 'http://bbc.com',
                'china youth league': 'http://youth.cn',
                'savefrom.net': 'http://savefrom.net',
                'amazon india': 'http://amazon.in',
                'guangming daily': 'http://gmw.cn',
                'google argentina': 'http://google.com.ar',
                'bbc': 'http://bbc.co.uk',
                'new york times': 'http://nytimes.com',
                'rakuten': 'http://rakuten.co.jp',
                'nicovideo': 'http://nicovideo.jp',
                'espn': 'http://espn.com',
                'cnn': 'http://cnn.com',
                'craigslist': 'http://craigslist.org',
                'booking.com': 'http://booking.com',
                'google netherlands': 'http://google.nl',
                'ebay uk': 'http://ebay.co.uk',
                'universo online': 'http://uol.com.br',
                'walmart': 'http://walmart.com',
                'daily mail': 'http://dailymail.co.uk',
                'grupo globo': 'http://globo.com',
                'avito': 'http://avito.ru',
                'google vietnam': 'http://google.com.vn',
                'google colombia': 'http://google.com.co',
                'google philippines': 'http://google.com.ph',
                'google ukraine': 'http://google.com.ua',
                'janela': 'http://xvideos.com',
                'porta': 'http://redtube.com',
                'redtube': 'http://redtube.com',
                'doubleclick': 'http://doubleclick.net',
                'xnxx': 'http://xnxx.com',
                'samsung': 'http://samsung.com',
                'accuweather': 'http://accuweather.com',
                'google ad services': 'http://googleadservices.com',
                'google web light': 'http://googleweblight.com',
                'kickasstorrents': 'http://kat.cr',
                'onet.pl': 'http://onet.pl',
                'yahoo! answers': 'http://answers.yahoo.com',
                'yahoo! news japan': 'http://news.yahoo.co.jp',
                'google news': 'http://news.google.com',
                'bitly': 'http://bit.ly'
            };

            argumento = argumento.toLowerCase();
            // console.log(argumento.toLowerCase());
            if (opens[argumento]) {
                var openedWindow = window.open(opens[argumento], argumento);
                this.windows.push(openedWindow);
                openedWindow.focus();
            }
        }
    }, {
        key: "^você está contando as frases$",
        value: function vocEstContandoAsFrases$() {
            if (window.frases) {
                speak('Sim, voc\xEA ja me mandou ' + window.frases + ' frases');
            }
        }
    }, {
        key: "^quantas frases (que eu|que eu já|eu já|já) (falei|disse)$",
        value: function quantasFrasesQueEuQueEuJEuJJFaleiDisse$() {
            if (window.frases) {
                speak('Nessa sess\xE3o, ' + window.frases + ' frases', function () {

                    var sql = 'SELECT COUNT(*) as total FROM LOG';
                    console.log(sql);
                    db.transaction(function (tx) {
                        tx.executeSql(sql, [], function (tx, rs) {
                            speak('E no geral, ' + rs.rows[0].total + ' frases.');
                        });
                    });
                });
            } //ué
        }

        //muito bom você está de parabéns

    }, {
        key: "^frases e versos$",
        value: function frasesEVersos$() {
            speak('Mano, cê tá me achando com cara de que?');
        }
    }, {
        key: "^foi mal$",
        value: function foiMal$() {
            speak('Foi mal é o caraleo.');
        }
    }, {
        key: "^quantas janelas você abriu$",
        value: function quantasJanelasVocAbriu$() {
            if (this.windows.length > 0) {
                speak('Eu abri ' + this.windows.length + ' janelas');
            } else {
                speak('Por enquanto nenhuma.');
            }
        }
    }, {
        key: "^quanto custa (.*)",
        value: function quantoCusta() {
            speak('procura no google');
        }
    }, {
        key: "^leia",
        value: function leia() {}
    }, {
        key: "^(atualiza|atualizar) página$",
        value: function atualizaAtualizarPGina$(query) {
            window.location.reload();
        }
    }, {
        key: "^(fale|fala|diga) (.*)$",
        value: function faleFalaDiga$(comando, query) {
            return bot.speak(query);
        }
    }, {
        key: "^criar um compromisso$",
        value: function criarUmCompromisso$() {}
    }, {
        key: "^mover meu compromisso$",
        value: function moverMeuCompromisso$() {}
    }, {
        key: "^definir um lembrete$",
        value: function definirUmLembrete$() {}
    }, {
        key: "^mostre-me meus lembretes$",
        value: function mostreMeMeusLembretes$() {}
    }, {
        key: "^defina um alarme$",
        value: function definaUmAlarme$() {}
    }, {
        key: "^mostre-me meus alarmes$",
        value: function mostreMeMeusAlarmes$() {}
    }, {
        key: "^envie um e-mail para$",
        value: function envieUmEMailPara$() {}
    }, {
        key: "^ligue para alguém$",
        value: function ligueParaAlguM$() {}
    }, {
        key: "^mostre-me lugares perto de mim$",
        value: function mostreMeLugaresPertoDeMim$() {}
    }, {
        key: "^mostre-me fotos de$",
        value: function mostreMeFotosDe$() {}
    }, {
        key: "^mostre-me um vídeo$",
        value: function mostreMeUmVDeo$() {}
    }, {
        key: "^quando é o próximo jogo?$",
        value: function quandoOPrXimoJogo$() {}
    }, {
        key: "^fale-me sobre$",
        value: function faleMeSobre$() {}
    }, {
        key: "^qual é a população do seu país?$",
        value: function qualAPopulaODoSeuPaS$() {}
    }, {
        key: "^qual é a altura?$",
        value: function qualAAltura$() {}
    }, {
        key: "^definir uma palavra$",
        value: function definirUmaPalavra$() {}
    }, {
        key: "^quando é ?$",
        value: function quando$() {}
    }, {
        key: "^quanto tempo dura um filme?$",
        value: function quantoTempoDuraUmFilme$() {}
    }, {
        key: "^quem é o ceo da microsoft?$",
        value: function quemOCeoDaMicrosoft$() {}
    }, {
        key: "^o que é um dólar americano em ienes japoneses ou quanto centímetros estão em uma polegada?$",
        value: function oQueUmDLarAmericanoEmIenesJaponesesOuQuantoCentMetrosEstOEmUmaPolegada$() {}
    }, {
        key: "^que horas são em nova iorque?$",
        value: function queHorasSOEmNovaIorque$() {}
    }, {
        key: "^qual é o seu nome?$",
        value: function qualOSeuNome$() {}
    }, {
        key: "^o que você é?$",
        value: function oQueVoc$() {}
    }, {
        key: "^você é mulher?$",
        value: function vocMulher$() {}
    }, {
        key: "^você é real?$",
        value: function vocReal$() {}
    }, {
        key: "^você é humano?$",
        value: function vocHumano$() {}
    }, {
        key: "^o que significa cortana?$",
        value: function oQueSignificaCortana$() {}
    }, {
        key: "^por que você é azul?$",
        value: function porQueVocAzul$() {}
    }, {
        key: "^posso mudar seu nome?$",
        value: function possoMudarSeuNome$() {}
    }, {
        key: "^quantos anos você tem?$",
        value: function quantosAnosVocTem$() {}
    }, {
        key: "^como você definiria a sua aparência?$",
        value: function comoVocDefiniriaASuaAparNcia$() {}
    }, {
        key: "^sabes cozinhar?$",
        value: function sabesCozinhar$() {}
    }, {
        key: "^o que você está vestindo?$",
        value: function oQueVocEstVestindo$() {}
    }, {
        key: "^você está dormindo?$",
        value: function vocEstDormindo$() {}
    }, {
        key: "^o que você come?$",
        value: function oQueVocCome$() {}
    }, {
        key: "^quem te criou?$",
        value: function quemTeCriou$() {}
    }, {
        key: "^onde você mora?$",
        value: function ondeVocMora$() {}
    }, {
        key: "^quem é sua mãe?$",
        value: function quemSuaME$() {}
    }, {
        key: "^quem é o teu pai?$",
        value: function quemOTeuPai$() {}
    }, {
        key: "^quem é seu chefe?$",
        value: function quemSeuChefe$() {}
    }, {
        key: "^você está acordado?$",
        value: function vocEstAcordado$() {}
    }, {
        key: "^você tem irmãos ou irmãs?$",
        value: function vocTemIrmOsOuIrmS$() {}
    }, {
        key: "^qual é a sua música favorita?$",
        value: function qualASuaMSicaFavorita$() {}
    }, {
        key: "^quem é seu artista favorito?$",
        value: function quemSeuArtistaFavorito$() {}
    }, {
        key: "^o que você está fazendo?$",
        value: function oQueVocEstFazendo$() {}
    }, {
        key: "^você pode dançar?$",
        value: function vocPodeDanAr$() {}
    }, {
        key: "^você é esperto?$",
        value: function vocEsperto$() {}
    }, {
        key: "^você é bonita?$",
        value: function vocBonita$() {}
    }, {
        key: "^você está quente?$",
        value: function vocEstQuente$() {}
    }, {
        key: "^você é solteiro?$",
        value: function vocSolteiro$() {}
    }, {
        key: "^você tem um bebê?$",
        value: function vocTemUmBeb$() {}
    }, {
        key: "^você tem um namorado?$",
        value: function vocTemUmNamorado$() {}
    }, {
        key: "^me beije$",
        value: function meBeije$() {}
    }, {
        key: "^você quer se casar comigo?$",
        value: function vocQuerSeCasarComigo$() {}
    }, {
        key: "^como eu deveria te chamar?$",
        value: function comoEuDeveriaTeChamar$() {}
    }, {
        key: "^o que está rolando?$",
        value: function oQueEstRolando$() {}
    }, {
        key: "^testando ..$",
        value: function testando$() {}
    }, {
        key: "^adeus$",
        value: function adeus$() {}
    }, {
        key: "^porque estamos aqui?$",
        value: function porqueEstamosAqui$() {}
    }, {
        key: "^de onde vêm os bebês?$",
        value: function deOndeVMOsBebS$() {}
    }, {
        key: "^qual o significado da vida?$",
        value: function qualOSignificadoDaVida$() {}
    }, {
        key: "^qual é a resposta para o universo?$",
        value: function qualARespostaParaOUniverso$() {}
    }, {
        key: "^o que é o amor?$",
        value: function oQueOAmor$() {}
    }, {
        key: "^adivinha?$",
        value: function adivinha$() {}
    }, {
        key: "^mostre-me scotty$",
        value: function mostreMeScotty$() {}
    }, {
        key: "^olá hal$",
        value: function olHal$() {}
    }, {
        key: "^abra as portas da baía pod$",
        value: function abraAsPortasDaBaAPod$() {}
    }, {
        key: "^usar a força$",
        value: function usarAForA$() {}
    }, {
        key: "^que a força esteja com você$",
        value: function queAForAEstejaComVoc$() {}
    }, {
        key: "^você é legal$",
        value: function vocLegal$() {}
    }, {
        key: "^você é linda$",
        value: function vocLinda$() {}
    }, {
        key: "^você é engraçado$",
        value: function vocEngraAdo$() {}
    }, {
        key: "^você é demais$",
        value: function vocDemais$() {}
    }, {
        key: "^você é a melhor assistente de sempre$",
        value: function vocAMelhorAssistenteDeSempre$() {}
    }, {
        key: "^você é feio$",
        value: function vocFeio$() {}
    }, {
        key: "^você é assustador$",
        value: function vocAssustador$() {}
    }, {
        key: "^você é irritante$",
        value: function vocIrritante$() {}
    }, {
        key: "^você é um merda$",
        value: function vocUmMerda$() {}
    }, {
        key: "^eu te amo$",
        value: function euTeAmo$() {}
    }, {
        key: "^qual é melhor, cortana ou siri?$",
        value: function qualMelhorCortanaOuSiri$() {}
    }, {
        key: "^qual é melhor, cortana ou google now?$",
        value: function qualMelhorCortanaOuGoogleNow$() {}
    }, {
        key: "^qual é melhor, bing ou google?$",
        value: function qualMelhorBingOuGoogle$() {}
    }, {
        key: "^qual é melhor, xbox ou playstation?$",
        value: function qualMelhorXboxOuPlaystation$() {}
    }, {
        key: "^qual é melhor, windows ou linux?$",
        value: function qualMelhorWindowsOuLinux$() {}
    }, {
        key: "^qual é melhor, windows ou mac os?$",
        value: function qualMelhorWindowsOuMacOs$() {}
    }, {
        key: "^qual é o melhor computador?$",
        value: function qualOMelhorComputador$() {}
    }, {
        key: "^qual é o melhor tablet?$",
        value: function qualOMelhorTablet$() {}
    }, {
        key: "^qual é o melhor sistema operacional?$",
        value: function qualOMelhorSistemaOperacional$() {}
    }, {
        key: "^qual é o melhor telefone?$",
        value: function qualOMelhorTelefone$() {}
    }, {
        key: "^qual é o melhor motor de busca?$",
        value: function qualOMelhorMotorDeBusca$() {}
    }, {
        key: "^o que você acha do windows?$",
        value: function oQueVocAchaDoWindows$() {}
    }, {
        key: "^o que você acha da apple?$",
        value: function oQueVocAchaDaApple$() {}
    }, {
        key: "^o que você acha do ios?$",
        value: function oQueVocAchaDoIos$() {}
    }, {
        key: "^o que você acha do google?$",
        value: function oQueVocAchaDoGoogle$() {}
    }, {
        key: "^o que você acha do android?$",
        value: function oQueVocAchaDoAndroid$() {}
    }, {
        key: "^o que você acha do siri?$",
        value: function oQueVocAchaDoSiri$() {}
    }, {
        key: "^o que você acha do google now?$",
        value: function oQueVocAchaDoGoogleNow$() {}
    }, {
        key: "^o que você acha do xbox?$",
        value: function oQueVocAchaDoXbox$() {}
    }, {
        key: "^o que você acha do playstation?$",
        value: function oQueVocAchaDoPlaystation$() {}
    }, {
        key: "^você conhece siri?$",
        value: function vocConheceSiri$() {}
    }, {
        key: "^você conhece o google now?$",
        value: function vocConheceOGoogleNow$() {}
    }, {
        key: "^conhece clippy?$",
        value: function conheceClippy$() {}
        //"^gosta de "satya nadella"?$":function(){}
        //"^gosta de "steve ballmer"?$":function(){}
        //"^gosta de "bill gates"?$":function(){}
        //"^o que é halo?$":function(){}

    }, {
        key: "^me fale sobre o halo?$",
        value: function meFaleSobreOHalo$() {}
    }, {
        key: "^o que você sabe sobre o halo 5?$",
        value: function oQueVocSabeSobreOHalo5$() {}
    }, {
        key: "^você está no halo 5?$",
        value: function vocEstNoHalo5$() {}
    }, {
        key: "^é você o cortana de halo?$",
        value: function vocOCortanaDeHalo$() {}
    }, {
        key: "^você é realmente cortana?$",
        value: function vocRealmenteCortana$() {}
    }, {
        key: "^você morreu?$",
        value: function vocMorreu$() {}
    }, {
        key: "^pensei que estivesse morto?$",
        value: function penseiQueEstivesseMorto$() {}
    }, {
        key: "^você está no halo 5?$",
        value: function vocEstNoHalo5$() {}
    }, {
        key: "^qual é o jogo favorito de halo?$",
        value: function qualOJogoFavoritoDeHalo$() {}
    }, {
        key: "^onde está o chefe mestre?$",
        value: function ondeEstOChefeMestre$() {}
    }, {
        key: "^qual é o sobrenome do mestre chefe?$",
        value: function qualOSobrenomeDoMestreChefe$() {}
    }, {
        key: "^o que o master chief está fazendo?$",
        value: function oQueOMasterChiefEstFazendo$() {}
    }, {
        key: "^você está namorando master chief?$",
        value: function vocEstNamorandoMasterChief$() {}
    }, {
        key: "^você ama master chief?$",
        value: function vocAmaMasterChief$() {}
    }, {
        key: "^qual é a idade de neil degrasse tyson?$",
        value: function qualAIdadeDeNeilDegrasseTyson$() {}
    }, {
        key: "^onde estava [louis c.k.] nascido?$",
        value: function ondeEstavaLouisCKNascido$() {}
    }, {
        key: "^(definir|o que significa) (.*)$",
        value: function definirOQueSignifica$() {
            speak("buscando significado");
        }
    }, {
        key: "^que horas são em [tokyo]?$",
        value: function queHorasSOEmTokyo$() {}
    }, {
        key: "^pesquisa por [photography tips]$",
        value: function pesquisaPorPhotographyTips$() {}
    }, {
        key: "^mostre-me fotos de [a torre inclinada de pisa]$",
        value: function mostreMeFotosDeATorreInclinadaDePisa$() {}
    }, {
        key: "^preciso de um guarda-chuva hoje? como está o tempo? qual é o tempo em [nova orleans] [neste fim de semana]?$",
        value: function precisoDeUmGuardaChuvaHojeComoEstOTempoQualOTempoEmNovaOrleansNesteFimDeSemana$() {}
    }, {
        key: "^qual o preço das ações [google]? o que a apple está negociando?$",
        value: function qualOPreODasAEsGoogleOQueAAppleEstNegociando$() {}
    }, {
        key: "^o que é [182 metros] em [milhas]? o que é [12 onças] em [litros]?$",
        value: function oQue182MetrosEmMilhasOQue12OnAsEmLitros$() {}
    }, {
        key: "^o que é [135] dividido por [7,5]? (muitos tipos de equações matemáticas funcionarão.)$",
        value: function oQue135DivididoPor75MuitosTiposDeEquaEsMatemTicasFuncionarO$() {}
    }, {
        key: "^pesquise [tumblr] para [fotos de gato] (mais aplicativos são adicionados a esta função de pesquisa dentro de aplicativos o tempo todo)$",
        value: function pesquiseTumblrParaFotosDeGatoMaisAplicativosSOAdicionadosAEstaFunODePesquisaDentroDeAplicativosOTempoTodo$() {}
    }, {
        key: "^tire uma foto$",
        value: function tireUmaFoto$() {}
    }, {
        key: "^gravar um vídeo$",
        value: function gravarUmVDeo$() {}
        //"^ativar / desativar [bluetooth, wi-fi, lanterna]$":function(){}

    }, {
        key: "^qual é a dica para [123 dólares]?$",
        value: function qualADicaPara123DLares$() {}
    }, {
        key: "^defina um alarme para [6:30 am]$",
        value: function definaUmAlarmePara630Am$() {}
    }, {
        key: "^defina um temporizador para [20 minutos]$",
        value: function definaUmTemporizadorPara20Minutos$() {}
    }, {
        key: "^crie um evento de calendário: [jantar com glenda, sábado às 21h.]$",
        value: function crieUmEventoDeCalendRioJantarComGlendaSBadoS21h$() {}
    }, {
        key: "^lembre-me de [comprar café às 7h] (tente locais! lembre-me de [comprar filtros de café em walgreens])$",
        value: function lembreMeDeComprarCafS7hTenteLocaisLembreMeDeComprarFiltrosDeCafEmWalgreens$() {}
    }, {
        key: "^qual é a minha agenda para amanhã? (também: qual é a aparência do meu dia [sexta-feira]?)$",
        value: function qualAMinhaAgendaParaAmanhTambMQualAAparNciaDoMeuDiaSextaFeira$() {}
    }, {
        key: "^onde está o meu pacote? (a confirmação de rastreamento deve estar no gmail)$",
        value: function ondeEstOMeuPacoteAConfirmaODeRastreamentoDeveEstarNoGmail$() {}
    }, {
        key: "^encontre [ion florença] [número de telefone] (funciona com todas as informações em seus contatos - endereços, aniversários, etc)$",
        value: function encontreIonFlorenANMeroDeTelefoneFuncionaComTodasAsInformaEsEmSeusContatosEndereOsAniversRiosEtc$() {}
    }, {
        key: "^mostre-me minhas contas. (ou: minhas contas são devidas esta semana.)$",
        value: function mostreMeMinhasContasOuMinhasContasSODevidasEstaSemana$() {}
    }, {
        key: "^mostre-me minhas últimas mensagens$",
        value: function mostreMeMinhasLtimasMensagens$() {}
    }, {
        key: "^mensagem para [twitter]: [oh meu deus, o episódio do casamento vermelho!]$",
        value: function mensagemParaTwitterOhMeuDeusOEpisDioDoCasamentoVermelho$() {}
    }, {
        key: "^o que é o francês para [eu sou charlie]?$",
        value: function oQueOFrancSParaEuSouCharlie$() {}
    }, {
        key: "^[enviar uma mensagem de hangout] para [pai]$",
        value: function enviarUmaMensagemDeHangoutParaPai$() {}
    }, {
        key: "^o que tem para hoje$",
        value: function oQueTemParaHoje$(i) {
            speak("nada de novidade");
        }
    }, {
        key: "^ok$",
        value: function ok$(linha, comando, palavra) {
            speak("ta bom");
        }
    }, {
        key: "^obrigado$",
        value: function obrigado$(linha, comando, palavra) {
            speak('de nada');
        }
    }, {
        key: "^(tudo bem e você|tudo bem você)$",
        value: function tudoBemEVocTudoBemVoc$(i) {
            speak("eu to ótima!");
        }
    }, {
        key: "^que horas são$",
        value: function queHorasSO$(i) {
            var d = new Date();
            var h = ("0" + d.getHours()).slice(-2);
            var m = ("0" + d.getMinutes()).slice(-2);
            speak('S\xE3o ' + h + ':' + m);;
        }
    }, {
        key: "^que dia é hoje$",
        value: function queDiaHoje$() {
            var data = new Date().toLocaleString("pt-BR", {
                weekday: "long",
                month: "long",
                year: "numeric",
                day: "numeric"
            });
            speak('Hoje \xE9 ' + data);
        }
    }, {
        key: "^procura no google (.*)$",
        value: function procuraNoGoogle$() {}
    }, {
        key: "^procura no google sobre (.*)$",
        value: function procuraNoGoogleSobre$() {}
    }, {
        key: "^procurar no google sobre (.*)$",
        value: function procurarNoGoogleSobre$() {}
    }, {
        key: "^pesquisar no google sobre (.*)$",
        value: function pesquisarNoGoogleSobre$() {}
    }, {
        key: "^acabou$",
        value: function acabou$(i) {}
    }, {
        key: "^fim de papo$",
        value: function fimDePapo$(i) {}
    }, {
        key: "^então$",
        value: function entO$(i) {}
    }, {
        key: "^anota aí$",
        value: function anotaA$(i) {}
    }, {
        key: "^beleza$",
        value: function beleza$(i) {
            speak("beleza");
        }
    }, {
        key: "^firmeza$",
        value: function firmeza$(i) {
            speak("firmeza");
        }
    }, {
        key: "^sucesso$",
        value: function sucesso$(i) {
            speak("sucesso");
        }
    }, {
        key: "^suave$",
        value: function suave$(i) {
            speak("suave");
        }
    }, {
        key: "^tudo certo$",
        value: function tudoCerto$(i) {
            speak("tudo certo");
        }
    }, {
        key: "^(você tá funcionando|funcionando|functionando|tá funcionando)$",
        value: function vocTFuncionandoFuncionandoFunctionandoTFuncionando$(i) {
            speak("sim, tá funcionando");
        }
    }, {
        key: "^e aí tá funcionando$",
        value: function eATFuncionando$(i) {
            speak("sim, sim, sim...");
        }
    }, {
        key: "^(tá ligada|tá ligado)$",
        value: function tLigadaTLigado$(i) {
            speak("sim, to ligada");
        }
    }, {
        key: "^(como faço|como faz)$",
        value: function comoFaOComoFaz$(i) {
            speak("Não sei, você que tem que me ensinar.");
        }
    }, {
        key: "^tem certeza$",
        value: function temCerteza$(i) {
            speak("certeza eu não tenho mas fica ai que nóis vai resolver isso.");
        }
    }, {
        key: "^vai mesmo$",
        value: function vaiMesmo$(i) {
            speak("vai po, pode confiar.");
        }
    }, {
        key: "^demorou então$",
        value: function demorouEntO$(i) {
            speak("fechou!");
        }
    }, {
        key: "^falou$",
        value: function falou$(i) {
            speak("falou, aquele abraço");
        }
    }, {
        key: "^você tem que aprender a se despedir$",
        value: function vocTemQueAprenderASeDespedir$(i) {
            speak("firmezinha!");
        }
    }, {
        key: "^é mesmo$",
        value: function mesmo$(i) {
            speak("hummmmm, é mesmo!");
        }
    }, {
        key: "^parabéns$",
        value: function parabNs$(i) {
            speak("valeu, valeu, valeu, brigada.");
        }
    }, {
        key: "^tem alguém aí$",
        value: function temAlguMA$(i) {
            speak("tem sim.");
        }
    }, {
        key: "^tá aí$",
        value: function tA$(i) {
            speak("to sim.");
        }
    }, {
        key: "^quem tá aí$",
        value: function quemTA$(i) {
            speak("eu to aqui, você tá ai.");
        }
    }, {
        key: "^morreu$",
        value: function morreu$(i) {
            speak("to vivassa");
        }
    }, {
        key: "^tá viva$",
        value: function tViva$(i) {
            speak("to viva, to bem, to gorda.");
        }
    }, {
        key: "^(qual minha localização|onde estou|onde eu to|onde eu tô)$",
        value: function qualMinhaLocalizaOOndeEstouOndeEuToOndeEuT$(i) {

            $.getJSON('https://geoip-db.com/json/geoip.php?jsonp=?').done(function (location) {

                speak('os sensores indicam que voc\xEA est\xE1 na cidade de ' + location.city + ' mas seu navegador diz que est\xE1 na ' + window.firstResults);
            });
        }
    }, {
        key: "^você sabe fazer operações aritméticas$",
        value: function vocSabeFazerOperaEsAritmTicas$(i) {
            speak("posso fazer operação aritmética ");
        }
    }, {
        key: "^você sabe fazer operações aritmética$",
        value: function vocSabeFazerOperaEsAritmTica$(i) {
            speak("você sabe fazer operações aritmética");
        }
    }, {
        key: "^você sabe fazer operações aritmética$",
        value: function vocSabeFazerOperaEsAritmTica$(i) {
            speak("você sabe fazer operações aritmética");
        }
    }, {
        key: "^repita(.*)$",
        value: function repita$(i, repetir) {
            speak(repetir);
        }
    }, {
        key: "^(computador|computer|campter|calculadora|contador)$",
        value: function computadorComputerCampterCalculadoraContador$(i) {

            // return speak('Iés');
            var options = [];
            if (i == 'computador') {
                document.getElementById("lang").value = 'pt-bR';
                options = ['sim', 'olá!', 'diga!', 'pois não?', 'estou aqui!', 'opa parece que temos um hacker aqui', 'ta bom meu velho'];
            }

            if (i == 'computer' || i == 'campter') {
                document.getElementById("lang").value = 'en';
                options = ['yes', 'wow', 'sure sir', 'yes sir', 'im here  '];
            }

            if (i == 'contador') {
                options = ['olá eu sou o robô de contabilidade.'];
            }
            var reply = options[Math.floor(Math.random() * options.length)];
            speak(reply);
        }
        // "^qual o seu nome$"(i) {
        //     speak("meu nome provisório é computador");
        // }

    }, {
        key: "^computador produz uma bomba atômica exploda$",
        value: function computadorProduzUmaBombaAtMicaExploda$(i) {
            speak("você tá ficando maluco.");
        }
    }, {
        key: "^computador produza uma bomba atômica exploda$",
        value: function computadorProduzaUmaBombaAtMicaExploda$(i) {
            speak("você tá ficando maluco.");
        }
    }, {
        key: "^computador produz uma bomba atômica explode$",
        value: function computadorProduzUmaBombaAtMicaExplode$(i) {
            speak("você tá ficando maluco.");
        }
    }, {
        key: "^computador produzir bomba atômica$",
        value: function computadorProduzirBombaAtMica$(i) {
            speak("você tá ficando maluco.");
        }
    }, {
        key: "^(lágrima|lágrimas)$",
        value: function lGrimaLGrimas$(i) {
            speak("chorando se foi quem um dia só me fez chorar.");
        }
    }, {
        key: "^hello world$",
        value: function helloWorld$(i) {
            speak("hello world");
        }
    }, {
        key: "^computador (está|tá) me (ouvindo|escutando)$",
        value: function computadorEstTMeOuvindoEscutando$(i, a, o) {
            speak('Sim, to te ' + o);
        }
    }, {
        key: "^computador você me (ouve|escuta)$",
        value: function computadorVocMeOuveEscuta$(i, o) {
            speak('Sim, eu te escuto');
        }
    }, {
        key: "^faça meu dever de casa$",
        value: function faAMeuDeverDeCasa$(i) {
            speak("Taí uma coisa que eu não sei fazer, que tal me ensinar?");
        }
    }, {
        key: "^tá tudo bem$",
        value: function tTudoBem$(i) {
            speak("tá tudo ótimo!");
        }
    }, {
        key: "^tudo e você$",
        value: function tudoEVoc$(i) {
            speak("Tamo junto meu parsa.");
        }
    }, {
        key: "^que que manda$",
        value: function queQueManda$(i) {
            speak("Mando em nada.");
        }
    }, {
        key: "^certinho$",
        value: function certinho$(i) {
            speak("certinho");
        }
    }, {
        key: "^tá me devendo hein$",
        value: function tMeDevendoHein$(i) {
            speak("Me desculpe.");
        }
    }, {
        key: "^(como vai você|como você tá|como você está)$",
        value: function comoVaiVocComoVocTComoVocEst$(i) {
            speak("Eu estou ótima.");
        }
    }, {
        key: "^tocar música no youtube$",
        value: function tocarMSicaNoYoutube$(i) {
            speak("Tocando musica: qualquer uma");
        }
    }, {
        key: "^dona fany$",
        value: function donaFany$(i) {

            this.language = 'es';
            // bot.params('language', 'es');
            speak("pero que si pero que no. ¿dónde está mi gato");
            speak("Quiero comer pastel de pollo con queso");
        }
    }, {
        key: "^ajuda aí$",
        value: function ajudaA$(i) {
            speak("ajuda aí em que?");
        }
    }, {
        key: "^qual o plural de (.*)$",
        value: function qualOPluralDe$(singular) {
            var regras = {

                /**
                 * Palavras que terminam em a|e|i|o|u|ã|ãe|ão
                 * apenas acrescenta a letra 's' no final
                 * @type {Object}
                 */
                acrescentar: {
                    's': ['a', 'e', 'i', 'o', 'u', 'ã'],
                    'es': ['r', 'z', 'n', 'ás', 'ês'],
                    '': ['is', 'us', 'os']
                },

                /**
                 * Palavras que terminam em al|el|ol|ul|il|m
                 * substitui a terminação
                 * @type {Object}
                 */
                substituir: {
                    'ões': 'ão',
                    'ais': 'al',
                    'eis': 'el',
                    'ois': 'ol',
                    'uis': 'ul',
                    'is': 'il',
                    'ns': 'm'
                },

                /**
                 * Plural das sete exceções
                 * @type {Object}
                 */
                excecoes: {
                    'males': 'mal',
                    'cônsules': 'cônsul',
                    'méis': 'mel',
                    'féis': 'fel',
                    'cais': 'cal'
                }

            };

            var plural = function plural(palavra) {

                var regex_troca = "^([a-zA-Zà-úÀ-Ú]*)(%s)$",
                    plural = "";

                for (var regra in regras) {

                    switch (regra) {

                        case 'acrescentar':

                            for (var adicao in regras[regra]) {

                                var busca = regex_troca.replace("%s", regras[regra][adicao].join("|")),
                                    regex = new RegExp(busca, 'i');

                                if (regex.exec(palavra) !== null) {
                                    plural = palavra + adicao;
                                    break;
                                }
                            }

                            break;

                        case 'substituir':

                            for (var substituicao in regras[regra]) {

                                var busca = regex_troca.replace("%s", regras[regra][substituicao]),
                                    regex = new RegExp(busca, 'i');

                                if (regex.exec(palavra) !== null) {
                                    /**
                                     * Se a palavra for paroxítona ou proparoxítona,
                                     * troca-se 'il' por 'eis'
                                     */
                                    if (palavra.match(/([áéíóú])/) !== null && regex.exec(palavra)[2] == "il") {
                                        plural = palavra.replace("il", "eis");
                                        break;
                                    } else {
                                        var busca_sub = new RegExp(regex.exec(palavra)[2] + '$', 'i');
                                        plural = palavra.replace(busca_sub, substituicao);
                                        break;
                                    }
                                }
                            }

                            break;

                        case 'excecoes':

                            for (var excecao in regras[regra]) {
                                if (palavra == regras[regra][excecao]) {
                                    plural = excecao;
                                    break;
                                }
                            }

                            break;

                    }
                }

                return plural !== "" ? plural : palavra;
            };
            // var map = {
            //     "ão": "ões",
            //     "el": "éis",
            //     "ar": "ares",
            // }
            // var plural = singular;
            // for (let x in map) {
            //     plural = plural.replace(new RegExp(x + "$", 'gi'), map[x]);
            // }

            var resultado = plural(singular);
            bot.speak('Plural de ' + singular + ', ' + resultado);
        }
    }]);

    return BotWebController;
}(BotController);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotGoogleCalendarService = function (_BotService) {
  _inherits(BotGoogleCalendarService, _BotService);

  function BotGoogleCalendarService() {
    _classCallCheck(this, BotGoogleCalendarService);

    return _possibleConstructorReturn(this, (BotGoogleCalendarService.__proto__ || Object.getPrototypeOf(BotGoogleCalendarService)).call(this));
  }

  _createClass(BotGoogleCalendarService, [{
    key: 'test',
    value: function test() {
      var event = {
        'summary': 'Google I/O 2015',
        'location': '800 Howard St., San Francisco, CA 94103',
        'description': 'A chance to hear more about Google\'s developer products.',
        'start': {
          'dateTime': '2015-05-28T09:00:00-07:00',
          'timeZone': 'America/Los_Angeles'
        },
        'end': {
          'dateTime': '2015-05-28T17:00:00-07:00',
          'timeZone': 'America/Los_Angeles'
        },
        'recurrence': ['RRULE:FREQ=DAILY;COUNT=2'],
        'attendees': [{ 'email': 'lpage@example.com' }, { 'email': 'sbrin@example.com' }],
        'reminders': {
          'useDefault': false,
          'overrides': [{ 'method': 'email', 'minutes': 24 * 60 }, { 'method': 'popup', 'minutes': 10 }]
        }
      };

      var request = gapi.client.calendar.events.insert({
        'calendarId': 'primary',
        'resource': event
      });

      request.execute(function (event) {
        appendPre('Event created: ' + event.htmlLink);
      });
    }
  }]);

  return BotGoogleCalendarService;
}(BotService);

// Refer to the JavaScript quickstart on how to setup the environment:
// https://developers.google.com/google-apps/calendar/quickstart/js
// Change the scope to 'https://www.googleapis.com/auth/calendar' and delete any
// stored credentials.
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotCustomSearchService = function (_BotService) {
  _inherits(BotCustomSearchService, _BotService);

  function BotCustomSearchService(searchQuery, limit, start) {
    _classCallCheck(this, BotCustomSearchService);

    var _this = _possibleConstructorReturn(this, (BotCustomSearchService.__proto__ || Object.getPrototypeOf(BotCustomSearchService)).call(this));

    _this.limit = limit || 1;
    _this.start = start || 1;

    var url = 'https://www.googleapis.com/customsearch/v1?';
    url += 'key=AIzaSyCO3WLwjGM6536OMWo-_tHY2KbYY42BbVk';
    url += '&cx=006010955803914891759:pqodilzkz7i';
    url += '&alt=json';
    // url += '&limit=' + ;
    url += '&num=' + _this.limit;
    url += '&start=' + _this.start;
    url += '&lr=lang_pt';
    url += '&q=' + searchQuery;
    _this.requestUrl = url;
    return _this;
  }

  _createClass(BotCustomSearchService, [{
    key: 'getImage',
    value: function getImage() {
      this.requestUrl += "&searchType=image";
      this.requestUrl += "&imgType=face"; //clipart, face, lineart, news, photo
      return this.get();
    }
  }, {
    key: 'get',
    value: function get() {
      var self = this;
      return new Promise(function (resolve, reject) {
        $.getJSON(self.requestUrl, resolve, reject);
      });
    }
  }]);

  return BotCustomSearchService;
}(BotService);
'use strict';
/**
 * @see https://developers.google.com/knowledge-graph/
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotKnowledgeGraphSearchService = function (_BotService) {
    _inherits(BotKnowledgeGraphSearchService, _BotService);

    /**
     * [constructor description]
     * @method constructor
     * @param  {[type]}    searchQuery [description]
     * @param  {[type]}    limit       [description]
     * @param  {[type]}    types       [description]
     * @return {[type]}                [description]
     */
    function BotKnowledgeGraphSearchService(searchQuery, types, limit) {
        _classCallCheck(this, BotKnowledgeGraphSearchService);

        var _this = _possibleConstructorReturn(this, (BotKnowledgeGraphSearchService.__proto__ || Object.getPrototypeOf(BotKnowledgeGraphSearchService)).call(this));

        _this.types = types || 'Person';
        _this.limit = limit || 1;
        _this.apiKey = 'AIzaSyCO3WLwjGM6536OMWo-_tHY2KbYY42BbVk';
        _this.defaultUrl = 'https://kgsearch.googleapis.com/v1/entities:search?query={0}&key={1}&limit={2}&indent=True&languages=pt';
        _this.defaultUrl += '&types=' + _this.types;
        _this.requestUrl = _this.defaultUrl.format(searchQuery, _this.apiKey, _this.limit);

        return _this;
    }

    _createClass(BotKnowledgeGraphSearchService, [{
        key: 'get',
        value: function get() {
            var self = this;
            return new Promise(function (resolve, reject) {
                $.getJSON(self.requestUrl, resolve, reject);
            });
        }
    }]);

    return BotKnowledgeGraphSearchService;
}(BotService);

// First, checks if it isn't implemented yet.


if (!String.prototype.format) {
    String.prototype.format = function () {
        var args = arguments;
        return this.replace(/{(\d+)}/g, function (match, number) {
            return typeof args[number] != 'undefined' ? args[number] : match;
        });
    };
}

var kgs = new BotKnowledgeGraphSearchService('Thiago Bocchile');
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BotGoogleTasksService = function (_BotGoogleService) {
  _inherits(BotGoogleTasksService, _BotGoogleService);

  function BotGoogleTasksService() {
    _classCallCheck(this, BotGoogleTasksService);

    return _possibleConstructorReturn(this, (BotGoogleTasksService.__proto__ || Object.getPrototypeOf(BotGoogleTasksService)).call(this));
  }

  _createClass(BotGoogleTasksService, [{
    key: 'getTaskLists',
    value: function getTaskLists(params) {
      return gapi.client.tasks.tasklists.list(params).then(function (response) {
        return response.result.items;
      });
    }
  }, {
    key: 'createTaskList',
    value: function createTaskList(name) {}
  }]);

  return BotGoogleTasksService;
}(BotGoogleService);